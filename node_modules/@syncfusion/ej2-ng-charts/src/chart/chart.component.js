var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, ContentChild, Optional } from '@angular/core';
import { ComponentBase, applyMixins, setValue } from '@syncfusion/ej2-ng-base';
import { Chart, LineSeries, ScatterSeries, ColumnSeries, SplineSeries, SplineAreaSeries, StripLine, AreaSeries, ScrollBar, StepLineSeries, StepAreaSeries, StackingColumnSeries, StackingAreaSeries, BarSeries, StackingBarSeries, RangeColumnSeries, BubbleSeries, Tooltip, Crosshair, Category, DateTime, Logarithmic, Legend, Zoom, DataLabel, Selection, ChartAnnotation, HiloSeries, HiloOpenCloseSeries, WaterfallSeries, RangeAreaSeries, CandleSeries, PolarSeries, RadarSeries, SmaIndicator, TmaIndicator, EmaIndicator, AccumulationDistributionIndicator, MacdIndicator, AtrIndicator, RsiIndicator, MomentumIndicator, StochasticIndicator, BollingerBands, BoxAndWhiskerSeries, HistogramSeries, ErrorBar, Trendlines, DateTimeCategory, MultiColoredLineSeries, MultiColoredAreaSeries, MultiLevelLabel } from '@syncfusion/ej2-charts';
import { SeriesCollectionDirective } from './series.directive';
import { AxesDirective } from './axes.directive';
import { RowsDirective } from './rows.directive';
import { ColumnsDirective } from './columns.directive';
import { AnnotationsDirective } from './annotations.directive';
import { SelectedDataIndexesDirective } from './selecteddataindexes.directive';
import { IndicatorsDirective } from './indicators.directive';
export var inputs = ['annotations', 'axes', 'background', 'border', 'chartArea', 'columns', 'crosshair', 'currencyCode', 'dataSource', 'description', 'enablePersistence', 'enableRtl', 'enableSideBySidePlacement', 'height', 'indicators', 'isMultiSelect', 'isTransposed', 'legendSettings', 'locale', 'margin', 'palettes', 'primaryXAxis', 'primaryYAxis', 'rows', 'selectedDataIndexes', 'selectionMode', 'series', 'tabIndex', 'theme', 'title', 'titleStyle', 'tooltip', 'useGroupingSeparator', 'width', 'zoomSettings'];
export var outputs = ['animationComplete', 'annotationRender', 'axisLabelRender', 'axisMultiLabelRender', 'axisRangeCalculated', 'beforePrint', 'chartMouseClick', 'chartMouseDown', 'chartMouseLeave', 'chartMouseMove', 'chartMouseUp', 'dragComplete', 'legendRender', 'load', 'loaded', 'pointClick', 'pointMove', 'pointRender', 'resized', 'seriesRender', 'textRender', 'tooltipRender', 'zoomComplete'];
export var twoWays = [''];
/**
 * Chart Component
 * ```html
 * <ejschart></ejschart>
 * ```
 */
var ChartComponent = /** @class */ (function (_super) {
    __extends(ChartComponent, _super);
    function ChartComponent(ngEle, srenderer, viewContainerRef, lineSeries, scatterSeries, columnSeries, splineSeries, splineAreaSeries, stripLine, areaSeries, scrollBar, stepLineSeries, stepAreaSeries, stackingColumnSeries, stackingAreaSeries, barSeries, stackingBarSeries, rangeColumnSeries, bubbleSeries, tooltip, crosshair, category, dateTime, logarithmic, legend, zoom, dataLabel, selection, chartAnnotation, hiloSeries, hiloOpenCloseSeries, waterfallSeries, rangeAreaSeries, candleSeries, polarSeries, radarSeries, smaIndicator, tmaIndicator, emaIndicator, accumulationDistributionIndicator, macdIndicator, atrIndicator, rsiIndicator, momentumIndicator, stochasticIndicator, bollingerBands, boxAndWhiskerSeries, histogramSeries, errorBar, trendlines, dateTimeCategory, multiColoredLineSeries, multiColoredAreaSeries, multiLevelLabel) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.tags = ['series', 'axes', 'rows', 'columns', 'annotations', 'selectedDataIndexes', 'indicators'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        for (var i = 3; i < arguments.length; i++) {
            var injectedObj = arguments[i];
            if (injectedObj) {
                _this.injectedModules.push(injectedObj);
            }
        }
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    ChartComponent.prototype.ngOnInit = function () {
    };
    ChartComponent.prototype.ngAfterViewInit = function () {
    };
    ChartComponent.prototype.ngOnDestroy = function () {
    };
    ChartComponent.prototype.ngAfterContentChecked = function () {
    };
    ChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-chart',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {
                        childSeries: new ContentChild(SeriesCollectionDirective),
                        childAxes: new ContentChild(AxesDirective),
                        childRows: new ContentChild(RowsDirective),
                        childColumns: new ContentChild(ColumnsDirective),
                        childAnnotations: new ContentChild(AnnotationsDirective),
                        childSelectedDataIndexes: new ContentChild(SelectedDataIndexesDirective),
                        childIndicators: new ContentChild(IndicatorsDirective)
                    }
                },] },
    ];
    /** @nocollapse */
    ChartComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ViewContainerRef, },
        { type: LineSeries, decorators: [{ type: Optional },] },
        { type: ScatterSeries, decorators: [{ type: Optional },] },
        { type: ColumnSeries, decorators: [{ type: Optional },] },
        { type: SplineSeries, decorators: [{ type: Optional },] },
        { type: SplineAreaSeries, decorators: [{ type: Optional },] },
        { type: StripLine, decorators: [{ type: Optional },] },
        { type: AreaSeries, decorators: [{ type: Optional },] },
        { type: ScrollBar, decorators: [{ type: Optional },] },
        { type: StepLineSeries, decorators: [{ type: Optional },] },
        { type: StepAreaSeries, decorators: [{ type: Optional },] },
        { type: StackingColumnSeries, decorators: [{ type: Optional },] },
        { type: StackingAreaSeries, decorators: [{ type: Optional },] },
        { type: BarSeries, decorators: [{ type: Optional },] },
        { type: StackingBarSeries, decorators: [{ type: Optional },] },
        { type: RangeColumnSeries, decorators: [{ type: Optional },] },
        { type: BubbleSeries, decorators: [{ type: Optional },] },
        { type: Tooltip, decorators: [{ type: Optional },] },
        { type: Crosshair, decorators: [{ type: Optional },] },
        { type: Category, decorators: [{ type: Optional },] },
        { type: DateTime, decorators: [{ type: Optional },] },
        { type: Logarithmic, decorators: [{ type: Optional },] },
        { type: Legend, decorators: [{ type: Optional },] },
        { type: Zoom, decorators: [{ type: Optional },] },
        { type: DataLabel, decorators: [{ type: Optional },] },
        { type: Selection, decorators: [{ type: Optional },] },
        { type: ChartAnnotation, decorators: [{ type: Optional },] },
        { type: HiloSeries, decorators: [{ type: Optional },] },
        { type: HiloOpenCloseSeries, decorators: [{ type: Optional },] },
        { type: WaterfallSeries, decorators: [{ type: Optional },] },
        { type: RangeAreaSeries, decorators: [{ type: Optional },] },
        { type: CandleSeries, decorators: [{ type: Optional },] },
        { type: PolarSeries, decorators: [{ type: Optional },] },
        { type: RadarSeries, decorators: [{ type: Optional },] },
        { type: SmaIndicator, decorators: [{ type: Optional },] },
        { type: TmaIndicator, decorators: [{ type: Optional },] },
        { type: EmaIndicator, decorators: [{ type: Optional },] },
        { type: AccumulationDistributionIndicator, decorators: [{ type: Optional },] },
        { type: MacdIndicator, decorators: [{ type: Optional },] },
        { type: AtrIndicator, decorators: [{ type: Optional },] },
        { type: RsiIndicator, decorators: [{ type: Optional },] },
        { type: MomentumIndicator, decorators: [{ type: Optional },] },
        { type: StochasticIndicator, decorators: [{ type: Optional },] },
        { type: BollingerBands, decorators: [{ type: Optional },] },
        { type: BoxAndWhiskerSeries, decorators: [{ type: Optional },] },
        { type: HistogramSeries, decorators: [{ type: Optional },] },
        { type: ErrorBar, decorators: [{ type: Optional },] },
        { type: Trendlines, decorators: [{ type: Optional },] },
        { type: DateTimeCategory, decorators: [{ type: Optional },] },
        { type: MultiColoredLineSeries, decorators: [{ type: Optional },] },
        { type: MultiColoredAreaSeries, decorators: [{ type: Optional },] },
        { type: MultiLevelLabel, decorators: [{ type: Optional },] },
    ]; };
    return ChartComponent;
}(Chart));
export { ChartComponent };
applyMixins(ChartComponent, [ComponentBase]);
export var LineSeriesService = { provide: LineSeries, useValue: LineSeries };
export var ScatterSeriesService = { provide: ScatterSeries, useValue: ScatterSeries };
export var ColumnSeriesService = { provide: ColumnSeries, useValue: ColumnSeries };
export var SplineSeriesService = { provide: SplineSeries, useValue: SplineSeries };
export var SplineAreaSeriesService = { provide: SplineAreaSeries, useValue: SplineAreaSeries };
export var StripLineService = { provide: StripLine, useValue: StripLine };
export var AreaSeriesService = { provide: AreaSeries, useValue: AreaSeries };
export var ScrollBarService = { provide: ScrollBar, useValue: ScrollBar };
export var StepLineSeriesService = { provide: StepLineSeries, useValue: StepLineSeries };
export var StepAreaSeriesService = { provide: StepAreaSeries, useValue: StepAreaSeries };
export var StackingColumnSeriesService = { provide: StackingColumnSeries, useValue: StackingColumnSeries };
export var StackingAreaSeriesService = { provide: StackingAreaSeries, useValue: StackingAreaSeries };
export var BarSeriesService = { provide: BarSeries, useValue: BarSeries };
export var StackingBarSeriesService = { provide: StackingBarSeries, useValue: StackingBarSeries };
export var RangeColumnSeriesService = { provide: RangeColumnSeries, useValue: RangeColumnSeries };
export var BubbleSeriesService = { provide: BubbleSeries, useValue: BubbleSeries };
export var TooltipService = { provide: Tooltip, useValue: Tooltip };
export var CrosshairService = { provide: Crosshair, useValue: Crosshair };
export var CategoryService = { provide: Category, useValue: Category };
export var DateTimeService = { provide: DateTime, useValue: DateTime };
export var LogarithmicService = { provide: Logarithmic, useValue: Logarithmic };
export var LegendService = { provide: Legend, useValue: Legend };
export var ZoomService = { provide: Zoom, useValue: Zoom };
export var DataLabelService = { provide: DataLabel, useValue: DataLabel };
export var SelectionService = { provide: Selection, useValue: Selection };
export var ChartAnnotationService = { provide: ChartAnnotation, useValue: ChartAnnotation };
export var HiloSeriesService = { provide: HiloSeries, useValue: HiloSeries };
export var HiloOpenCloseSeriesService = { provide: HiloOpenCloseSeries, useValue: HiloOpenCloseSeries };
export var WaterfallSeriesService = { provide: WaterfallSeries, useValue: WaterfallSeries };
export var RangeAreaSeriesService = { provide: RangeAreaSeries, useValue: RangeAreaSeries };
export var CandleSeriesService = { provide: CandleSeries, useValue: CandleSeries };
export var PolarSeriesService = { provide: PolarSeries, useValue: PolarSeries };
export var RadarSeriesService = { provide: RadarSeries, useValue: RadarSeries };
export var SmaIndicatorService = { provide: SmaIndicator, useValue: SmaIndicator };
export var TmaIndicatorService = { provide: TmaIndicator, useValue: TmaIndicator };
export var EmaIndicatorService = { provide: EmaIndicator, useValue: EmaIndicator };
export var AccumulationDistributionIndicatorService = { provide: AccumulationDistributionIndicator, useValue: AccumulationDistributionIndicator };
export var MacdIndicatorService = { provide: MacdIndicator, useValue: MacdIndicator };
export var AtrIndicatorService = { provide: AtrIndicator, useValue: AtrIndicator };
export var RsiIndicatorService = { provide: RsiIndicator, useValue: RsiIndicator };
export var MomentumIndicatorService = { provide: MomentumIndicator, useValue: MomentumIndicator };
export var StochasticIndicatorService = { provide: StochasticIndicator, useValue: StochasticIndicator };
export var BollingerBandsService = { provide: BollingerBands, useValue: BollingerBands };
export var BoxAndWhiskerSeriesService = { provide: BoxAndWhiskerSeries, useValue: BoxAndWhiskerSeries };
export var HistogramSeriesService = { provide: HistogramSeries, useValue: HistogramSeries };
export var ErrorBarService = { provide: ErrorBar, useValue: ErrorBar };
export var TrendlinesService = { provide: Trendlines, useValue: Trendlines };
export var DateTimeCategoryService = { provide: DateTimeCategory, useValue: DateTimeCategory };
export var MultiColoredLineSeriesService = { provide: MultiColoredLineSeries, useValue: MultiColoredLineSeries };
export var MultiColoredAreaSeriesService = { provide: MultiColoredAreaSeries, useValue: MultiColoredAreaSeries };
export var MultiLevelLabelService = { provide: MultiLevelLabel, useValue: MultiLevelLabel };
//# sourceMappingURL=chart.component.js.map