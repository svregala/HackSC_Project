var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, ContentChild, Optional } from '@angular/core';
import { ComponentBase, applyMixins, setValue } from '@syncfusion/ej2-ng-base';
import { AccumulationChart, PieSeries, FunnelSeries, PyramidSeries, AccumulationTooltip, AccumulationLegend, AccumulationSelection, AccumulationDataLabel, AccumulationAnnotation } from '@syncfusion/ej2-charts';
import { AccumulationSeriesCollectionDirective } from './series.directive';
import { AccumulationAnnotationsDirective } from './annotations.directive';
export var inputs = ['annotations', 'background', 'border', 'currencyCode', 'dataSource', 'enablePersistence', 'enableRtl', 'enableSmartLabels', 'height', 'isMultiSelect', 'legendSettings', 'locale', 'margin', 'selectedDataIndexes', 'selectionMode', 'series', 'theme', 'title', 'titleStyle', 'tooltip', 'width'];
export var outputs = ['animationComplete', 'annotationRender', 'beforePrint', 'chartMouseClick', 'chartMouseDown', 'chartMouseLeave', 'chartMouseMove', 'chartMouseUp', 'legendRender', 'load', 'loaded', 'pointClick', 'pointMove', 'pointRender', 'resized', 'seriesRender', 'textRender', 'tooltipRender'];
export var twoWays = [''];
/**
 * AccumulationChart Component
 * ```html
 * <ejs-accumulationchart></ejs-accumulationchart>
 * ```
 */
var AccumulationChartComponent = /** @class */ (function (_super) {
    __extends(AccumulationChartComponent, _super);
    function AccumulationChartComponent(ngEle, srenderer, viewContainerRef, pieSeries, funnelSeries, pyramidSeries, accumulationTooltip, accumulationLegend, accumulationSelection, accumulationDataLabel, accumulationAnnotation) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.tags = ['series', 'annotations'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        for (var i = 3; i < arguments.length; i++) {
            var injectedObj = arguments[i];
            if (injectedObj) {
                _this.injectedModules.push(injectedObj);
            }
        }
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    AccumulationChartComponent.prototype.ngOnInit = function () {
    };
    AccumulationChartComponent.prototype.ngAfterViewInit = function () {
    };
    AccumulationChartComponent.prototype.ngOnDestroy = function () {
    };
    AccumulationChartComponent.prototype.ngAfterContentChecked = function () {
    };
    AccumulationChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-accumulationchart',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {
                        childSeries: new ContentChild(AccumulationSeriesCollectionDirective),
                        childAnnotations: new ContentChild(AccumulationAnnotationsDirective)
                    }
                },] },
    ];
    /** @nocollapse */
    AccumulationChartComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ViewContainerRef, },
        { type: PieSeries, decorators: [{ type: Optional },] },
        { type: FunnelSeries, decorators: [{ type: Optional },] },
        { type: PyramidSeries, decorators: [{ type: Optional },] },
        { type: AccumulationTooltip, decorators: [{ type: Optional },] },
        { type: AccumulationLegend, decorators: [{ type: Optional },] },
        { type: AccumulationSelection, decorators: [{ type: Optional },] },
        { type: AccumulationDataLabel, decorators: [{ type: Optional },] },
        { type: AccumulationAnnotation, decorators: [{ type: Optional },] },
    ]; };
    return AccumulationChartComponent;
}(AccumulationChart));
export { AccumulationChartComponent };
applyMixins(AccumulationChartComponent, [ComponentBase]);
export var PieSeriesService = { provide: PieSeries, useValue: PieSeries };
export var FunnelSeriesService = { provide: FunnelSeries, useValue: FunnelSeries };
export var PyramidSeriesService = { provide: PyramidSeries, useValue: PyramidSeries };
export var AccumulationTooltipService = { provide: AccumulationTooltip, useValue: AccumulationTooltip };
export var AccumulationLegendService = { provide: AccumulationLegend, useValue: AccumulationLegend };
export var AccumulationSelectionService = { provide: AccumulationSelection, useValue: AccumulationSelection };
export var AccumulationDataLabelService = { provide: AccumulationDataLabel, useValue: AccumulationDataLabel };
export var AccumulationAnnotationService = { provide: AccumulationAnnotation, useValue: AccumulationAnnotation };
//# sourceMappingURL=accumulationchart.component.js.map