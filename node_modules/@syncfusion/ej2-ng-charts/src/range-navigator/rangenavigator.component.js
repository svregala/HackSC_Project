var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, ContentChild, Optional } from '@angular/core';
import { ComponentBase, applyMixins, setValue } from '@syncfusion/ej2-ng-base';
import { RangeNavigator, RangeTooltip, PeriodSelector, AreaSeries, StepLineSeries, DateTime, Logarithmic } from '@syncfusion/ej2-charts';
import { RangenavigatorSeriesCollectionDirective } from './series.directive';
export var inputs = ['allowSnapping', 'animationDuration', 'dataSource', 'disableRangeSelector', 'enableDeferredUpdate', 'enableGrouping', 'enablePersistence', 'enableRtl', 'groupBy', 'height', 'interval', 'intervalType', 'labelFormat', 'labelIntersectAction', 'labelPosition', 'labelStyle', 'locale', 'logBase', 'majorGridLines', 'majorTickLines', 'margin', 'maximum', 'minimum', 'navigatorBorder', 'navigatorStyleSettings', 'periodSelectorSettings', 'query', 'secondaryLabelAlignment', 'series', 'skeleton', 'skeletonType', 'theme', 'tickPosition', 'tooltip', 'useGroupingSeparator', 'value', 'valueType', 'width', 'xName', 'yName'];
export var outputs = ['beforePrint', 'changed', 'labelRender', 'load', 'loaded', 'resized', 'selectorRender', 'tooltipRender'];
export var twoWays = [''];
/**
 * RangeNavigator Component
 * ```html
 * <ejs-rangenavigator></ejs-rangenavigator>
 * ```
 */
var RangeNavigatorComponent = /** @class */ (function (_super) {
    __extends(RangeNavigatorComponent, _super);
    function RangeNavigatorComponent(ngEle, srenderer, viewContainerRef, rangeTooltip, periodSelector, areaSeries, stepLineSeries, dateTime, logarithmic) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.tags = ['series'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        for (var i = 3; i < arguments.length; i++) {
            var injectedObj = arguments[i];
            if (injectedObj) {
                _this.injectedModules.push(injectedObj);
            }
        }
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    RangeNavigatorComponent.prototype.ngOnInit = function () {
    };
    RangeNavigatorComponent.prototype.ngAfterViewInit = function () {
    };
    RangeNavigatorComponent.prototype.ngOnDestroy = function () {
    };
    RangeNavigatorComponent.prototype.ngAfterContentChecked = function () {
    };
    RangeNavigatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-rangenavigator',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {
                        childSeries: new ContentChild(RangenavigatorSeriesCollectionDirective)
                    }
                },] },
    ];
    /** @nocollapse */
    RangeNavigatorComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ViewContainerRef, },
        { type: RangeTooltip, decorators: [{ type: Optional },] },
        { type: PeriodSelector, decorators: [{ type: Optional },] },
        { type: AreaSeries, decorators: [{ type: Optional },] },
        { type: StepLineSeries, decorators: [{ type: Optional },] },
        { type: DateTime, decorators: [{ type: Optional },] },
        { type: Logarithmic, decorators: [{ type: Optional },] },
    ]; };
    return RangeNavigatorComponent;
}(RangeNavigator));
export { RangeNavigatorComponent };
applyMixins(RangeNavigatorComponent, [ComponentBase]);
export var RangeTooltipService = { provide: RangeTooltip, useValue: RangeTooltip };
export var PeriodSelectorService = { provide: PeriodSelector, useValue: PeriodSelector };
//# sourceMappingURL=rangenavigator.component.js.map