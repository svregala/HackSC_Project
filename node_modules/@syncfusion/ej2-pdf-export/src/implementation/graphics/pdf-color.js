define(["require", "exports", "./enum", "./../input-output/pdf-operators", "./../collections/dictionary", "./../primitives/pdf-number", "./../primitives/pdf-array"], function (require, exports, enum_1, pdf_operators_1, dictionary_1, pdf_number_1, pdf_array_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfColor = (function () {
        function PdfColor(color1, color2, color3, color4) {
            if (color1 instanceof PdfColor) {
                this.redColor = color1.r;
                this.greenColor = color1.g;
                this.blueColor = color1.b;
                this.grayColor = color1.gray;
                this.alpha = color1.alpha;
                this.filled = (this.alpha !== 0);
            }
            else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' &&
                typeof color4 === 'undefined') {
                this.constructor(PdfColor.maxColourChannelValue, color1, color2, color3);
            }
            else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' && typeof color4 === 'number') {
                this.redColor = color2;
                this.cyanColor = 0;
                this.greenColor = color3;
                this.magentaColor = 0;
                this.blueColor = color4;
                this.yellowColor = 0;
                this.blackColor = 0;
                this.grayColor = 0;
                this.alpha = color1;
                this.filled = true;
                this.assignCMYK(color2, color3, color4);
            }
        }
        PdfColor.prototype.assignCMYK = function (r, g, b) {
            var red = r / PdfColor.maxColourChannelValue;
            var green = g / PdfColor.maxColourChannelValue;
            var blue = b / PdfColor.maxColourChannelValue;
            var black = pdf_number_1.PdfNumber.min(1 - red, 1 - green, 1 - blue);
            var cyan = (black === 1.0) ? 0 : (1 - red - black) / (1 - black);
            var magenta = (black === 1.0) ? 0 : (1 - green - black) / (1 - black);
            var yellow = (black === 1.0) ? 0 : (1 - blue - black) / (1 - black);
            this.blackColor = black;
            this.cyanColor = cyan;
            this.magentaColor = magenta;
            this.yellowColor = yellow;
        };
        Object.defineProperty(PdfColor.prototype, "r", {
            get: function () {
                return this.redColor;
            },
            set: function (value) {
                this.redColor = value;
                this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
                this.filled = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "red", {
            get: function () {
                return (this.r / PdfColor.maxColourChannelValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "b", {
            get: function () {
                return this.blueColor;
            },
            set: function (value) {
                this.blueColor = value;
                this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
                this.filled = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "blue", {
            get: function () {
                return (this.b / PdfColor.maxColourChannelValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "g", {
            get: function () {
                return this.greenColor;
            },
            set: function (value) {
                this.greenColor = value;
                this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
                this.filled = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "green", {
            get: function () {
                return (this.g / PdfColor.maxColourChannelValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "gray", {
            get: function () {
                return ((((this.redColor + this.greenColor) + this.blueColor)) / (PdfColor.maxColourChannelValue * 3));
            },
            set: function (value) {
                if (value < 0) {
                    this.grayColor = 0;
                }
                else if (value > 1) {
                    this.grayColor = 1;
                }
                else {
                    this.grayColor = value;
                }
                this.r = (this.grayColor * PdfColor.maxColourChannelValue);
                this.g = (this.grayColor * PdfColor.maxColourChannelValue);
                this.b = (this.grayColor * PdfColor.maxColourChannelValue);
                this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
                this.filled = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "isEmpty", {
            get: function () {
                return !this.filled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfColor.prototype, "a", {
            get: function () {
                return this.alpha;
            },
            set: function (value) {
                if (value < 0) {
                    this.alpha = 0;
                }
                else {
                    this.alpha = value;
                }
                this.filled = true;
            },
            enumerable: true,
            configurable: true
        });
        PdfColor.prototype.toString = function (colorSpace, stroke) {
            if (this.isEmpty) {
                return '';
            }
            return this.rgbToString(stroke);
        };
        PdfColor.prototype.rgbToString = function (ifStroking) {
            var r = this.r;
            var g = this.g;
            var b = this.b;
            var key = (r << 16) + (g << 8) + b;
            if (ifStroking) {
                key += 1 << 24;
            }
            var colour = '';
            var obj = null;
            if (PdfColor.rgbStrings.containsKey(key)) {
                obj = PdfColor.rgbStrings.getValue(key);
            }
            if (obj == null) {
                var red = r / PdfColor.maxColourChannelValue;
                var green = g / PdfColor.maxColourChannelValue;
                var blue = b / PdfColor.maxColourChannelValue;
                if (ifStroking) {
                    colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';
                }
                else {
                    colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';
                }
                PdfColor.rgbStrings.setValue(key, colour);
            }
            else {
                colour = obj.toString();
            }
            return colour + pdf_operators_1.Operators.newLine;
        };
        PdfColor.prototype.toArray = function (colorSpace) {
            var array = new pdf_array_1.PdfArray();
            switch (colorSpace) {
                case enum_1.PdfColorSpace.Rgb:
                    array.add(new pdf_number_1.PdfNumber(this.red));
                    array.add(new pdf_number_1.PdfNumber(this.green));
                    array.add(new pdf_number_1.PdfNumber(this.blue));
                    break;
                default:
                    throw new Error('NotSupportedException : Unsupported colour space.');
            }
            return array;
        };
        PdfColor.rgbStrings = new dictionary_1.Dictionary();
        PdfColor.grayStringsSroke = new dictionary_1.Dictionary();
        PdfColor.grayStringsFill = new dictionary_1.Dictionary();
        PdfColor.maxColourChannelValue = 255.0;
        return PdfColor;
    }());
    exports.PdfColor = PdfColor;
});
