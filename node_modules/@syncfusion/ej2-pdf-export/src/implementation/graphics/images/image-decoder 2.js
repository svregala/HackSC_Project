define(["require", "exports", "./byte-array", "./../../primitives/pdf-stream", "./../../input-output/pdf-dictionary-properties", "./../../primitives/pdf-name", "./../../primitives/pdf-number", "./../../primitives/pdf-boolean", "./../../primitives/pdf-dictionary"], function (require, exports, byte_array_1, pdf_stream_1, pdf_dictionary_properties_1, pdf_name_1, pdf_number_1, pdf_boolean_1, pdf_dictionary_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ImageFormat;
    (function (ImageFormat) {
        ImageFormat[ImageFormat["Unknown"] = 0] = "Unknown";
        ImageFormat[ImageFormat["Bmp"] = 1] = "Bmp";
        ImageFormat[ImageFormat["Emf"] = 2] = "Emf";
        ImageFormat[ImageFormat["Gif"] = 3] = "Gif";
        ImageFormat[ImageFormat["Jpeg"] = 4] = "Jpeg";
        ImageFormat[ImageFormat["Png"] = 5] = "Png";
        ImageFormat[ImageFormat["Wmf"] = 6] = "Wmf";
        ImageFormat[ImageFormat["Icon"] = 7] = "Icon";
    })(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
    var ImageDecoder = (function () {
        function ImageDecoder(stream) {
            this.mFormat = ImageFormat.Unknown;
            this.mbitsPerComponent = 8;
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            this.mStream = stream;
            this.initialize();
        }
        Object.defineProperty(ImageDecoder.prototype, "height", {
            get: function () {
                return this.mHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageDecoder.prototype, "width", {
            get: function () {
                return this.mWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageDecoder.prototype, "bitsPerComponent", {
            get: function () {
                return this.mbitsPerComponent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageDecoder.prototype, "size", {
            get: function () {
                return this.mImageData.count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageDecoder.prototype, "imageData", {
            get: function () {
                return this.mImageData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageDecoder.prototype, "imageDataAsNumberArray", {
            get: function () {
                return this.mImageData.internalBuffer.buffer;
            },
            enumerable: true,
            configurable: true
        });
        ImageDecoder.prototype.initialize = function () {
            if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {
                this.mFormat = ImageFormat.Jpeg;
                this.parseJpegImage();
            }
            this.reset();
            this.mImageData = new byte_array_1.ByteArray(this.mStream.count);
            this.mStream.read(this.mImageData, 0, this.mImageData.count);
        };
        ImageDecoder.prototype.reset = function () {
            this.mStream.position = 0;
        };
        ImageDecoder.prototype.parseJpegImage = function () {
            this.reset();
            var imgData = new byte_array_1.ByteArray(this.mStream.count);
            this.mStream.read(imgData, 0, imgData.count);
            var i = 4;
            if (String.fromCharCode(imgData.getBuffer(i + 2)) === 'J' && String.fromCharCode(imgData.getBuffer(i + 3)) === 'F' && String.fromCharCode(imgData.getBuffer(i + 4)) === 'I' && String.fromCharCode(imgData.getBuffer(i + 5)) === 'F' && imgData.getBuffer(i + 6) === 0) {
                var length_1 = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
                while (i + length_1 < imgData.count) {
                    i += length_1;
                    if (imgData.getBuffer(i + 1) === 192) {
                        this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);
                        this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);
                        return;
                    }
                    else {
                        i += 2;
                        length_1 = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
                    }
                }
            }
        };
        Object.defineProperty(ImageDecoder.prototype, "format", {
            get: function () {
                return this.mFormat;
            },
            enumerable: true,
            configurable: true
        });
        ImageDecoder.prototype.checkIfJpeg = function () {
            this.reset();
            for (var i = 0; i < ImageDecoder.mJpegHeader.length; i++) {
                if (ImageDecoder.mJpegHeader[i] !== this.mStream.readByte(i)) {
                    return false;
                }
                this.mStream.position++;
            }
            return true;
        };
        ImageDecoder.prototype.getImageDictionary = function () {
            if (this.mFormat === ImageFormat.Jpeg) {
                var tempArrayBuffer = this.imageData.internalBuffer.length;
                this.imageStream = new pdf_stream_1.PdfStream();
                this.imageStream.isImage = true;
                var tempString = '';
                var decodedString = '';
                for (var i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {
                    tempString += String.fromCharCode(null, this.mStream.readByte(i));
                }
                for (var i = 0; i < tempString.length; i++) {
                    if (i % 2 !== 0) {
                        decodedString += tempString[i];
                    }
                }
                this.imageStream.data = [decodedString];
                this.imageStream.compress = false;
                this.imageStream.items.setValue(this.dictionaryProperties.type, new pdf_name_1.PdfName(this.dictionaryProperties.xObject));
                this.imageStream.items.setValue(this.dictionaryProperties.subtype, new pdf_name_1.PdfName(this.dictionaryProperties.image));
                this.imageStream.items.setValue(this.dictionaryProperties.width, new pdf_number_1.PdfNumber(this.width));
                this.imageStream.items.setValue(this.dictionaryProperties.height, new pdf_number_1.PdfNumber(this.height));
                this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new pdf_number_1.PdfNumber(this.bitsPerComponent));
                this.imageStream.items.setValue(this.dictionaryProperties.filter, new pdf_name_1.PdfName(this.dictionaryProperties.dctdecode));
                this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new pdf_name_1.PdfName(this.getColorSpace()));
                this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());
                return this.imageStream;
            }
            else {
                return this.imageStream;
            }
        };
        ImageDecoder.prototype.getColorSpace = function () {
            return this.dictionaryProperties.deviceRgb;
        };
        ImageDecoder.prototype.getDecodeParams = function () {
            var decodeParams = new pdf_dictionary_1.PdfDictionary();
            decodeParams.items.setValue(this.dictionaryProperties.columns, new pdf_number_1.PdfNumber(this.width));
            decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new pdf_boolean_1.PdfBoolean(true));
            decodeParams.items.setValue(this.dictionaryProperties.k, new pdf_number_1.PdfNumber(-1));
            decodeParams.items.setValue(this.dictionaryProperties.predictor, new pdf_number_1.PdfNumber(15));
            decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new pdf_number_1.PdfNumber(this.bitsPerComponent));
            return decodeParams;
        };
        ImageDecoder.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];
        ImageDecoder.mJpegHeader = [255, 216];
        ImageDecoder.GIF_HEADER = 'G,I,F,8';
        ImageDecoder.BMP_HEADER = 'B,M';
        return ImageDecoder;
    }());
    exports.ImageDecoder = ImageDecoder;
});
