define(["require", "exports", "./../drawing/pdf-drawing", "./../primitives/pdf-number"], function (require, exports, pdf_drawing_1, pdf_number_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfTransformationMatrix = (function () {
        function PdfTransformationMatrix(value) {
            this.radDegFactor = 180.0 / Math.PI;
            if (typeof value === 'undefined') {
                this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, 1.00, 0.00, 0.00);
            }
            else {
                this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, -1.00, 0.00, 0.00);
            }
        }
        Object.defineProperty(PdfTransformationMatrix.prototype, "matrix", {
            get: function () {
                return this.transformationMatrix;
            },
            set: function (value) {
                this.transformationMatrix = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfTransformationMatrix.prototype.translate = function (offsetX, offsetY) {
            this.transformationMatrix.translate(offsetX, offsetY);
        };
        PdfTransformationMatrix.prototype.scale = function (scaleX, scaleY) {
            this.transformationMatrix.elements[0] = scaleX;
            this.transformationMatrix.elements[3] = scaleY;
        };
        PdfTransformationMatrix.prototype.rotate = function (angle) {
            angle = (angle * Math.PI) / 180;
            this.transformationMatrix.elements[0] = Math.cos(angle);
            this.transformationMatrix.elements[1] = Math.sin(angle);
            this.transformationMatrix.elements[2] = -Math.sin(angle);
            this.transformationMatrix.elements[3] = Math.cos(angle);
        };
        PdfTransformationMatrix.prototype.toString = function () {
            var builder = '';
            var whitespace = ' ';
            for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {
                var temp = this.matrix.elements[i];
                builder += pdf_number_1.PdfNumber.floatToString(this.transformationMatrix.elements[i]);
                builder += whitespace;
            }
            return builder;
        };
        PdfTransformationMatrix.prototype.multiply = function (matrix) {
            this.transformationMatrix.multiply(matrix.matrix);
        };
        PdfTransformationMatrix.degreesToRadians = function (degreesX) {
            return this.degRadFactor * degreesX;
        };
        PdfTransformationMatrix.prototype.radiansToDegrees = function (radians) {
            return this.radDegFactor * radians;
        };
        PdfTransformationMatrix.prototype.clone = function () {
            return this;
        };
        PdfTransformationMatrix.degRadFactor = Math.PI / 180.0;
        return PdfTransformationMatrix;
    }());
    exports.PdfTransformationMatrix = PdfTransformationMatrix;
    var Matrix = (function () {
        function Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {
            if (typeof arg1 === 'undefined') {
                this.metrixElements = [];
            }
            else if (typeof arg1 === 'number') {
                this.constructor();
                this.metrixElements.push(arg1);
                this.metrixElements.push(arg2);
                this.metrixElements.push(arg3);
                this.metrixElements.push(arg4);
                this.metrixElements.push(arg5);
                this.metrixElements.push(arg6);
            }
            else {
                this.metrixElements = arg1;
            }
        }
        Object.defineProperty(Matrix.prototype, "elements", {
            get: function () {
                return this.metrixElements;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "offsetX", {
            get: function () {
                return this.metrixElements[4];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "offsetY", {
            get: function () {
                return this.metrixElements[5];
            },
            enumerable: true,
            configurable: true
        });
        Matrix.prototype.translate = function (offsetX, offsetY) {
            this.metrixElements[4] = offsetX;
            this.metrixElements[5] = offsetY;
        };
        Matrix.prototype.transform = function (point) {
            var x = point.x;
            var y = point.y;
            var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;
            var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;
            return new pdf_drawing_1.PointF(x2, y2);
        };
        Matrix.prototype.multiply = function (matrix) {
            var tempMatrix = [];
            tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);
            tempMatrix[1] = (this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3]);
            tempMatrix[2] = (this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2]);
            tempMatrix[3] = (this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3]);
            tempMatrix[4] = (this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX);
            tempMatrix[5] = (this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY);
            for (var i = 0; i < tempMatrix.length; i++) {
                this.elements[i] = tempMatrix[i];
            }
        };
        Matrix.prototype.dispose = function () {
            this.metrixElements = null;
        };
        Matrix.prototype.clone = function () {
            var m = new Matrix(this.metrixElements);
            return m;
        };
        return Matrix;
    }());
    exports.Matrix = Matrix;
});
