define(["require", "exports", "./enum", "./../../drawing/pdf-drawing", "./pdf-string-format", "./string-layouter", "./string-tokenizer"], function (require, exports, enum_1, pdf_drawing_1, pdf_string_format_1, string_layouter_1, string_tokenizer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfFont = (function () {
        function PdfFont(size, style) {
            this.fontStyle = enum_1.PdfFontStyle.Regular;
            if (typeof size === 'number' && typeof style === 'undefined') {
                this.fontSize = size;
            }
            else {
                this.fontSize = size;
                this.setStyle(style);
            }
        }
        Object.defineProperty(PdfFont.prototype, "name", {
            get: function () {
                return this.metrics.name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "size", {
            get: function () {
                return this.fontSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "height", {
            get: function () {
                return this.metrics.getHeight(null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "style", {
            get: function () {
                return this.fontStyle;
            },
            set: function (value) {
                this.fontStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "bold", {
            get: function () {
                return ((this.style & enum_1.PdfFontStyle.Bold) > 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "italic", {
            get: function () {
                return ((this.style & enum_1.PdfFontStyle.Italic) > 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "strikeout", {
            get: function () {
                return ((this.style & enum_1.PdfFontStyle.Strikeout) > 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "underline", {
            get: function () {
                return ((this.style & enum_1.PdfFontStyle.Underline) > 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "metrics", {
            get: function () {
                return this.fontMetrics;
            },
            set: function (value) {
                this.fontMetrics = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfFont.prototype, "element", {
            get: function () {
                return this.pdfFontInternals;
            },
            enumerable: true,
            configurable: true
        });
        PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {
            if (typeof text === 'string' && typeof arg2 === 'undefined') {
                return this.measureString(text, null);
            }
            else if (typeof text === 'string' && (arg2 instanceof pdf_string_format_1.PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {
                var temparg2 = arg2;
                var charactersFitted = 0;
                var linesFilled = 0;
                return this.measureString(text, temparg2, charactersFitted, linesFilled);
            }
            else if (typeof text === 'string' && (arg2 instanceof pdf_string_format_1.PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {
                var temparg2 = arg2;
                return this.measureString(text, 0, temparg2, arg3, arg4);
            }
            else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof pdf_string_format_1.PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {
                var layoutArea = new pdf_drawing_1.SizeF(arg2, 0);
                var temparg3 = arg3;
                return this.measureString(text, layoutArea, temparg3, arg4, arg5);
            }
            else {
                if (text == null) {
                    throw Error("ArgumentNullException(\"text\")");
                }
                var temparg2 = arg2;
                var temparg3 = arg3;
                var layouter = new string_layouter_1.PdfStringLayouter();
                var result = layouter.layout(text, this, temparg3, temparg2, false, new pdf_drawing_1.SizeF(0, 0));
                arg4 = text.length;
                arg5 = (result.empty) ? 0 : result.lines.length;
                return result.actualSize;
            }
        };
        PdfFont.prototype.equalsTo = function (obj) {
            var result = this.equalsToFont(obj);
            return result;
        };
        PdfFont.prototype.getInternals = function () {
            return this.pdfFontInternals;
        };
        PdfFont.prototype.setInternals = function (internals) {
            if (internals == null) {
                throw new Error('ArgumentNullException:internals');
            }
            this.pdfFontInternals = internals;
        };
        PdfFont.prototype.setStyle = function (style) {
            this.fontStyle = style;
        };
        PdfFont.prototype.applyFormatSettings = function (line, format, width) {
            var realWidth = width;
            if (format != null && width > 0) {
                if (format.characterSpacing !== 0) {
                    realWidth += (line.length - 1) * format.characterSpacing;
                }
                if (format.wordSpacing !== 0) {
                    var symbols = string_tokenizer_1.StringTokenizer.spaces;
                    var whitespacesCount = string_tokenizer_1.StringTokenizer.getCharsCount(line, symbols);
                    realWidth += whitespacesCount * format.wordSpacing;
                }
            }
            return realWidth;
        };
        PdfFont.charSizeMultiplier = 0.001;
        PdfFont.syncObject = new Object();
        return PdfFont;
    }());
    exports.PdfFont = PdfFont;
});
