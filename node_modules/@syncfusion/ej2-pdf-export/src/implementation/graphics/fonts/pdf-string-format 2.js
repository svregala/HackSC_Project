define(["require", "exports", "./../../graphics/enum", "./../../graphics/fonts/enum"], function (require, exports, enum_1, enum_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfStringFormat = (function () {
        function PdfStringFormat(arg1, arg2) {
            this.scalingFactor = 100.0;
            if (typeof arg1 === 'undefined') {
                this.internalLineLimit = true;
                this.wordWrapType = enum_2.PdfWordWrapType.Word;
            }
            else if (typeof arg1 === 'string') {
                this.constructor();
            }
            else {
                if (typeof arg2 === 'undefined') {
                    this.constructor();
                    this.textAlignment = arg1;
                }
                else {
                    this.constructor(arg1);
                    this.verticalAlignment = arg2;
                }
            }
        }
        Object.defineProperty(PdfStringFormat.prototype, "alignment", {
            get: function () {
                return this.textAlignment;
            },
            set: function (value) {
                this.textAlignment = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "lineAlignment", {
            get: function () {
                if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {
                    return enum_1.PdfVerticalAlignment.Top;
                }
                else {
                    return this.verticalAlignment;
                }
            },
            set: function (value) {
                this.verticalAlignment = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "rightToLeft", {
            get: function () {
                if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {
                    return false;
                }
                else {
                    return this.isRightToLeft;
                }
            },
            set: function (value) {
                this.isRightToLeft = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "characterSpacing", {
            get: function () {
                if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {
                    return 0;
                }
                else {
                    return this.internalCharacterSpacing;
                }
            },
            set: function (value) {
                this.internalCharacterSpacing = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "wordSpacing", {
            get: function () {
                if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {
                    return 0;
                }
                else {
                    return this.internalWordSpacing;
                }
            },
            set: function (value) {
                this.internalWordSpacing = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "lineSpacing", {
            get: function () {
                if (typeof this.leading === 'undefined' || this.leading == null) {
                    return 0;
                }
                else {
                    return this.leading;
                }
            },
            set: function (value) {
                this.leading = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "clipPath", {
            get: function () {
                if (typeof this.clip === 'undefined' || this.clip == null) {
                    return false;
                }
                else {
                    return this.clip;
                }
            },
            set: function (value) {
                this.clip = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "subSuperScript", {
            get: function () {
                if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {
                    return enum_2.PdfSubSuperScript.None;
                }
                else {
                    return this.pdfSubSuperScript;
                }
            },
            set: function (value) {
                this.pdfSubSuperScript = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "paragraphIndent", {
            get: function () {
                if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {
                    return 0;
                }
                else {
                    return this.internalParagraphIndent;
                }
            },
            set: function (value) {
                this.internalParagraphIndent = value;
                this.firstLineIndent = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "lineLimit", {
            get: function () {
                return this.internalLineLimit;
            },
            set: function (value) {
                this.internalLineLimit = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "measureTrailingSpaces", {
            get: function () {
                if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {
                    return false;
                }
                else {
                    return this.trailingSpaces;
                }
            },
            set: function (value) {
                this.trailingSpaces = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "noClip", {
            get: function () {
                if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {
                    return false;
                }
                else {
                    return this.isNoClip;
                }
            },
            set: function (value) {
                this.isNoClip = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "wordWrap", {
            get: function () {
                return this.wordWrapType;
            },
            set: function (value) {
                this.wordWrapType = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "horizontalScalingFactor", {
            get: function () {
                return this.scalingFactor;
            },
            set: function (value) {
                if (value <= 0) {
                    throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');
                }
                this.scalingFactor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringFormat.prototype, "firstLineIndent", {
            get: function () {
                if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {
                    return 0;
                }
                else {
                    return this.initialLineIndent;
                }
            },
            set: function (value) {
                this.initialLineIndent = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfStringFormat.prototype.clone = function () {
            var format = this;
            return format;
        };
        return PdfStringFormat;
    }());
    exports.PdfStringFormat = PdfStringFormat;
});
