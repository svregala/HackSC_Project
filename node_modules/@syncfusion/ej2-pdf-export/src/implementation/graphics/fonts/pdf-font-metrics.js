var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./pdf-font", "./enum", "./../../primitives/pdf-array"], function (require, exports, pdf_font_1, enum_1, pdf_array_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfFontMetrics = (function () {
        function PdfFontMetrics() {
            this.lineGap = 0;
        }
        PdfFontMetrics.prototype.getAscent = function (format) {
            var returnValue = this.ascent * pdf_font_1.PdfFont.charSizeMultiplier * this.getSize(format);
            return returnValue;
        };
        PdfFontMetrics.prototype.getDescent = function (format) {
            var returnValue = this.descent * pdf_font_1.PdfFont.charSizeMultiplier * this.getSize(format);
            return returnValue;
        };
        PdfFontMetrics.prototype.getLineGap = function (format) {
            var returnValue = this.lineGap * pdf_font_1.PdfFont.charSizeMultiplier * this.getSize(format);
            return returnValue;
        };
        PdfFontMetrics.prototype.getHeight = function (format) {
            var height;
            var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];
            var clearTypeFontCollection = [];
            for (var index = 0; index < clearTypeFonts.length; index++) {
                var font = clearTypeFonts[index];
                clearTypeFontCollection.push(font);
            }
            if (this.getDescent(format) < 0) {
                height = (this.getAscent(format) - this.getDescent(format) + this.getLineGap(format));
            }
            else {
                height = (this.getAscent(format) + this.getDescent(format) + this.getLineGap(format));
            }
            return height;
        };
        PdfFontMetrics.prototype.getSize = function (format) {
            var size = this.size;
            if (format != null) {
                switch (format.subSuperScript) {
                    case enum_1.PdfSubSuperScript.SubScript:
                        size /= this.subScriptSizeFactor;
                        break;
                    case enum_1.PdfSubSuperScript.SuperScript:
                        size /= this.superscriptSizeFactor;
                        break;
                }
            }
            return size;
        };
        PdfFontMetrics.prototype.clone = function () {
            var metrics = this;
            metrics.widthTable = WidthTable.clone();
            return metrics;
        };
        Object.defineProperty(PdfFontMetrics.prototype, "widthTable", {
            get: function () {
                return this.internalWidthTable;
            },
            set: function (value) {
                this.internalWidthTable = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfFontMetrics;
    }());
    exports.PdfFontMetrics = PdfFontMetrics;
    var WidthTable = (function () {
        function WidthTable() {
        }
        WidthTable.clone = function () {
            return null;
        };
        return WidthTable;
    }());
    exports.WidthTable = WidthTable;
    var StandardWidthTable = (function (_super) {
        __extends(StandardWidthTable, _super);
        function StandardWidthTable(widths) {
            var _this = _super.call(this) || this;
            if (widths == null) {
                throw new Error('ArgumentNullException:widths');
            }
            _this.widths = widths;
            return _this;
        }
        StandardWidthTable.prototype.items = function (index) {
            if (index < 0 || index >= this.widths.length) {
                throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');
            }
            var result = this.widths[index];
            return result;
        };
        Object.defineProperty(StandardWidthTable.prototype, "length", {
            get: function () {
                return this.widths.length;
            },
            enumerable: true,
            configurable: true
        });
        StandardWidthTable.prototype.clone = function () {
            var swt = this;
            swt.widths = this.widths;
            return swt;
        };
        StandardWidthTable.prototype.toArray = function () {
            var arr = new pdf_array_1.PdfArray(this.widths);
            return arr;
        };
        return StandardWidthTable;
    }(WidthTable));
    exports.StandardWidthTable = StandardWidthTable;
});
