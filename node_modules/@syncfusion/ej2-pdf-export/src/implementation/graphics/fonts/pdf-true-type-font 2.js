var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./unicode-true-type-font", "./pdf-font", "./enum", "./../../document/pdf-document"], function (require, exports, unicode_true_type_font_1, pdf_font_1, enum_1, pdf_document_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfTrueTypeFont = (function (_super) {
        __extends(PdfTrueTypeFont, _super);
        function PdfTrueTypeFont(base64String, size, style) {
            var _this = _super.call(this, size) || this;
            _this.isEmbedFont = false;
            _this.isUnicode = true;
            if (style !== undefined) {
                _this.createFontInternal(base64String, style);
            }
            else {
                _this.createFontInternal(base64String, enum_1.PdfFontStyle.Regular);
            }
            return _this;
        }
        PdfTrueTypeFont.prototype.equalsToFont = function (font) {
            var result = false;
            return result;
        };
        PdfTrueTypeFont.prototype.getLineWidth = function (line, format) {
            var width = 0;
            return width;
        };
        PdfTrueTypeFont.prototype.getCharWidth = function (charCode, format) {
            var codeWidth = this.fontInternal.getCharWidth(charCode);
            var size = this.metrics.getSize(format);
            codeWidth *= (0.001 * size);
            return codeWidth;
        };
        PdfTrueTypeFont.prototype.createFontInternal = function (base64String, style) {
            this.fontInternal = new unicode_true_type_font_1.UnicodeTrueTypeFont(base64String, this.size);
            this.calculateStyle(style);
            this.initializeInternals();
        };
        PdfTrueTypeFont.prototype.calculateStyle = function (style) {
            var iStyle = this.fontInternal.ttfMetrics.macStyle;
            if ((style & enum_1.PdfFontStyle.Underline) !== 0) {
                iStyle |= enum_1.PdfFontStyle.Underline;
            }
            if ((style & enum_1.PdfFontStyle.Strikeout) !== 0) {
                iStyle |= enum_1.PdfFontStyle.Strikeout;
            }
            this.setStyle(iStyle);
        };
        PdfTrueTypeFont.prototype.initializeInternals = function () {
            var equalFont = null;
            if (pdf_document_1.PdfDocument.enableCache) {
                equalFont = pdf_document_1.PdfDocument.cache.search(this);
            }
            var internals = null;
            if (equalFont !== null && equalFont !== undefined) {
                internals = equalFont.getInternals();
                var metrics = equalFont.metrics;
                metrics = metrics.clone();
                metrics.size = this.size;
                this.metrics = metrics;
                this.fontInternal = equalFont.fontInternal;
            }
            else {
                if (equalFont == null) {
                    if (this.fontInternal instanceof unicode_true_type_font_1.UnicodeTrueTypeFont) {
                        this.fontInternal.isEmbed = this.isEmbedFont;
                    }
                    this.fontInternal.createInternals();
                    internals = this.fontInternal.getInternals();
                    this.metrics = this.fontInternal.metrics;
                }
            }
            this.metrics.isUnicodeFont = true;
            this.setInternals(internals);
        };
        PdfTrueTypeFont.prototype.setSymbols = function (text) {
            var internalFont = this.fontInternal;
            if (internalFont != null) {
                internalFont.setSymbols(text);
            }
        };
        return PdfTrueTypeFont;
    }(pdf_font_1.PdfFont));
    exports.PdfTrueTypeFont = PdfTrueTypeFont;
});
