define(["require", "exports", "./../../drawing/pdf-drawing", "./enum", "./string-tokenizer"], function (require, exports, pdf_drawing_1, enum_1, string_tokenizer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfStringLayouter = (function () {
        function PdfStringLayouter() {
            this.isOverloadWithPosition = false;
        }
        PdfStringLayouter.prototype.layout = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (arg4 instanceof pdf_drawing_1.RectangleF) {
                this.initialize(arg1, arg2, arg3, arg4, arg5);
                this.isOverloadWithPosition = arg6;
                this.clientSize = arg7;
                var result = this.doLayout();
                this.clear();
                return result;
            }
            else {
                this.initialize(arg1, arg2, arg3, arg4);
                this.isOverloadWithPosition = arg5;
                this.clientSize = arg6;
                var result = this.doLayout();
                this.clear();
                return result;
            }
        };
        PdfStringLayouter.prototype.initialize = function (text, font, format, rectSize, pageHeight) {
            if (typeof pageHeight === 'number') {
                if (text == null) {
                    throw new Error('ArgumentNullException:text');
                }
                if (font == null) {
                    throw new Error('ArgumentNullException:font');
                }
                this.text = text;
                this.font = font;
                this.format = format;
                this.size = new pdf_drawing_1.SizeF(rectSize.width, rectSize.height);
                this.rectangle = rectSize;
                this.pageHeight = pageHeight;
                this.reader = new string_tokenizer_1.StringTokenizer(text);
            }
            else {
                this.initialize(text, font, format, new pdf_drawing_1.RectangleF(new pdf_drawing_1.PointF(0, 0), rectSize), 0);
            }
        };
        PdfStringLayouter.prototype.clear = function () {
            this.font = null;
            this.format = null;
            this.reader.close();
            this.reader = null;
            this.text = null;
        };
        PdfStringLayouter.prototype.doLayout = function () {
            var result = new PdfStringLayoutResult();
            var lineResult = new PdfStringLayoutResult();
            var lines = [];
            var line = this.reader.peekLine();
            var lineIndent = this.getLineIndent(true);
            while (line != null) {
                lineResult = this.layoutLine(line, lineIndent);
                var numSymbolsInserted = 0;
                var returnedValue = this.copyToResult(result, lineResult, lines, numSymbolsInserted);
                var success = returnedValue.success;
                numSymbolsInserted = returnedValue.numInserted;
                this.reader.readLine();
                line = this.reader.peekLine();
                lineIndent = this.getLineIndent(false);
            }
            this.finalizeResult(result, lines);
            return result;
        };
        PdfStringLayouter.prototype.getLineIndent = function (firstLine) {
            var lineIndent = 0;
            if (this.format != null) {
                lineIndent = (firstLine) ? this.format.firstLineIndent : this.format.paragraphIndent;
                lineIndent = (this.size.width > 0) ? Math.min(this.size.width, lineIndent) : lineIndent;
            }
            return lineIndent;
        };
        PdfStringLayouter.prototype.getLineHeight = function () {
            var height = this.font.height;
            if (this.format != null && this.format.lineSpacing !== 0) {
                height = this.format.lineSpacing + this.font.height;
            }
            return height;
        };
        PdfStringLayouter.prototype.getLineWidth = function (line) {
            var width = this.font.getLineWidth(line, this.format);
            return width;
        };
        PdfStringLayouter.prototype.layoutLine = function (line, lineIndent) {
            var lineResult = new PdfStringLayoutResult();
            lineResult.layoutLineHeight = this.getLineHeight();
            var lines = [];
            var maxWidth = this.size.width;
            var lineWidth = this.getLineWidth(line) + lineIndent;
            var lineType = LineType.FirstParagraphLine;
            var readWord = true;
            if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {
                this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);
            }
            else {
                var builder = '';
                var curLine = '';
                lineWidth = lineIndent;
                var curIndent = lineIndent;
                var reader = new string_tokenizer_1.StringTokenizer(line);
                var word = reader.peekWord();
                var isSingleWord = false;
                while (word != null) {
                    curLine = curLine + word;
                    var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent;
                    if (curLineWidth > maxWidth) {
                        if (this.getWrapType() == enum_1.PdfWordWrapType.None)
                            break;
                        if (this.getWrapType() != enum_1.PdfWordWrapType.Character || !readWord) {
                            var ln = builder.toString();
                            if (ln.indexOf(' ') === -1) {
                                isSingleWord = true;
                                this.addToLineResult(lineResult, lines, curLine, lineWidth, LineType.LayoutBreak | lineType);
                            }
                            else {
                                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);
                            }
                            if (this.isOverloadWithPosition) {
                                maxWidth = this.clientSize.width;
                            }
                            curLine = '';
                            builder = '';
                            lineWidth = 0;
                            curIndent = 0;
                            curLineWidth = 0;
                            lineType = LineType.None;
                            if (isSingleWord) {
                                reader.readWord();
                                readWord = false;
                            }
                            word = (readWord) ? word : reader.peekWord();
                            isSingleWord = false;
                            readWord = true;
                        }
                        else {
                            readWord = false;
                            curLine = curLine + builder.toString();
                            word = reader.peek().toString();
                        }
                        continue;
                    }
                    builder = builder + word;
                    lineWidth = curLineWidth;
                    if (readWord) {
                        reader.readWord();
                        word = reader.peekWord();
                        isSingleWord = false;
                    }
                    else {
                        reader.read();
                        word = reader.peek().toString();
                    }
                }
                if (builder.length > 0) {
                    var ln = builder.toString();
                    this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);
                }
                reader.close();
            }
            lineResult.layoutLines = [];
            for (var index = 0; index < lines.length; index++) {
                lineResult.layoutLines.push(lines[index]);
            }
            lines = [];
            return lineResult;
        };
        PdfStringLayouter.prototype.addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {
            var info = new LineInfo();
            info.text = line;
            info.width = lineWidth;
            info.lineType = breakType;
            lines.push(info);
            var size = lineResult.actualSize;
            size.height += this.getLineHeight();
            size.width = Math.max(size.width, lineWidth);
            lineResult.size = size;
        };
        PdfStringLayouter.prototype.copyToResult = function (result, lineResult, lines, numInserted) {
            var success = true;
            var allowPartialLines = (this.format != null && !this.format.lineLimit);
            var height = result.actualSize.height;
            var maxHeight = this.size.height;
            if ((this.pageHeight > 0) && (maxHeight + this.rectangle.y > this.pageHeight)) {
                maxHeight = this.rectangle.y - this.pageHeight;
                maxHeight = Math.max(maxHeight, -maxHeight);
            }
            numInserted = 0;
            for (var i = 0, len = lineResult.lines.length; i < len; i++) {
                var expHeight = height + lineResult.lineHeight;
                var info = lineResult.lines[i];
                numInserted += info.text.length;
                info = this.trimLine(info, (lines.length === 0));
                lines.push(info);
                var size_1 = result.actualSize;
                size_1.width = Math.max(size_1.width, info.width);
                result.size = size_1;
                height = expHeight;
            }
            var size = result.actualSize;
            size.height = height;
            result.size = size;
            return { success: success, numInserted: numInserted };
        };
        PdfStringLayouter.prototype.finalizeResult = function (result, lines) {
            result.layoutLines = [];
            for (var index = 0; index < lines.length; index++) {
                result.layoutLines.push(lines[index]);
            }
            result.layoutLineHeight = this.getLineHeight();
            lines = [];
        };
        PdfStringLayouter.prototype.trimLine = function (info, firstLine) {
            var line = info.text;
            var lineWidth = info.width;
            var start = (this.format == null || !this.format.rightToLeft);
            var spaces = string_tokenizer_1.StringTokenizer.spaces;
            line = (start) ? line.trim() : line.trim();
            if (line.length !== info.text.length) {
                lineWidth = this.getLineWidth(line);
                lineWidth += this.getLineIndent(firstLine);
            }
            info.text = line;
            info.width = lineWidth;
            return info;
        };
        PdfStringLayouter.prototype.getWrapType = function () {
            var wrapType = (this.format != null) ? this.format.wordWrap : enum_1.PdfWordWrapType.Word;
            return wrapType;
        };
        return PdfStringLayouter;
    }());
    exports.PdfStringLayouter = PdfStringLayouter;
    var PdfStringLayoutResult = (function () {
        function PdfStringLayoutResult() {
        }
        Object.defineProperty(PdfStringLayoutResult.prototype, "remainder", {
            get: function () {
                return this.textRemainder;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringLayoutResult.prototype, "actualSize", {
            get: function () {
                if (typeof this.size === 'undefined') {
                    this.size = new pdf_drawing_1.SizeF(0, 0);
                }
                return this.size;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringLayoutResult.prototype, "lines", {
            get: function () {
                return this.layoutLines;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringLayoutResult.prototype, "lineHeight", {
            get: function () {
                return this.layoutLineHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringLayoutResult.prototype, "empty", {
            get: function () {
                return (this.layoutLines == null || this.layoutLines.length === 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStringLayoutResult.prototype, "lineCount", {
            get: function () {
                var count = (!this.empty) ? this.layoutLines.length : 0;
                return count;
            },
            enumerable: true,
            configurable: true
        });
        return PdfStringLayoutResult;
    }());
    exports.PdfStringLayoutResult = PdfStringLayoutResult;
    var LineInfo = (function () {
        function LineInfo() {
        }
        Object.defineProperty(LineInfo.prototype, "lineType", {
            get: function () {
                return this.type;
            },
            set: function (value) {
                this.type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineInfo.prototype, "text", {
            get: function () {
                return this.content;
            },
            set: function (value) {
                this.content = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineInfo.prototype, "width", {
            get: function () {
                return this.lineWidth;
            },
            set: function (value) {
                this.lineWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        return LineInfo;
    }());
    exports.LineInfo = LineInfo;
    var LineType;
    (function (LineType) {
        LineType[LineType["None"] = 0] = "None";
        LineType[LineType["NewLineBreak"] = 1] = "NewLineBreak";
        LineType[LineType["LayoutBreak"] = 2] = "LayoutBreak";
        LineType[LineType["FirstParagraphLine"] = 4] = "FirstParagraphLine";
        LineType[LineType["LastParagraphLine"] = 8] = "LastParagraphLine";
    })(LineType = exports.LineType || (exports.LineType = {}));
});
