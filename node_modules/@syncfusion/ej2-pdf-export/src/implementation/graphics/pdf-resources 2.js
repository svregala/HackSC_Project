var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./../primitives/pdf-dictionary", "./../collections/object-object-pair/dictionary", "./../primitives/pdf-name", "./../primitives/pdf-array", "./../primitives/pdf-reference", "./../input-output/pdf-cross-table", "./fonts/pdf-font", "./figures/pdf-template", "./brushes/pdf-brush", "./pdf-transparency", "./../graphics/images/pdf-bitmap", "./../graphics/images/pdf-image"], function (require, exports, pdf_dictionary_1, dictionary_1, pdf_name_1, pdf_array_1, pdf_reference_1, pdf_cross_table_1, pdf_font_1, pdf_template_1, pdf_brush_1, pdf_transparency_1, pdf_bitmap_1, pdf_image_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfResources = (function (_super) {
        __extends(PdfResources, _super);
        function PdfResources(baseDictionary) {
            var _this = _super.call(this) || this;
            _this.properties = new pdf_dictionary_1.PdfDictionary();
            if (baseDictionary instanceof pdf_dictionary_1.PdfDictionary) {
                _this = _super.call(this, baseDictionary) || this;
            }
            return _this;
        }
        Object.defineProperty(PdfResources.prototype, "names", {
            get: function () {
                return this.getNames();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfResources.prototype, "document", {
            get: function () {
                return this.pdfDocument;
            },
            set: function (value) {
                this.pdfDocument = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfResources.prototype.getName = function (obj) {
            var primitive = obj.element;
            var name = null;
            if (this.names.containsKey(primitive)) {
                name = this.names.getValue(primitive);
            }
            if (name == null) {
                var sName = this.generateName();
                name = new pdf_name_1.PdfName(sName);
                this.names.setValue(primitive, name);
                if (obj instanceof pdf_font_1.PdfFont) {
                    this.add(obj, name);
                }
                else if (obj instanceof pdf_template_1.PdfTemplate) {
                    this.add(obj, name);
                }
                else if (obj instanceof pdf_transparency_1.PdfTransparency) {
                    this.add(obj, name);
                }
                else if (obj instanceof pdf_image_1.PdfImage || obj instanceof pdf_bitmap_1.PdfBitmap) {
                    this.add(obj, name);
                }
            }
            return name;
        };
        PdfResources.prototype.getNames = function () {
            if (this.pdfNames == null) {
                this.pdfNames = new dictionary_1.TemporaryDictionary();
            }
            var fonts = this.items.getValue(this.dictionaryProperties.font);
            if (fonts != null) {
                var reference = fonts;
                var dictionary = fonts;
                dictionary = pdf_cross_table_1.PdfCrossTable.dereference(fonts);
            }
            return this.pdfNames;
        };
        PdfResources.prototype.requireProcedureSet = function (procedureSetName) {
            if (procedureSetName == null) {
                throw new Error('ArgumentNullException:procedureSetName');
            }
            var procSets = this.items.getValue(this.dictionaryProperties.procset);
            if (procSets == null) {
                procSets = new pdf_array_1.PdfArray();
                this.items.setValue(this.dictionaryProperties.procset, procSets);
            }
            var name = new pdf_name_1.PdfName(procedureSetName);
            if (!procSets.contains(name)) {
                procSets.add(name);
            }
        };
        PdfResources.prototype.removeFont = function (name) {
            var key = null;
            var keys = this.pdfNames.keys();
            for (var index = 0; index < this.pdfNames.size(); index++) {
                if (this.pdfNames.getValue(keys[index]) === new pdf_name_1.PdfName(name)) {
                    key = keys[index];
                    break;
                }
            }
            if (key != null) {
                this.pdfNames.remove(key);
            }
        };
        PdfResources.prototype.generateName = function () {
            var name = Guid.getNewGuidString();
            return name;
        };
        PdfResources.prototype.add = function (arg1, arg2) {
            if (arg1 instanceof pdf_font_1.PdfFont) {
                var dictionary = null;
                var fonts = this.items.getValue(this.dictionaryProperties.font);
                if (fonts != null) {
                    var reference = fonts;
                    dictionary = fonts;
                    dictionary = fonts;
                }
                else {
                    dictionary = new pdf_dictionary_1.PdfDictionary();
                    this.items.setValue(this.dictionaryProperties.font, dictionary);
                }
                dictionary.items.setValue(arg2.value, new pdf_reference_1.PdfReferenceHolder(arg1.element));
            }
            else if (arg1 instanceof pdf_template_1.PdfTemplate) {
                var xobjects = void 0;
                xobjects = this.items.getValue(this.dictionaryProperties.xObject);
                if (xobjects == null) {
                    xobjects = new pdf_dictionary_1.PdfDictionary();
                    this.items.setValue(this.dictionaryProperties.xObject, xobjects);
                }
                xobjects.items.setValue(arg2.value, new pdf_reference_1.PdfReferenceHolder(arg1.element));
            }
            else if (arg1 instanceof pdf_brush_1.PdfBrush) {
            }
            else if (arg1 instanceof pdf_transparency_1.PdfTransparency) {
                var savable = arg1.element;
                var transDic = null;
                transDic = this.items.getValue(this.dictionaryProperties.extGState);
                if (transDic == null) {
                    transDic = new pdf_dictionary_1.PdfDictionary();
                    this.items.setValue(this.dictionaryProperties.extGState, transDic);
                }
                transDic.items.setValue(arg2.value, new pdf_reference_1.PdfReferenceHolder(savable));
            }
            else {
                var xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);
                var parentXObjects = void 0;
                if (typeof this.pdfDocument !== 'undefined') {
                    parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject);
                }
                var values = this.Dictionary.items.values();
                var hasSameImageStream = false;
                var oldReference = void 0;
                if (typeof this.pdfDocument !== 'undefined' && (typeof parentXObjects === undefined || parentXObjects == null)) {
                    parentXObjects = new pdf_dictionary_1.PdfDictionary();
                    this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);
                }
                else if (typeof this.pdfDocument !== 'undefined') {
                    var values_1 = parentXObjects.items.values();
                    for (var i = 0; i < values_1.length; i++) {
                        if (typeof values_1[i] !== 'undefined' && typeof values_1[i].element !== 'undefined') {
                            if (values_1[i].element.data[0] === arg1.element.data[0]) {
                                oldReference = values_1[i];
                                hasSameImageStream = true;
                            }
                        }
                    }
                }
                if (xobjects == null) {
                    xobjects = new pdf_dictionary_1.PdfDictionary();
                    this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects);
                }
                if (hasSameImageStream && typeof oldReference !== 'undefined') {
                    xobjects.items.setValue(arg2.value, oldReference);
                }
                else {
                    var reference = new pdf_reference_1.PdfReferenceHolder(arg1.element);
                    xobjects.items.setValue(arg2.value, reference);
                    if (typeof this.pdfDocument !== 'undefined') {
                        parentXObjects.items.setValue(arg2.value, reference);
                    }
                }
            }
        };
        return PdfResources;
    }(pdf_dictionary_1.PdfDictionary));
    exports.PdfResources = PdfResources;
    var Guid = (function () {
        function Guid(stringValue) {
            this.stringValue = stringValue || Guid.getNewGuidString();
        }
        Object.defineProperty(Guid, "randomNumber", {
            get: function () {
                Guid.guid = Guid.guid + 1;
                Guid.guid = Guid.guid > 999999999999 ? 0 : Guid.guid;
                return Guid.guid;
            },
            enumerable: true,
            configurable: true
        });
        Guid.prototype.toString = function () {
            return this.stringValue;
        };
        Guid.getNewGuidString = function () {
            var guid = 'abc7def4-ghi9-jkl2-m6n3-';
            var temproaryString = 'opqrstuvwxyz';
            var randomString = Guid.randomNumber.toString();
            randomString = guid + temproaryString.substr(0, (12 - randomString.length)) + randomString;
            return randomString;
        };
        Guid.guid = 0;
        return Guid;
    }());
    exports.Guid = Guid;
});
