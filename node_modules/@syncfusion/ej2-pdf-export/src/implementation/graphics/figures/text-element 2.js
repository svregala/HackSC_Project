var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./../figures/layout-element", "./../brushes/pdf-brush", "./../fonts/pdf-font", "./../fonts/pdf-standard-font", "./../pdf-pen", "./../figures/base/element-layouter", "./base/text-layouter", "./../brushes/pdf-solid-brush", "./../pdf-color", "./../../drawing/pdf-drawing", "./base/element-layouter", "./../fonts/string-layouter", "./../enum"], function (require, exports, layout_element_1, pdf_brush_1, pdf_font_1, pdf_standard_font_1, pdf_pen_1, element_layouter_1, text_layouter_1, pdf_solid_brush_1, pdf_color_1, pdf_drawing_1, element_layouter_2, string_layouter_1, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfTextElement = (function (_super) {
        __extends(PdfTextElement, _super);
        function PdfTextElement(arg1, arg2, arg3, arg4, arg5) {
            var _this = _super.call(this) || this;
            _this.content = '';
            _this.elementValue = '';
            _this.hasPointOverload = false;
            _this.isPdfTextElement = false;
            if (typeof arg1 === 'undefined') {
            }
            else if (typeof arg1 === 'string' && typeof arg2 === 'undefined') {
                _this = _super.call(this) || this;
                _this.content = arg1;
                _this.elementValue = arg1;
            }
            else if (typeof arg1 === 'string' && arg2 instanceof pdf_font_1.PdfFont && typeof arg3 === 'undefined') {
                _this = _super.call(this) || this;
                _this.content = arg1;
                _this.elementValue = arg1;
                _this.pdfFont = arg2;
            }
            else if (typeof arg1 === 'string' && arg2 instanceof pdf_font_1.PdfFont && arg3 instanceof pdf_pen_1.PdfPen && typeof arg4 === 'undefined') {
                _this = _super.call(this) || this;
                _this.content = arg1;
                _this.elementValue = arg1;
                _this.pdfFont = arg2;
                _this.pdfPen = arg3;
            }
            else if (typeof arg1 === 'string' && arg2 instanceof pdf_font_1.PdfFont && arg3 instanceof pdf_brush_1.PdfBrush && typeof arg4 === 'undefined') {
                _this = _super.call(this) || this;
                _this.content = arg1;
                _this.elementValue = arg1;
                _this.pdfFont = arg2;
                _this.pdfBrush = arg3;
            }
            else {
                _this = _super.call(this) || this;
                _this.content = arg1;
                _this.elementValue = arg1;
                _this.pdfFont = arg2;
                _this.pdfPen = arg3;
                _this.pdfBrush = arg4;
                _this.format = arg5;
            }
            return _this;
        }
        Object.defineProperty(PdfTextElement.prototype, "text", {
            get: function () {
                return this.content;
            },
            set: function (value) {
                this.elementValue = value;
                this.content = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfTextElement.prototype, "value", {
            get: function () {
                return this.elementValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfTextElement.prototype, "pen", {
            get: function () {
                return this.pdfPen;
            },
            set: function (value) {
                this.pdfPen = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfTextElement.prototype, "brush", {
            get: function () {
                return this.pdfBrush;
            },
            set: function (value) {
                this.pdfBrush = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfTextElement.prototype, "font", {
            get: function () {
                return this.pdfFont;
            },
            set: function (value) {
                this.pdfFont = value;
                if (this.pdfFont instanceof pdf_standard_font_1.PdfStandardFont && this.content != null) {
                    this.elementValue = pdf_standard_font_1.PdfStandardFont.convert(this.content);
                }
                else {
                    this.elementValue = this.content;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfTextElement.prototype, "stringFormat", {
            get: function () {
                return this.format;
            },
            set: function (value) {
                this.format = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfTextElement.prototype.getBrush = function () {
            return (this.pdfBrush == null || typeof this.pdfBrush === 'undefined') ? new pdf_solid_brush_1.PdfSolidBrush(new pdf_color_1.PdfColor(0, 0, 0)) : this.pdfBrush;
        };
        PdfTextElement.prototype.layout = function (param) {
            var layouter = new text_layouter_1.TextLayouter(this);
            var result = layouter.layout(param);
            return result;
        };
        PdfTextElement.prototype.drawText = function (arg2, arg3, arg4, arg5) {
            if (arg3 instanceof pdf_drawing_1.PointF && typeof arg3.width === 'undefined' && typeof arg4 === 'undefined') {
                this.hasPointOverload = true;
                return this.drawText(arg2, arg3.x, arg3.y);
            }
            else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {
                this.hasPointOverload = true;
                return this.drawText(arg2, arg3, arg4, null);
            }
            else if (arg3 instanceof pdf_drawing_1.RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {
                return this.drawText(arg2, arg3, null);
            }
            else if (arg3 instanceof pdf_drawing_1.PointF && typeof arg3.width === 'undefined' && arg4 instanceof element_layouter_2.PdfLayoutFormat) {
                this.hasPointOverload = true;
                return this.drawText(arg2, arg3.x, arg3.y, arg4);
            }
            else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof element_layouter_2.PdfLayoutFormat || arg5 == null)) {
                this.hasPointOverload = true;
                var width = (arg2.graphics.clientSize.width - arg3);
                var layoutRectangle = new pdf_drawing_1.RectangleF(arg3, arg4, width, 0);
                return this.drawText(arg2, layoutRectangle, arg5);
            }
            else if (arg3 instanceof pdf_drawing_1.RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {
                return this.drawText(arg2, arg3, null);
            }
            else {
                var layout = new string_layouter_1.PdfStringLayouter();
                if (this.hasPointOverload) {
                    var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new pdf_drawing_1.SizeF((arg2.graphics.clientSize.width - arg3.x), 0), true, arg2.graphics.clientSize);
                    var layoutResult = void 0;
                    var param = new element_layouter_1.PdfLayoutParams();
                    var temparg3 = arg3;
                    var temparg4 = arg4;
                    param.page = arg2;
                    var previousPage = arg2;
                    param.bounds = temparg3;
                    param.format = (temparg4 != null) ? temparg4 : new element_layouter_2.PdfLayoutFormat();
                    if (stringLayoutResult.lines.length > 1) {
                        this.text = stringLayoutResult.layoutLines[0].text;
                        if (param.bounds.y <= param.page.graphics.clientSize.height) {
                            var previousPosition = new pdf_drawing_1.PointF(param.bounds.x, param.bounds.y);
                            layoutResult = this.layout(param);
                            var bounds = new pdf_drawing_1.RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);
                            var isPaginate = false;
                            for (var i = 1; i < stringLayoutResult.lines.length; i++) {
                                param.page = layoutResult.page;
                                param.bounds = new pdf_drawing_1.RectangleF(new pdf_drawing_1.PointF(bounds.x, bounds.y), new pdf_drawing_1.SizeF(bounds.width, bounds.height));
                                this.text = stringLayoutResult.layoutLines[i].text;
                                if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {
                                    isPaginate = true;
                                    param.page = param.page.graphics.getNextPage();
                                    if (previousPosition.y > (layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height)) {
                                        bounds = new pdf_drawing_1.RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                                    }
                                    else {
                                        bounds = new pdf_drawing_1.RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                                    }
                                    param.bounds = bounds;
                                }
                                layoutResult = this.layout(param);
                                if (i !== (stringLayoutResult.lines.length - 1)) {
                                    bounds = new pdf_drawing_1.RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                                }
                                else {
                                    var lineWidth = this.font.measureString(this.text, this.format).width;
                                    layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);
                                }
                            }
                        }
                        return layoutResult;
                    }
                    else {
                        var lineSize = this.font.measureString(this.text, this.format);
                        if (param.bounds.y <= param.page.graphics.clientSize.height) {
                            layoutResult = this.layout(param);
                            layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);
                        }
                        return layoutResult;
                    }
                }
                else {
                    var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new pdf_drawing_1.SizeF(arg3.width, 0), false, arg2.graphics.clientSize);
                    var result = void 0;
                    var param = new element_layouter_1.PdfLayoutParams();
                    var temparg3 = arg3;
                    var temparg4 = arg4;
                    param.page = arg2;
                    param.bounds = temparg3;
                    param.format = (temparg4 != null) ? temparg4 : new element_layouter_2.PdfLayoutFormat();
                    if (layoutResult.lines.length > 1) {
                        this.text = layoutResult.layoutLines[0].text;
                        if (param.bounds.y <= param.page.graphics.clientSize.height) {
                            var previousPosition = new pdf_drawing_1.PointF(param.bounds.x, param.bounds.y);
                            result = this.layout(param);
                            var bounds = new pdf_drawing_1.RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                            var isPaginate = false;
                            for (var i = 1; i < layoutResult.lines.length; i++) {
                                param.page = result.page;
                                param.bounds = new pdf_drawing_1.RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
                                this.text = layoutResult.layoutLines[i].text;
                                if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {
                                    isPaginate = true;
                                    param.page = param.page.graphics.getNextPage();
                                    if (previousPosition.y > (result.page.graphics.clientSize.height - result.bounds.height)) {
                                        bounds = new pdf_drawing_1.RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                                    }
                                    else {
                                        bounds = new pdf_drawing_1.RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);
                                    }
                                    param.bounds = bounds;
                                }
                                result = this.layout(param);
                                if (i !== (layoutResult.lines.length - 1)) {
                                    bounds = new pdf_drawing_1.RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                                }
                                else {
                                    var lineWidth = this.font.measureString(this.text, this.format).width;
                                    result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);
                                }
                            }
                        }
                        return result;
                    }
                    else {
                        var lineSize = this.font.measureString(this.text, this.format);
                        if (param.bounds.y <= param.page.graphics.clientSize.height) {
                            result = this.layout(param);
                            result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);
                        }
                        return result;
                    }
                }
            }
        };
        PdfTextElement.prototype.calculateResultBounds = function (result, lineWidth, maximumWidth, startPosition) {
            var shift = 0;
            if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === enum_1.PdfTextAlignment.Center) {
                result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;
                result.bounds.width = lineWidth;
            }
            else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === enum_1.PdfTextAlignment.Right) {
                result.bounds.x = startPosition + (maximumWidth - lineWidth);
                result.bounds.width = lineWidth;
            }
            else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === enum_1.PdfTextAlignment.Justify) {
                result.bounds.x = startPosition;
                result.bounds.width = maximumWidth;
            }
            else {
                result.bounds.width = startPosition;
                result.bounds.width = lineWidth;
            }
            return result;
        };
        return PdfTextElement;
    }(layout_element_1.PdfLayoutElement));
    exports.PdfTextElement = PdfTextElement;
});
