define(["require", "exports", "./../../../drawing/pdf-drawing", "./../enum"], function (require, exports, pdf_drawing_1, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ElementLayouter = (function () {
        function ElementLayouter(element) {
            this.layoutElement = element;
        }
        Object.defineProperty(ElementLayouter.prototype, "elements", {
            get: function () {
                return this.layoutElement;
            },
            enumerable: true,
            configurable: true
        });
        ElementLayouter.prototype.getElement = function () {
            return this.layoutElement;
        };
        ElementLayouter.prototype.layout = function (param, isBoundsChanged) {
            if (typeof isBoundsChanged === 'boolean' && isBoundsChanged === true) {
                return this.layoutInternal(param, true);
            }
            else {
                return this.layoutInternal(param);
            }
        };
        ElementLayouter.prototype.getNextPage = function (currentPage) {
            var section = currentPage.section;
            var nextPage = section.add();
            return nextPage;
        };
        return ElementLayouter;
    }());
    exports.ElementLayouter = ElementLayouter;
    var PdfLayoutFormat = (function () {
        function PdfLayoutFormat(baseFormat) {
            if (typeof baseFormat === 'undefined') {
            }
            else {
                this.break = baseFormat.break;
                this.layout = baseFormat.layout;
                this.paginateBounds = baseFormat.paginateBounds;
                this.boundsSet = baseFormat.usePaginateBounds;
            }
        }
        Object.defineProperty(PdfLayoutFormat.prototype, "layout", {
            get: function () {
                if (typeof this.layoutType === 'undefined' || this.layoutType == null) {
                    this.layoutType = enum_1.PdfLayoutType.Paginate;
                }
                return this.layoutType;
            },
            set: function (value) {
                this.layoutType = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutFormat.prototype, "break", {
            get: function () {
                if (typeof this.breakType === 'undefined' || this.boundsSet == null) {
                    this.breakType = enum_1.PdfLayoutBreakType.FitPage;
                }
                return this.breakType;
            },
            set: function (value) {
                this.breakType = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutFormat.prototype, "paginateBounds", {
            get: function () {
                if (typeof this.layoutPaginateBounds === 'undefined' && this.layoutPaginateBounds == null) {
                    this.layoutPaginateBounds = new pdf_drawing_1.RectangleF(0, 0, 0, 0);
                }
                return this.layoutPaginateBounds;
            },
            set: function (value) {
                this.layoutPaginateBounds = value;
                this.boundsSet = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutFormat.prototype, "usePaginateBounds", {
            get: function () {
                if (typeof this.boundsSet === 'undefined' || this.boundsSet == null) {
                    this.boundsSet = false;
                }
                return this.boundsSet;
            },
            enumerable: true,
            configurable: true
        });
        return PdfLayoutFormat;
    }());
    exports.PdfLayoutFormat = PdfLayoutFormat;
    var PdfLayoutParams = (function () {
        function PdfLayoutParams() {
        }
        Object.defineProperty(PdfLayoutParams.prototype, "page", {
            get: function () {
                return this.pdfPage;
            },
            set: function (value) {
                this.pdfPage = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutParams.prototype, "bounds", {
            get: function () {
                return new pdf_drawing_1.RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);
            },
            set: function (value) {
                this.layoutBounds = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutParams.prototype, "format", {
            get: function () {
                return this.layoutFormat;
            },
            set: function (value) {
                this.layoutFormat = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfLayoutParams;
    }());
    exports.PdfLayoutParams = PdfLayoutParams;
    var PdfLayoutResult = (function () {
        function PdfLayoutResult(page, bounds) {
            this.pdfPage = page;
            this.layoutBounds = bounds;
        }
        Object.defineProperty(PdfLayoutResult.prototype, "page", {
            get: function () {
                return this.pdfPage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfLayoutResult.prototype, "bounds", {
            get: function () {
                return this.layoutBounds;
            },
            enumerable: true,
            configurable: true
        });
        return PdfLayoutResult;
    }());
    exports.PdfLayoutResult = PdfLayoutResult;
});
