var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./pdf-grid-column", "./pdf-grid-row", "./../../drawing/pdf-drawing", "./../../graphics/figures/layout-element", "./../../graphics/figures/base/element-layouter", "./styles/pdf-borders", "./styles/style", "./../../graphics/figures/enum", "./styles/style", "./../../collections/object-object-pair/dictionary", "./../../graphics/fonts/pdf-string-format"], function (require, exports, pdf_grid_column_1, pdf_grid_row_1, pdf_drawing_1, layout_element_1, element_layouter_1, pdf_borders_1, style_1, enum_1, style_2, dictionary_1, pdf_string_format_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfGridLayoutFormat = (function (_super) {
        __extends(PdfGridLayoutFormat, _super);
        function PdfGridLayoutFormat(baseFormat) {
            var _this = this;
            if (typeof baseFormat === 'undefined') {
                _this = _super.call(this) || this;
            }
            else {
                _this = _super.call(this, baseFormat) || this;
            }
            return _this;
        }
        return PdfGridLayoutFormat;
    }(element_layouter_1.PdfLayoutFormat));
    exports.PdfGridLayoutFormat = PdfGridLayoutFormat;
    var PdfGrid = (function (_super) {
        __extends(PdfGrid, _super);
        function PdfGrid() {
            var _this = _super.call(this) || this;
            _this.gridSize = new pdf_drawing_1.SizeF(0, 0);
            _this.isRearranged = false;
            _this.pageBounds = new pdf_drawing_1.RectangleF();
            _this.listOfNavigatePages = [];
            _this.flag = true;
            _this.columnRanges = [];
            _this.currentLocation = new pdf_drawing_1.PointF(0, 0);
            _this.breakRow = true;
            return _this;
        }
        Object.defineProperty(PdfGrid.prototype, "raiseBeginCellDraw", {
            get: function () {
                return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "raiseEndCellDraw", {
            get: function () {
                return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "raiseBeginPageLayout", {
            get: function () {
                return (typeof this.beginPageLayout !== 'undefined');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "raiseEndPageLayout", {
            get: function () {
                return (typeof this.endPageLayout !== 'undefined');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "repeatHeader", {
            get: function () {
                if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {
                    this.bRepeatHeader = false;
                }
                return this.bRepeatHeader;
            },
            set: function (value) {
                this.bRepeatHeader = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "allowRowBreakAcrossPages", {
            get: function () {
                return this.breakRow;
            },
            set: function (value) {
                this.breakRow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "columns", {
            get: function () {
                if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {
                    this.gridColumns = new pdf_grid_column_1.PdfGridColumnCollection(this);
                }
                return this.gridColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "rows", {
            get: function () {
                if (this.gridRows == null) {
                    this.gridRows = new pdf_grid_row_1.PdfGridRowCollection(this);
                }
                return this.gridRows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "headers", {
            get: function () {
                if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {
                    this.gridHeaders = new pdf_grid_row_1.PdfGridHeaderCollection(this);
                }
                return this.gridHeaders;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "initialWidth", {
            get: function () {
                return this.gridInitialWidth;
            },
            set: function (value) {
                this.gridInitialWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "style", {
            get: function () {
                if (this.gridStyle == null) {
                    this.gridStyle = new style_1.PdfGridStyle();
                }
                return this.gridStyle;
            },
            set: function (value) {
                if (this.gridStyle == null) {
                    this.gridStyle = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "isPageWidth", {
            get: function () {
                return this.pageWidth;
            },
            set: function (value) {
                this.pageWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "isChildGrid", {
            get: function () {
                return this.childGrid;
            },
            set: function (value) {
                this.childGrid = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGrid.prototype, "size", {
            get: function () {
                if (this.gridSize.width === 0 && this.gridSize.height === 0) {
                    this.gridSize = this.measure();
                    return this.gridSize;
                }
                else {
                    return this.gridSize;
                }
            },
            set: function (value) {
                this.gridSize = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {
            if (arg2 instanceof pdf_drawing_1.PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {
                return this.drawHelper(arg1, arg2.x, arg2.y);
            }
            else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {
                return this.drawHelper(arg1, arg2, arg3, null);
            }
            else if (arg2 instanceof pdf_drawing_1.RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {
                return this.drawHelper(arg1, arg2, null);
            }
            else if (arg2 instanceof pdf_drawing_1.PointF && typeof arg2.width === 'undefined' && arg3 instanceof element_layouter_1.PdfLayoutFormat) {
                return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
            }
            else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof element_layouter_1.PdfLayoutFormat || arg4 == null)) {
                var width = (arg1.graphics.clientSize.width - arg2);
                var layoutRectangle = new pdf_drawing_1.RectangleF(arg2, arg3, width, 0);
                return this.drawHelper(arg1, layoutRectangle, arg4);
            }
            else if (arg2 instanceof pdf_drawing_1.RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {
                return this.drawHelper(arg1, arg2, null);
            }
            else {
                return this.drawHelper(arg1, arg2, arg3);
            }
        };
        PdfGrid.prototype.measure = function () {
            var height = 0;
            var width = this.columns.width;
            for (var i = 0; i < this.headers.count; i++) {
                var row = this.headers.getHeader(i);
                height += row.height;
            }
            for (var i = 0; i < this.rows.count; i++) {
                var row = this.rows.getRow(i);
                height += row.height;
            }
            return new pdf_drawing_1.SizeF(width, height);
        };
        PdfGrid.prototype.layout = function (param, isGridLayouter) {
            if (typeof isGridLayouter === 'undefined') {
                this.setSpan();
                this.layoutFormat = param.format;
                this.gridLocation = param.bounds;
                var result = this.layout(param, true);
                return result;
            }
            else {
                return this.layoutInternal(param);
            }
        };
        PdfGrid.prototype.setSpan = function () {
            var colSpan;
            var rowSpan = 1;
            var currentCellIndex;
            var currentRowIndex = 0;
            var rowCount = this.headers.count;
            for (var i = 0; i < rowCount; i++) {
                var row = this.headers.getHeader(i);
                var colCount = row.cells.count;
                for (var j = 0; j < colCount; j++) {
                    var cell = row.cells.getCell(j);
                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
                        if (cell.columnSpan + j > row.cells.count) {
                            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());
                        }
                        if (cell.rowSpan + i > this.headers.count) {
                            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());
                        }
                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {
                            colSpan = cell.columnSpan;
                            rowSpan = cell.rowSpan;
                            currentCellIndex = j;
                            currentRowIndex = i;
                            cell.isCellMergeStart = true;
                            cell.isRowMergeStart = true;
                            while (colSpan > 1) {
                                currentCellIndex++;
                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;
                                row.cells.getCell(currentCellIndex).rowSpan = rowSpan;
                                colSpan--;
                            }
                            currentCellIndex = j;
                            colSpan = cell.columnSpan;
                            while (rowSpan > 1) {
                                currentRowIndex++;
                                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                                rowSpan--;
                                while (colSpan > 1) {
                                    currentCellIndex++;
                                    this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;
                                    this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                                    colSpan--;
                                }
                                colSpan = cell.columnSpan;
                                currentCellIndex = j;
                            }
                        }
                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {
                            colSpan = cell.columnSpan;
                            currentCellIndex = j;
                            cell.isCellMergeStart = true;
                            while (colSpan > 1) {
                                currentCellIndex++;
                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                                colSpan--;
                            }
                        }
                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {
                            rowSpan = cell.rowSpan;
                            currentRowIndex = i;
                            while (rowSpan > 1) {
                                currentRowIndex++;
                                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                                rowSpan--;
                            }
                        }
                    }
                }
            }
        };
        PdfGrid.prototype.getFormat = function (format) {
            var f = format;
            return f;
        };
        PdfGrid.prototype.layoutInternal = function (param) {
            this.initialWidth = param.bounds.width;
            var format = this.getFormat(param.format);
            this.currentPage = param.page;
            if (this.currentPage !== null) {
                var pageHeight = this.currentPage.getClientSize().height;
                var pageWidth = this.currentPage.getClientSize().width;
                this.currentPageBounds = this.currentPage.getClientSize();
            }
            else {
                throw Error('Can not set page as null');
            }
            this.currentGraphics = this.currentPage.graphics;
            var index = 0;
            index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
            this.listOfNavigatePages.push(index);
            this.currentBounds = new pdf_drawing_1.RectangleF(new pdf_drawing_1.PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);
            if (this.rows.count !== 0) {
                this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :
                    (this.currentBounds.width - this.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);
            }
            else if (this.headers.count !== 0) {
                this.currentBounds.width = param.bounds.width;
            }
            else {
                throw Error('Please add row or header into grid');
            }
            this.startLocation = new pdf_drawing_1.PointF(param.bounds.x, param.bounds.y);
            if (param.bounds.height > 0 && !this.isChildGrid) {
                this.currentBounds.height = param.bounds.height;
            }
            this.hType = this.style.horizontalOverflowType;
            if (!this.style.allowHorizontalOverflow) {
                this.measureColumnsWidth(this.currentBounds);
                this.columnRanges.push([0, this.columns.count - 1]);
            }
            else {
                this.measureColumnsWidth();
                this.determineColumnDrawRanges();
            }
            var result = this.layoutOnPage(param);
            return result;
        };
        PdfGrid.prototype.measureColumnsWidth = function (bounds) {
            if (typeof bounds !== 'undefined') {
                var widths = this.columns.getDefaultWidths(bounds.width);
                var tempWidth = this.columns.getColumn(0).width;
                for (var i = 0, count = this.columns.count; i < count; i++) {
                    this.columns.getColumn(i).width = widths[i];
                }
            }
            else {
                var widths = [];
                var cellWidth = 0;
                var cellWidths = 0;
                if (this.headers.count > 0) {
                    var colCount = this.headers.getHeader(0).cells.count;
                    var rowCount = this.headers.count;
                    for (var i = 0; i < colCount; i++) {
                        cellWidth = 0;
                        for (var j = 0; j < rowCount; j++) {
                            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);
                            cellWidth = Math.max(cellWidth, rowWidth);
                        }
                        widths[i] = cellWidth;
                    }
                }
                else {
                    var colCount = this.rows.getRow(0).cells.count;
                    var rowCount = this.rows.count;
                    for (var i = 0; i < colCount; i++) {
                        cellWidth = 0;
                        for (var j = 0; j < rowCount; j++) {
                            var rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);
                            cellWidth = Math.max(cellWidth, rowWidth);
                        }
                        widths[i] = cellWidth;
                    }
                }
                cellWidth = 0;
                for (var i = 0, colCount = this.columns.count; i < colCount; i++) {
                    for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {
                        if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 || this.rows.getRow(j).cells.getCell(i).value !== null || this.rows.getRow(j).cells.getCell(i).rowSpan >= 1) {
                            if (this.rows.getRow(j).cells.getCell(i).value !== null &&
                                !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {
                                var value = this.rows.getRow(j).grid.style.cellPadding.right +
                                    this.rows.getRow(j).grid.style.cellPadding.left
                                    + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2
                                    + this.gridLocation.x;
                                this.rows.getRow(j).cells.getCell(i).value.initialWidth = this.initialWidth - value;
                            }
                            var rowWidth = 0;
                            var internalWidth = this.rows.getRow(j).cells.getCell(i).width;
                            internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;
                            internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;
                            var internalHeight = this.rows.getRow(j).cells.getCell(i).height;
                            internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);
                            internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);
                            var isCorrectWidth = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;
                            var isCorrectHeight = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;
                            if (isCorrectWidth || isCorrectHeight) {
                                throw Error('Image size exceeds client size of the page. Can not insert this image');
                            }
                            rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);
                            cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));
                            cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);
                        }
                    }
                    widths[i] = cellWidth;
                    cellWidth = 0;
                }
                for (var i = 0, count = this.columns.count; i < count; i++) {
                    this.columns.getColumn(i).width = widths[i];
                }
            }
        };
        PdfGrid.prototype.determineColumnDrawRanges = function () {
            var startColumn = 0;
            var endColumn = 0;
            var cellWidths = 0;
            var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;
            for (var i = 0; i < this.columns.count; i++) {
                cellWidths += this.columns.getColumn(i).width;
                if (cellWidths >= availableWidth) {
                    var subWidths = 0;
                    for (var j = startColumn; j <= i; j++) {
                        subWidths += this.columns.getColumn(j).width;
                        if (subWidths > availableWidth) {
                            break;
                        }
                        endColumn = j;
                    }
                    this.columnRanges.push([startColumn, endColumn]);
                    startColumn = endColumn + 1;
                    endColumn = startColumn;
                    cellWidths = (endColumn <= i) ? this.columns.getColumn(i).width : 0;
                }
            }
            this.columnRanges.push([startColumn, this.columns.count - 1]);
        };
        PdfGrid.prototype.layoutOnPage = function (param) {
            this.pageBounds.x = param.bounds.x;
            this.pageBounds.y = param.bounds.y;
            this.pageBounds.height = param.bounds.height;
            var format = this.getFormat(param.format);
            var endArgs = null;
            var result = null;
            var layoutedPages = new dictionary_1.TemporaryDictionary();
            var startPage = param.page;
            var isParentCell = false;
            var cellBounds = [];
            for (var index = 0; index < this.columnRanges.length; index++) {
                var range = this.columnRanges[index];
                this.cellStartIndex = range[0];
                this.cellEndIndex = range[1];
                var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);
                this.currentBounds = returnObject.currentBounds;
                this.currentRowIndex = returnObject.currentRowIndex;
                var drawHeader = void 0;
                for (var i_1 = 0; i_1 < this.headers.count; i_1++) {
                    var row = this.headers.getHeader(i_1);
                    var headerHeight = this.currentBounds.y;
                    var headerResult = this.drawRow(row);
                    drawHeader = false;
                }
                var i = 0;
                var length_1 = this.rows.count;
                var repeatRow = void 0;
                var startingHeight = 0;
                var flag = true;
                cellBounds = [];
                for (var j = 0; j < this.rows.count; j++) {
                    var row = this.rows.getRow(j);
                    i++;
                    this.currentRowIndex = i - 1;
                    var originalHeight = this.currentBounds.y;
                    startPage = this.currentPage;
                    PdfGrid.repeatRowIndex = -1;
                    var rowResult = this.drawRow(row);
                    cellBounds.push(rowResult.bounds.width);
                    if (originalHeight === this.currentBounds.y) {
                        repeatRow = true;
                        PdfGrid.repeatRowIndex = this.rows.rowCollection.indexOf(row);
                    }
                    else {
                        repeatRow = false;
                        PdfGrid.repeatRowIndex = -1;
                    }
                    if (!rowResult.isFinish && startPage !== null && format.layout !== enum_1.PdfLayoutType.OnePage && repeatRow) {
                        this.startLocation.x = this.currentBounds.x;
                        var isAddNextPage = false;
                        this.currentPage = this.getNextPage(format);
                        if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&
                            param.bounds.height > 0 && !this.isChildGrid) {
                            this.currentBounds.height = param.bounds.height;
                        }
                        if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&
                            param.bounds.y > 0 && !this.isChildGrid) {
                            this.currentBounds.y = param.bounds.y;
                        }
                        this.startLocation.y = this.currentBounds.y;
                        if ((format.paginateBounds.x === format.paginateBounds.y) &&
                            (format.paginateBounds.y === format.paginateBounds.height) &&
                            (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {
                            this.currentBounds.x += this.startLocation.x;
                        }
                        if (this.currentBounds.x === pdf_borders_1.PdfBorders.default.left.width / 2) {
                            this.currentBounds.y += this.startLocation.x;
                        }
                        if (this.repeatHeader) {
                            for (var i_2 = 0; i_2 < this.headers.count; i_2++) {
                                var header = this.headers.getHeader(i_2);
                                this.drawRow(header);
                            }
                        }
                        this.drawRow(row);
                        if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {
                            layoutedPages.add(this.currentPage, range);
                        }
                    }
                }
                var isPdfGrid = false;
                var maximumCellBoundsWidth = 0;
                if (cellBounds.length > 0) {
                    maximumCellBoundsWidth = cellBounds[0];
                }
                var largeNavigatePage = [[0, 0]];
                if (!isPdfGrid && cellBounds.length > 0) {
                    for (var c = 0; c < i - 1; c++) {
                        if (maximumCellBoundsWidth < cellBounds[c]) {
                            maximumCellBoundsWidth = cellBounds[c];
                        }
                    }
                    this.rowLayoutBoundsWidth = maximumCellBoundsWidth;
                }
                else {
                    this.rowLayoutBoundsWidth = largeNavigatePage[0][1];
                }
                if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== enum_1.PdfLayoutType.OnePage) {
                    this.currentPage = this.getNextPage(format);
                    if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)
                        && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {
                        this.currentBounds.x += this.startLocation.x;
                        this.currentBounds.y += this.startLocation.y;
                    }
                }
            }
            result = this.getLayoutResult();
            if (this.style.allowHorizontalOverflow && this.style.horizontalOverflowType == style_2.PdfHorizontalOverflowType.NextPage) {
                this.reArrangePages(layoutedPages);
            }
            this.raisePageLayouted(result);
            return result;
        };
        PdfGrid.prototype.getNextPage = function (format) {
            var section = this.currentPage.section;
            var nextPage = null;
            var index = section.indexOf(this.currentPage);
            this.flag = false;
            if (index === section.count - 1) {
                nextPage = section.add();
            }
            else {
                nextPage = section.getPages()[index + 1];
            }
            this.currentGraphics = nextPage.graphics;
            var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
            if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {
                this.listOfNavigatePages.push(pageindex);
            }
            this.currentBounds = new pdf_drawing_1.RectangleF(new pdf_drawing_1.PointF(0, 0), nextPage.getClientSize());
            return nextPage;
        };
        PdfGrid.prototype.getLayoutResult = function () {
            var bounds;
            bounds = new pdf_drawing_1.RectangleF(this.startLocation, new pdf_drawing_1.SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));
            return new PdfGridLayoutResult(this.currentPage, bounds);
        };
        PdfGrid.prototype.ReCalculateHeight = function (row, height) {
            var newHeight = 0.0;
            return Math.max(height, newHeight);
        };
        PdfGrid.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {
            var cancel = false;
            if (this.raiseBeginPageLayout) {
                var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);
                this.beginPageLayout(this, args);
                cancel = args.cancel;
                currentBounds = args.bounds;
                currentRow = args.startRowIndex;
            }
            return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };
        };
        PdfGrid.prototype.raisePageLayouted = function (result) {
            var args = new PdfGridEndPageLayoutEventArgs(result);
            if (this.raiseEndPageLayout) {
                this.endPageLayout(this, args);
            }
            return args;
        };
        PdfGrid.prototype.drawRow = function (row, result, height) {
            if (typeof result === 'undefined') {
                var result_1 = new RowLayoutResult();
                var rowHeightWithSpan = 0;
                var location_1 = new pdf_drawing_1.PointF(0, 0);
                var size = new pdf_drawing_1.SizeF(0, 0);
                var isHeader = false;
                if (row.rowSpanExists) {
                    var maxSpan = 0;
                    var currRowIndex = this.rows.rowCollection.indexOf(row);
                    if (currRowIndex === -1) {
                        currRowIndex = this.headers.indexOf(row);
                        if (currRowIndex !== -1) {
                            isHeader = true;
                        }
                    }
                    for (var i = 0; i < row.cells.count; i++) {
                        var cell = row.cells.getCell(i);
                        maxSpan = Math.max(maxSpan, cell.rowSpan);
                    }
                    for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {
                        rowHeightWithSpan += (isHeader ? this.headers.getHeader(i).height : this.rows.getRow(i).height);
                    }
                    var rowMaxHeight = rowHeightWithSpan;
                    for (var i = 0; i < row.cells.count; i++) {
                        rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;
                    }
                    var nextRow = this.headers.getHeader(this.headers.indexOf(row) + 1);
                    var flag = true;
                    for (var i = 0; i < nextRow.cells.count; i++) {
                        if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {
                            flag = false;
                            break;
                        }
                    }
                    if ((rowMaxHeight > rowHeightWithSpan) && flag) {
                        row.height += (rowMaxHeight - rowHeightWithSpan);
                    }
                }
                var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;
                if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||
                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||
                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {
                    result_1.isFinish = false;
                }
                else {
                    result_1.isFinish = true;
                    this.drawRow(row, result_1, calculatedHeight);
                }
                return result_1;
            }
            else {
                var skipcell = false;
                var location_2 = new pdf_drawing_1.PointF(this.currentBounds.x, this.currentBounds.y);
                result.bounds = new pdf_drawing_1.RectangleF(location_2, new pdf_drawing_1.SizeF(0, 0));
                height = this.ReCalculateHeight(row, height);
                for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
                    var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));
                    if (!cancelSpans) {
                        for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {
                            row.cells.getCell(i + j).isCellMergeContinue = true;
                        }
                    }
                    var size = new pdf_drawing_1.SizeF(this.columns.getColumn(i).width, height);
                    if (!this.CheckIfDefaultFormat(this.columns.getColumn(i).format) &&
                        this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {
                        row.cells.getCell(i).stringFormat = this.columns.getColumn(i).format;
                    }
                    var cellstyle = row.cells.getCell(i).style;
                    var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&
                        row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');
                    row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new pdf_drawing_1.RectangleF(location_2, size), tempValue, cellstyle);
                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new pdf_drawing_1.RectangleF(location_2, size), cancelSpans);
                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {
                        row.rowOverflowIndex = this.cellEndIndex;
                    }
                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {
                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ? stringResult.remainder : '' : '';
                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;
                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;
                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;
                    }
                    tempValue = ((typeof row.cells.getCell(i).value === 'string' &&
                        row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');
                    this.RaiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new pdf_drawing_1.RectangleF(location_2, size), tempValue, row.cells.getCell(i).style);
                    location_2.x += this.columns.getColumn(i).width;
                }
                this.currentBounds.y += height;
                result.bounds = new pdf_drawing_1.RectangleF(new pdf_drawing_1.PointF(result.bounds.x, result.bounds.y), new pdf_drawing_1.SizeF(location_2.x, location_2.y));
            }
        };
        PdfGrid.prototype.CheckIfDefaultFormat = function (format) {
            var defaultFormat = new pdf_string_format_1.PdfStringFormat();
            return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&
                format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&
                format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&
                format.lineAlignment === defaultFormat.lineAlignment
                && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&
                format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&
                format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&
                format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&
                format.wordWrap === defaultFormat.wordWrap);
        };
        PdfGrid.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {
            var args = null;
            if (this.raiseBeginCellDraw) {
                args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);
                this.beginCellDraw(this, args);
                style = args.style;
            }
            return style;
        };
        PdfGrid.prototype.RaiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {
            var args = null;
            if (this.raiseEndCellDraw) {
                args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);
                this.endCellDraw(this, args);
            }
        };
        PdfGrid.prototype.reArrangePages = function (layoutedPages) {
            var document = this.currentPage.document;
            var pages = [];
            var keys = layoutedPages.keys();
            var values = layoutedPages.values();
            for (var i = 0; i < keys.length; i++) {
                var page = keys[i];
                page.section = null;
                pages.push(page);
                document.pages.remove(page);
            }
            for (var i = 0; i < layoutedPages.size(); i++) {
                var count = 0;
                for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {
                    var page = pages[j];
                    if (document.pages.indexOf(page) === -1) {
                        document.pages.add(page);
                    }
                }
            }
        };
        PdfGrid.repeatRowIndex = -1;
        return PdfGrid;
    }(layout_element_1.PdfLayoutElement));
    exports.PdfGrid = PdfGrid;
    var GridCellEventArgs = (function () {
        function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {
            this.gridRowIndex = rowIndex;
            this.gridCellIndex = cellIndex;
            this.internalValue = value;
            this.gridBounds = bounds;
            this.pdfGraphics = graphics;
        }
        Object.defineProperty(GridCellEventArgs.prototype, "rowIndex", {
            get: function () {
                return this.gridRowIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridCellEventArgs.prototype, "cellIndex", {
            get: function () {
                return this.gridCellIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridCellEventArgs.prototype, "value", {
            get: function () {
                return this.internalValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridCellEventArgs.prototype, "bounds", {
            get: function () {
                return this.gridBounds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridCellEventArgs.prototype, "graphics", {
            get: function () {
                return this.pdfGraphics;
            },
            enumerable: true,
            configurable: true
        });
        return GridCellEventArgs;
    }());
    exports.GridCellEventArgs = GridCellEventArgs;
    var PdfGridBeginCellDrawEventArgs = (function (_super) {
        __extends(PdfGridBeginCellDrawEventArgs, _super);
        function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
            var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
            _this.style = style;
            return _this;
        }
        Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "skip", {
            get: function () {
                return this.bSkip;
            },
            set: function (value) {
                this.bSkip = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "style", {
            get: function () {
                return this.cellStyle;
            },
            set: function (value) {
                this.cellStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridBeginCellDrawEventArgs;
    }(GridCellEventArgs));
    exports.PdfGridBeginCellDrawEventArgs = PdfGridBeginCellDrawEventArgs;
    var PdfGridEndCellDrawEventArgs = (function (_super) {
        __extends(PdfGridEndCellDrawEventArgs, _super);
        function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
            var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
            _this.cellStyle = style;
            return _this;
        }
        Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, "style", {
            get: function () {
                return this.cellStyle;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridEndCellDrawEventArgs;
    }(GridCellEventArgs));
    exports.PdfGridEndCellDrawEventArgs = PdfGridEndCellDrawEventArgs;
    var PdfCancelEventArgs = (function () {
        function PdfCancelEventArgs() {
        }
        Object.defineProperty(PdfCancelEventArgs.prototype, "cancel", {
            get: function () {
                return this.isCancel;
            },
            set: function (value) {
                this.isCancel = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfCancelEventArgs;
    }());
    exports.PdfCancelEventArgs = PdfCancelEventArgs;
    var BeginPageLayoutEventArgs = (function (_super) {
        __extends(BeginPageLayoutEventArgs, _super);
        function BeginPageLayoutEventArgs(bounds, page) {
            var _this = _super.call(this) || this;
            _this.bounds = bounds;
            _this.pdfPage = page;
            return _this;
        }
        Object.defineProperty(BeginPageLayoutEventArgs.prototype, "bounds", {
            get: function () {
                return this.cellBounds;
            },
            set: function (value) {
                this.cellBounds = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BeginPageLayoutEventArgs.prototype, "page", {
            get: function () {
                return this.pdfPage;
            },
            enumerable: true,
            configurable: true
        });
        return BeginPageLayoutEventArgs;
    }(PdfCancelEventArgs));
    exports.BeginPageLayoutEventArgs = BeginPageLayoutEventArgs;
    var EndPageLayoutEventArgs = (function (_super) {
        __extends(EndPageLayoutEventArgs, _super);
        function EndPageLayoutEventArgs(result) {
            var _this = _super.call(this) || this;
            _this.layoutResult = result;
            return _this;
        }
        Object.defineProperty(EndPageLayoutEventArgs.prototype, "result", {
            get: function () {
                return this.layoutResult;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EndPageLayoutEventArgs.prototype, "nextPage", {
            get: function () {
                return this.nextPdfPage;
            },
            set: function (value) {
                this.nextPdfPage = value;
            },
            enumerable: true,
            configurable: true
        });
        return EndPageLayoutEventArgs;
    }(PdfCancelEventArgs));
    exports.EndPageLayoutEventArgs = EndPageLayoutEventArgs;
    var PdfGridBeginPageLayoutEventArgs = (function (_super) {
        __extends(PdfGridBeginPageLayoutEventArgs, _super);
        function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {
            var _this = _super.call(this, bounds, page) || this;
            _this.startRow = startRow;
            return _this;
        }
        Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, "startRowIndex", {
            get: function () {
                return this.startRow;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridBeginPageLayoutEventArgs;
    }(BeginPageLayoutEventArgs));
    exports.PdfGridBeginPageLayoutEventArgs = PdfGridBeginPageLayoutEventArgs;
    var PdfGridEndPageLayoutEventArgs = (function (_super) {
        __extends(PdfGridEndPageLayoutEventArgs, _super);
        function PdfGridEndPageLayoutEventArgs(result) {
            return _super.call(this, result) || this;
        }
        return PdfGridEndPageLayoutEventArgs;
    }(EndPageLayoutEventArgs));
    exports.PdfGridEndPageLayoutEventArgs = PdfGridEndPageLayoutEventArgs;
    var RowLayoutResult = (function () {
        function RowLayoutResult() {
            this.layoutedBounds = new pdf_drawing_1.RectangleF(0, 0, 0, 0);
        }
        Object.defineProperty(RowLayoutResult.prototype, "isFinish", {
            get: function () {
                return this.bIsFinished;
            },
            set: function (value) {
                this.bIsFinished = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RowLayoutResult.prototype, "bounds", {
            get: function () {
                return this.layoutedBounds;
            },
            set: function (value) {
                this.layoutedBounds = value;
            },
            enumerable: true,
            configurable: true
        });
        return RowLayoutResult;
    }());
    exports.RowLayoutResult = RowLayoutResult;
    var PdfGridLayoutResult = (function (_super) {
        __extends(PdfGridLayoutResult, _super);
        function PdfGridLayoutResult(page, bounds) {
            return _super.call(this, page, bounds) || this;
        }
        return PdfGridLayoutResult;
    }(element_layouter_1.PdfLayoutResult));
    exports.PdfGridLayoutResult = PdfGridLayoutResult;
});
