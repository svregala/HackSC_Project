define(["require", "exports", "./styles/style", "./../../graphics/fonts/string-layouter", "./../../document/pdf-document", "./../../graphics/fonts/pdf-string-format", "./../../drawing/pdf-drawing", "./../../graphics/enum", "./../tables/light-tables/enum", "./../../graphics/brushes/pdf-solid-brush", "./../../graphics/pdf-color", "./../../graphics/images/pdf-image", "./../../graphics/images/pdf-bitmap", "./../../annotations/pdf-text-web-link"], function (require, exports, style_1, string_layouter_1, pdf_document_1, pdf_string_format_1, pdf_drawing_1, enum_1, enum_2, pdf_solid_brush_1, pdf_color_1, pdf_image_1, pdf_bitmap_1, pdf_text_web_link_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfGridCell = (function () {
        function PdfGridCell(row) {
            this.cellWidth = 0;
            this.cellHeight = 0;
            this.finsh = true;
            this.rowSpanRemainingHeight = 0;
            if (typeof row === 'undefined') {
                this.gridRowSpan = 1;
                this.colSpan = 1;
            }
            else {
                this.constructor();
                this.gridRow = row;
            }
        }
        Object.defineProperty(PdfGridCell.prototype, "isCellMergeContinue", {
            get: function () {
                return this.internalIsCellMergeContinue;
            },
            set: function (value) {
                this.internalIsCellMergeContinue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "isRowMergeContinue", {
            get: function () {
                return this.internalIsRowMergeContinue;
            },
            set: function (value) {
                this.internalIsRowMergeContinue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "isCellMergeStart", {
            get: function () {
                return this.internalIsCellMergeStart;
            },
            set: function (value) {
                this.internalIsCellMergeStart = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "isRowMergeStart", {
            get: function () {
                return this.internalIsRowMergeStart;
            },
            set: function (value) {
                this.internalIsRowMergeStart = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "remainingString", {
            get: function () {
                return this.remaining;
            },
            set: function (value) {
                this.remaining = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "stringFormat", {
            get: function () {
                if (this.format == null) {
                    this.format = new pdf_string_format_1.PdfStringFormat();
                }
                return this.format;
            },
            set: function (value) {
                this.format = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "row", {
            get: function () {
                return this.gridRow;
            },
            set: function (value) {
                this.gridRow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "value", {
            get: function () {
                return this.objectValue;
            },
            set: function (value) {
                this.objectValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "rowSpan", {
            get: function () {
                return this.gridRowSpan;
            },
            set: function (value) {
                if (value < 1) {
                    throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');
                }
                else {
                    this.gridRowSpan = value;
                    this.row.rowSpanExists = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "style", {
            get: function () {
                if (this.cellStyle == null) {
                    this.cellStyle = new style_1.PdfGridCellStyle();
                }
                return this.cellStyle;
            },
            set: function (value) {
                this.cellStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "height", {
            get: function () {
                if (this.cellHeight === 0) {
                    this.cellHeight = this.measureHeight();
                }
                return this.cellHeight;
            },
            set: function (value) {
                this.cellHeight = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "columnSpan", {
            get: function () {
                return this.colSpan;
            },
            set: function (value) {
                if (value < 1) {
                    throw Error('Invalid span specified, must be greater than or equal to 1');
                }
                else {
                    this.colSpan = value;
                    this.row.columnSpanExists = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCell.prototype, "width", {
            get: function () {
                if (this.cellWidth === 0 || this.row.grid.isComplete) {
                    this.cellWidth = this.measureWidth();
                }
                return this.cellWidth;
            },
            set: function (value) {
                this.cellWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridCell.prototype.measureWidth = function () {
            var width = 0;
            var layouter = new string_layouter_1.PdfStringLayouter();
            if (typeof this.objectValue === 'string') {
                var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new pdf_drawing_1.SizeF(0, 0), false, new pdf_drawing_1.SizeF(0, 0));
                width += slr.actualSize.width;
                width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
            }
            else if (this.objectValue instanceof pdf_image_1.PdfImage || this.objectValue instanceof pdf_bitmap_1.PdfBitmap) {
                width += this.objectValue.width;
            }
            else if (this.objectValue instanceof pdf_text_web_link_1.PdfTextWebLink) {
                var webLink = this.objectValue;
                var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new pdf_drawing_1.SizeF(0, 0), false, new pdf_drawing_1.SizeF(0, 0));
                width += result.actualSize.width;
                width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
            }
            width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);
            width += this.row.grid.style.cellSpacing;
            return width;
        };
        PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {
            var backgroundBrush = this.getBackgroundBrush();
            if (backgroundBrush != null) {
                graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);
            }
        };
        PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {
            var returnBounds = new pdf_drawing_1.RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
            if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {
                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;
                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;
                returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);
                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);
                returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);
                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);
                if (this.rowSpan === 1) {
                    returnBounds.width -= (this.style.borders.left.width);
                }
            }
            else {
                returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;
                returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;
                returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);
                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);
                returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);
                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);
                if (this.rowSpan === 1) {
                    returnBounds.width -= (this.style.borders.left.width);
                }
            }
            return returnBounds;
        };
        PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {
            var isrowbreak = false;
            var result = null;
            if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {
                if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {
                    if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {
                        return result;
                    }
                }
                else {
                    return result;
                }
            }
            bounds = this.adjustOuterLayoutArea(bounds, graphics);
            var textPen = this.getTextPen();
            var textBrush = this.getTextBrush();
            if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {
                textBrush = new pdf_solid_brush_1.PdfSolidBrush(new pdf_color_1.PdfColor(0, 0, 0));
            }
            var font = this.getTextFont();
            var strFormat = this.getStringFormat();
            var innerLayoutArea = this.adjustContentLayoutArea(bounds);
            this.drawCellBackground(graphics, bounds);
            if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {
                var temp = void 0;
                temp = this.remaining === '' ? this.remaining : this.objectValue;
                graphics.drawString(temp, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);
                result = graphics.stringLayoutResult;
            }
            else if (this.objectValue instanceof pdf_image_1.PdfImage || this.objectValue instanceof pdf_bitmap_1.PdfBitmap) {
                var imageBounds = void 0;
                if (this.objectValue.width <= innerLayoutArea.width) {
                    imageBounds = new pdf_drawing_1.RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);
                }
                else {
                    imageBounds = innerLayoutArea;
                }
                graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);
            }
            else if (this.objectValue instanceof pdf_text_web_link_1.PdfTextWebLink) {
                this.objectValue.draw(graphics.currentPage, innerLayoutArea);
            }
            if (this.style.borders != null) {
                this.drawCellBorders(graphics, bounds);
            }
            return result;
        };
        PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {
            if (this.row.grid.style.borderOverlapStyle === enum_2.PdfBorderOverlapStyle.Inside) {
                bounds.x += this.style.borders.left.width;
                bounds.y += this.style.borders.top.width;
                bounds.width -= this.style.borders.right.width;
                bounds.height -= this.style.borders.bottom.width;
            }
            var p1 = new pdf_drawing_1.PointF(bounds.x, bounds.y + bounds.height);
            var p2 = new pdf_drawing_1.PointF(bounds.x, bounds.y);
            var pen = this.cellStyle.borders.left;
            if (this.cellStyle.borders.left.dashStyle === enum_1.PdfDashStyle.Solid) {
                pen.lineCap = enum_1.PdfLineCap.Square;
            }
            graphics.drawLine(pen, p1, p2);
            p1 = new pdf_drawing_1.PointF(bounds.x + bounds.width, bounds.y);
            p2 = new pdf_drawing_1.PointF(bounds.x + bounds.width, bounds.y + bounds.height);
            pen = this.cellStyle.borders.right;
            if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {
                p1 = new pdf_drawing_1.PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);
                p2 = new pdf_drawing_1.PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);
            }
            if (this.cellStyle.borders.right.dashStyle === enum_1.PdfDashStyle.Solid) {
                pen.lineCap = enum_1.PdfLineCap.Square;
            }
            graphics.drawLine(pen, p1, p2);
            p1 = new pdf_drawing_1.PointF(bounds.x, bounds.y);
            p2 = new pdf_drawing_1.PointF(bounds.x + bounds.width, bounds.y);
            pen = this.cellStyle.borders.top;
            if (this.cellStyle.borders.top.dashStyle === enum_1.PdfDashStyle.Solid) {
                pen.lineCap = enum_1.PdfLineCap.Square;
            }
            graphics.drawLine(pen, p1, p2);
            p1 = new pdf_drawing_1.PointF(bounds.x + bounds.width, bounds.y + bounds.height);
            p2 = new pdf_drawing_1.PointF(bounds.x, bounds.y + bounds.height);
            pen = this.cellStyle.borders.bottom;
            if (this.cellStyle.borders.bottom.dashStyle === enum_1.PdfDashStyle.Solid) {
                pen.lineCap = enum_1.PdfLineCap.Square;
            }
            graphics.drawLine(pen, p1, p2);
        };
        PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {
            var isHeader = false;
            var cellSpacing = this.row.grid.style.cellSpacing;
            if (cellSpacing > 0) {
                bounds = new pdf_drawing_1.RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);
            }
            var currentColIndex = this.row.cells.indexOf(this);
            if (this.columnSpan > 1) {
                var span = this.columnSpan;
                var totalWidth = 0;
                for (var i = currentColIndex; i < currentColIndex + span; i++) {
                    if (this.row.grid.style.allowHorizontalOverflow) {
                        var width = void 0;
                        var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;
                        if (this.row.grid.size.width > g.clientSize.width) {
                            width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;
                        }
                        else {
                            width = totalWidth + this.row.grid.columns.getColumn(i).width;
                        }
                        if (width > compWidth) {
                            break;
                        }
                    }
                    totalWidth += this.row.grid.columns.getColumn(i).width;
                }
                totalWidth -= this.row.grid.style.cellSpacing;
                bounds.width = totalWidth;
            }
            if (this.rowSpan > 1 || this.row.rowSpanExists) {
                var span = this.rowSpan;
                var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);
                if (currentRowIndex == -1) {
                    currentRowIndex = this.row.grid.headers.indexOf(this.row);
                    if (currentRowIndex != -1) {
                        isHeader = true;
                    }
                }
                var totalHeight = 0;
                var max = 0;
                for (var i = currentRowIndex; i < currentRowIndex + span; i++) {
                    totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);
                    var row = this.row.grid.rows.getRow(i);
                    var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);
                }
                var cellIndex = this.row.cells.indexOf(this);
                totalHeight -= this.row.grid.style.cellSpacing;
                bounds.height = totalHeight;
                if (!this.row.rowMergeComplete) {
                    bounds.height = totalHeight;
                }
            }
            return bounds;
        };
        PdfGridCell.prototype.getTextFont = function () {
            if (typeof this.style.font !== 'undefined' && this.style.font != null) {
                return this.style.font;
            }
            else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {
                return this.row.style.font;
            }
            else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {
                return this.row.grid.style.font;
            }
            else {
                return pdf_document_1.PdfDocument.defaultFont;
            }
        };
        PdfGridCell.prototype.getTextBrush = function () {
            if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {
                return this.style.textBrush;
            }
            else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {
                return this.row.style.textBrush;
            }
            else {
                return this.row.grid.style.textBrush;
            }
        };
        PdfGridCell.prototype.getTextPen = function () {
            if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {
                return this.style.textPen;
            }
            else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {
                return this.row.style.textPen;
            }
            else {
                return this.row.grid.style.textPen;
            }
        };
        PdfGridCell.prototype.getBackgroundBrush = function () {
            if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {
                return this.style.backgroundBrush;
            }
            else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {
                return this.row.style.backgroundBrush;
            }
            else {
                return this.row.grid.style.backgroundBrush;
            }
        };
        PdfGridCell.prototype.getStringFormat = function () {
            if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {
                return this.style.stringFormat;
            }
            else {
                return this.stringFormat;
            }
        };
        PdfGridCell.prototype.measureHeight = function () {
            var width = this.calculateWidth();
            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {
                width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);
                width -= (this.style.borders.left.width + this.style.borders.right.width);
            }
            else {
                width -= (this.style.cellPadding.right + this.style.cellPadding.left);
                width -= (this.style.borders.left.width + this.style.borders.right.width);
            }
            var height = 0;
            var layouter = new string_layouter_1.PdfStringLayouter();
            if (typeof this.objectValue === 'string' || typeof this.remainingString === 'string') {
                var currentValue = this.objectValue;
                var slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new pdf_drawing_1.SizeF(width, 0), false, new pdf_drawing_1.SizeF(0, 0));
                height += slr.actualSize.height;
            }
            else if (this.objectValue instanceof pdf_image_1.PdfImage || this.objectValue instanceof pdf_bitmap_1.PdfBitmap) {
                height += this.objectValue.height;
            }
            else if (this.objectValue instanceof pdf_text_web_link_1.PdfTextWebLink) {
                var webLink = this.objectValue;
                var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new pdf_drawing_1.SizeF(width, 0), false, new pdf_drawing_1.SizeF(0, 0));
                height += slr.actualSize.height;
            }
            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {
                height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);
            }
            else {
                height += (this.style.cellPadding.top + this.style.cellPadding.bottom);
            }
            height += this.row.grid.style.cellSpacing;
            return height;
        };
        PdfGridCell.prototype.calculateWidth = function () {
            var cellIndex = this.row.cells.indexOf(this);
            var columnSpan = this.columnSpan;
            var width = 0;
            for (var i = 0; i < columnSpan; i++) {
                width += this.row.grid.columns.getColumn(cellIndex + i).width;
            }
            return width;
        };
        return PdfGridCell;
    }());
    exports.PdfGridCell = PdfGridCell;
    var PdfGridCellCollection = (function () {
        function PdfGridCellCollection(row) {
            this.cells = [];
            this.gridRow = row;
        }
        PdfGridCellCollection.prototype.getCell = function (index) {
            if (index < 0 || index >= this.count) {
                throw new Error('IndexOutOfRangeException');
            }
            return this.cells[index];
        };
        Object.defineProperty(PdfGridCellCollection.prototype, "count", {
            get: function () {
                return this.cells.length;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridCellCollection.prototype.add = function (cell) {
            if (typeof cell === 'undefined') {
                var tempcell = new PdfGridCell();
                this.add(tempcell);
                return cell;
            }
            else {
                cell.row = this.gridRow;
                this.cells.push(cell);
            }
        };
        PdfGridCellCollection.prototype.indexOf = function (cell) {
            return this.cells.indexOf(cell);
        };
        return PdfGridCellCollection;
    }());
    exports.PdfGridCellCollection = PdfGridCellCollection;
});
