var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./pdf-borders", "./../../tables/light-tables/enum"], function (require, exports, pdf_borders_1, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfGridStyleBase = (function () {
        function PdfGridStyleBase() {
        }
        Object.defineProperty(PdfGridStyleBase.prototype, "backgroundBrush", {
            get: function () {
                return this.gridBackgroundBrush;
            },
            set: function (value) {
                this.gridBackgroundBrush = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyleBase.prototype, "textBrush", {
            get: function () {
                return this.gridTextBrush;
            },
            set: function (value) {
                this.gridTextBrush = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyleBase.prototype, "textPen", {
            get: function () {
                return this.gridTextPen;
            },
            set: function (value) {
                this.gridTextPen = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyleBase.prototype, "font", {
            get: function () {
                return this.gridFont;
            },
            set: function (value) {
                this.gridFont = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridStyleBase;
    }());
    exports.PdfGridStyleBase = PdfGridStyleBase;
    var PdfGridStyle = (function (_super) {
        __extends(PdfGridStyle, _super);
        function PdfGridStyle() {
            var _this = _super.call(this) || this;
            _this.gridBorderOverlapStyle = enum_1.PdfBorderOverlapStyle.Overlap;
            _this.bAllowHorizontalOverflow = false;
            _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;
            return _this;
        }
        Object.defineProperty(PdfGridStyle.prototype, "cellSpacing", {
            get: function () {
                if (typeof this.gridCellSpacing === 'undefined') {
                    this.gridCellSpacing = 0;
                }
                return this.gridCellSpacing;
            },
            set: function (value) {
                this.gridCellSpacing = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyle.prototype, "horizontalOverflowType", {
            get: function () {
                return this.gridHorizontalOverflowType;
            },
            set: function (value) {
                this.gridHorizontalOverflowType = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyle.prototype, "allowHorizontalOverflow", {
            get: function () {
                return this.bAllowHorizontalOverflow;
            },
            set: function (value) {
                this.bAllowHorizontalOverflow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyle.prototype, "cellPadding", {
            get: function () {
                if (typeof this.gridCellPadding === 'undefined') {
                    this.gridCellPadding = new pdf_borders_1.PdfPaddings();
                }
                return this.gridCellPadding;
            },
            set: function (value) {
                if (typeof this.gridCellPadding === 'undefined') {
                    this.gridCellPadding = new pdf_borders_1.PdfPaddings();
                    this.gridCellPadding = value;
                }
                else {
                    this.gridCellPadding = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridStyle.prototype, "borderOverlapStyle", {
            get: function () {
                return this.gridBorderOverlapStyle;
            },
            set: function (value) {
                this.gridBorderOverlapStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridStyle;
    }(PdfGridStyleBase));
    exports.PdfGridStyle = PdfGridStyle;
    var PdfGridCellStyle = (function (_super) {
        __extends(PdfGridCellStyle, _super);
        function PdfGridCellStyle() {
            var _this = _super.call(this) || this;
            _this.gridCellBorders = pdf_borders_1.PdfBorders.default;
            return _this;
        }
        Object.defineProperty(PdfGridCellStyle.prototype, "stringFormat", {
            get: function () {
                return this.format;
            },
            set: function (value) {
                this.format = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCellStyle.prototype, "borders", {
            get: function () {
                return this.gridCellBorders;
            },
            set: function (value) {
                this.gridCellBorders = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridCellStyle.prototype, "cellPadding", {
            get: function () {
                return this.gridCellPadding;
            },
            set: function (value) {
                if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {
                    this.gridCellPadding = new pdf_borders_1.PdfPaddings();
                }
                this.gridCellPadding = value;
            },
            enumerable: true,
            configurable: true
        });
        return PdfGridCellStyle;
    }(PdfGridStyleBase));
    exports.PdfGridCellStyle = PdfGridCellStyle;
    var PdfGridRowStyle = (function () {
        function PdfGridRowStyle() {
        }
        Object.defineProperty(PdfGridRowStyle.prototype, "backgroundBrush", {
            get: function () {
                return this.gridRowBackgroundBrush;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowStyle.prototype.setBackgroundBrush = function (value) {
            this.gridRowBackgroundBrush = value;
            if (typeof this.parent !== 'undefined') {
                for (var i = 0; i < this.parent.cells.count; i++) {
                    this.parent.cells.getCell(i).style.backgroundBrush = value;
                }
            }
        };
        Object.defineProperty(PdfGridRowStyle.prototype, "textBrush", {
            get: function () {
                return this.gridRowTextBrush;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowStyle.prototype.setTextBrush = function (value) {
            this.gridRowTextBrush = value;
            if (typeof this.parent !== 'undefined') {
                for (var i = 0; i < this.parent.cells.count; i++) {
                    this.parent.cells.getCell(i).style.textBrush = value;
                }
            }
        };
        Object.defineProperty(PdfGridRowStyle.prototype, "textPen", {
            get: function () {
                return this.gridRowTextPen;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowStyle.prototype.setTextPen = function (value) {
            this.gridRowTextPen = value;
            if (typeof this.parent !== 'undefined') {
                for (var i = 0; i < this.parent.cells.count; i++) {
                    this.parent.cells.getCell(i).style.textPen = value;
                }
            }
        };
        Object.defineProperty(PdfGridRowStyle.prototype, "font", {
            get: function () {
                return this.gridRowFont;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowStyle.prototype.setFont = function (value) {
            this.gridRowFont = value;
            if (typeof this.parent !== 'undefined') {
                for (var i = 0; i < this.parent.cells.count; i++) {
                    this.parent.cells.getCell(i).style.font = value;
                }
            }
        };
        Object.defineProperty(PdfGridRowStyle.prototype, "border", {
            get: function () {
                if (typeof this.gridRowBorder === 'undefined') {
                    this.setBorder(new pdf_borders_1.PdfBorders());
                }
                return this.gridRowBorder;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowStyle.prototype.setBorder = function (value) {
            this.gridRowBorder = value;
            if (typeof this.parent !== 'undefined') {
                for (var i = 0; i < this.parent.cells.count; i++) {
                    this.parent.cells.getCell(i).style.borders = value;
                }
            }
        };
        PdfGridRowStyle.prototype.setParent = function (parent) {
            this.parent = parent;
        };
        return PdfGridRowStyle;
    }());
    exports.PdfGridRowStyle = PdfGridRowStyle;
    var PdfHorizontalOverflowType;
    (function (PdfHorizontalOverflowType) {
        PdfHorizontalOverflowType[PdfHorizontalOverflowType["NextPage"] = 0] = "NextPage";
        PdfHorizontalOverflowType[PdfHorizontalOverflowType["LastPage"] = 1] = "LastPage";
    })(PdfHorizontalOverflowType = exports.PdfHorizontalOverflowType || (exports.PdfHorizontalOverflowType = {}));
});
