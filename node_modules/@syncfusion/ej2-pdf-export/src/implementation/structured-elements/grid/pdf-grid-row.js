define(["require", "exports", "./pdf-grid-cell", "./styles/style"], function (require, exports, pdf_grid_cell_1, style_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfGridRow = (function () {
        function PdfGridRow(grid) {
            this.gridRowOverflowIndex = 0;
            this.isRowHeightSet = false;
            this.isRowMergeComplete = true;
            this.pdfGrid = grid;
        }
        Object.defineProperty(PdfGridRow.prototype, "rowSpanExists", {
            get: function () {
                return this.bRowSpanExists;
            },
            set: function (value) {
                this.bRowSpanExists = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "cells", {
            get: function () {
                if (this.gridCells == null) {
                    this.gridCells = new pdf_grid_cell_1.PdfGridCellCollection(this);
                }
                return this.gridCells;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "grid", {
            get: function () {
                return this.pdfGrid;
            },
            set: function (value) {
                this.pdfGrid = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "style", {
            get: function () {
                if (typeof this.rowStyle === 'undefined') {
                    this.rowStyle = new style_1.PdfGridRowStyle();
                    this.rowStyle.setParent(this);
                }
                return this.rowStyle;
            },
            set: function (value) {
                this.rowStyle = value;
                for (var i = 0; i < this.cells.count; i++) {
                    this.cells.getCell(i).style.borders = value.border;
                    if (typeof value.font !== 'undefined') {
                        this.cells.getCell(i).style.font = value.font;
                    }
                    if (typeof value.backgroundBrush !== 'undefined') {
                        this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;
                    }
                    if (typeof value.textBrush !== 'undefined') {
                        this.cells.getCell(i).style.textBrush = value.textBrush;
                    }
                    if (typeof value.textPen !== 'undefined') {
                        this.cells.getCell(i).style.textPen = value.textPen;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "rowBreakHeight", {
            get: function () {
                if (typeof this.gridRowBreakHeight === 'undefined') {
                    this.gridRowBreakHeight = 0;
                }
                return this.gridRowBreakHeight;
            },
            set: function (value) {
                this.gridRowBreakHeight = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "rowOverflowIndex", {
            get: function () {
                return this.gridRowOverflowIndex;
            },
            set: function (value) {
                this.gridRowOverflowIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "height", {
            get: function () {
                if (!this.isRowHeightSet) {
                    this.rowHeight = this.measureHeight();
                }
                return this.rowHeight;
            },
            set: function (value) {
                this.rowHeight = value;
                this.isRowHeightSet = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "columnSpanExists", {
            get: function () {
                return this.bColumnSpanExists;
            },
            set: function (value) {
                this.bColumnSpanExists = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "rowMergeComplete", {
            get: function () {
                return this.isRowMergeComplete;
            },
            set: function (value) {
                this.isRowMergeComplete = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRow.prototype, "rowIndex", {
            get: function () {
                return this.grid.rows.rowCollection.indexOf(this);
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRow.prototype.measureHeight = function () {
            var rowSpanRemainingHeight = 0;
            var rowHeight;
            var maxHeight = 0;
            rowHeight = this.cells.getCell(0).height;
            for (var i = 0; i < this.cells.count; i++) {
                var cell = this.cells.getCell(i);
                if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {
                    rowSpanRemainingHeight = cell.rowSpanRemainingHeight;
                }
                this.rowMergeComplete = false;
                if (cell.rowSpan > 1) {
                    if (maxHeight < cell.height) {
                        maxHeight = cell.height;
                    }
                    continue;
                }
                rowHeight = Math.max(rowHeight, cell.height);
            }
            if (rowHeight === 0) {
                rowHeight = maxHeight;
            }
            else if (rowSpanRemainingHeight > 0) {
                rowHeight += rowSpanRemainingHeight;
            }
            return rowHeight;
        };
        return PdfGridRow;
    }());
    exports.PdfGridRow = PdfGridRow;
    var PdfGridRowCollection = (function () {
        function PdfGridRowCollection(grid) {
            this.rows = [];
            this.grid = grid;
        }
        Object.defineProperty(PdfGridRowCollection.prototype, "count", {
            get: function () {
                return this.rows.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfGridRowCollection.prototype, "rowCollection", {
            get: function () {
                return this.rows;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridRowCollection.prototype.addRow = function (arg) {
            if (typeof arg === 'undefined') {
                var temprow = new PdfGridRow(this.grid);
                this.addRow(temprow);
                return temprow;
            }
            else {
                arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);
                arg.style.setFont(this.grid.style.font);
                arg.style.setTextBrush(this.grid.style.textBrush);
                arg.style.setTextPen(this.grid.style.textPen);
                if (arg.cells.count === 0) {
                    for (var i = 0; i < this.grid.columns.count; i++) {
                        arg.cells.add(new pdf_grid_cell_1.PdfGridCell());
                    }
                }
                this.rows.push(arg);
            }
        };
        PdfGridRowCollection.prototype.getRow = function (index) {
            return this.rows[index];
        };
        return PdfGridRowCollection;
    }());
    exports.PdfGridRowCollection = PdfGridRowCollection;
    var PdfGridHeaderCollection = (function () {
        function PdfGridHeaderCollection(grid) {
            this.rows = [];
            this.grid = grid;
            this.rows = [];
        }
        PdfGridHeaderCollection.prototype.getHeader = function (index) {
            return (this.rows[index]);
        };
        Object.defineProperty(PdfGridHeaderCollection.prototype, "count", {
            get: function () {
                return this.rows.length;
            },
            enumerable: true,
            configurable: true
        });
        PdfGridHeaderCollection.prototype.add = function (arg) {
            if (typeof arg === 'number') {
                var row = void 0;
                for (var i = 0; i < arg; i++) {
                    row = new PdfGridRow(this.grid);
                    for (var j = 0; j < this.grid.columns.count; j++) {
                        row.cells.add(new pdf_grid_cell_1.PdfGridCell());
                    }
                    this.rows.push(row);
                }
                return this.rows;
            }
            else {
                this.rows.push(arg);
            }
        };
        PdfGridHeaderCollection.prototype.indexOf = function (row) {
            return this.rows.indexOf(row);
        };
        return PdfGridHeaderCollection;
    }());
    exports.PdfGridHeaderCollection = PdfGridHeaderCollection;
});
