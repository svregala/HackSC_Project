define(["require", "exports", "./../primitives/pdf-stream", "./../graphics/pdf-graphics", "./pdf-page-layer-collection", "./../input-output/pdf-dictionary-properties", "./../graphics/enum"], function (require, exports, pdf_stream_1, pdf_graphics_1, pdf_page_layer_collection_1, pdf_dictionary_properties_1, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfPageLayer = (function () {
        function PdfPageLayer(page, streamClipPageTemplates) {
            this.pdfColorSpace = enum_1.PdfColorSpace.Rgb;
            this.isVisible = true;
            this.sublayer = false;
            this.contentLength = 0;
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            if (typeof streamClipPageTemplates === 'undefined') {
                this.pdfPage = page;
                this.clipPageTemplates = true;
                this.content = new pdf_stream_1.PdfStream();
            }
            else if (streamClipPageTemplates instanceof pdf_stream_1.PdfStream || streamClipPageTemplates === null) {
                if (page == null) {
                    throw new Error('ArgumentNullException:page');
                }
                if (streamClipPageTemplates == null) {
                    throw new Error('ArgumentNullException:stream');
                }
                this.pdfPage = page;
                this.content = streamClipPageTemplates;
            }
            else {
                this.constructor(page);
                this.clipPageTemplates = streamClipPageTemplates;
            }
        }
        Object.defineProperty(PdfPageLayer.prototype, "colorSpace", {
            get: function () {
                return this.pdfColorSpace;
            },
            set: function (value) {
                this.pdfColorSpace = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "page", {
            get: function () {
                return this.pdfPage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "layerId", {
            get: function () {
                return this.layerid;
            },
            set: function (value) {
                this.layerid = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "name", {
            get: function () {
                return this.layerName;
            },
            set: function (value) {
                this.layerName = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "visible", {
            get: function () {
                return this.isVisible;
            },
            set: function (value) {
                this.isVisible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "graphics", {
            get: function () {
                if ((this.pdfGraphics == null)) {
                    this.initializeGraphics(this.page);
                }
                return this.pdfGraphics;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageLayer.prototype, "layers", {
            get: function () {
                if (this.layer == null) {
                    this.layer = new pdf_page_layer_collection_1.PdfPageLayerCollection(this.page);
                    this.layer.sublayer = true;
                    return this.layer;
                }
                else {
                    return this.layer;
                }
            },
            enumerable: true,
            configurable: true
        });
        PdfPageLayer.prototype.add = function () {
            var layer = new PdfPageLayer(this.pdfPage);
            layer.name = '';
            return layer;
        };
        PdfPageLayer.prototype.sign = function (number) {
            if (number === 0) {
                return 0;
            }
            else if (number > 0) {
                return 1;
            }
            else {
                return -1;
            }
        };
        PdfPageLayer.prototype.initializeGraphics = function (page) {
            var oPage = page;
            var gr = new pdf_graphics_1.GetResourceEventHandler(this.page);
            var cropBox = null;
            this.pdfGraphics = new pdf_graphics_1.PdfGraphics(page.size, gr, this.content);
            this.pdfGraphics.mediaBoxUpperRightBound = 0;
            if (oPage != null) {
                var sc = oPage.section.parent;
                if (sc != null) {
                    this.pdfGraphics.colorSpace = sc.document.colorSpace;
                    this.colorSpace = sc.document.colorSpace;
                }
            }
            var isSame = (this.sign(page.origin.y) === this.sign(page.origin.x));
            if (page.origin.x >= 0 && page.origin.y >= 0 || !(isSame)) {
                this.pdfGraphics.initializeCoordinates();
            }
            else {
            }
            var clipRect = oPage.section.getActualBounds(oPage, true);
            var margins = oPage.section.pageSettings.margins;
            if (this.clipPageTemplates) {
                if (page.origin.x >= 0 && page.origin.y >= 0) {
                    this.pdfGraphics.clipTranslateMargins(clipRect);
                }
            }
            else {
                this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);
            }
            this.pdfGraphics.setLayer(this);
        };
        Object.defineProperty(PdfPageLayer.prototype, "element", {
            get: function () {
                return this.content;
            },
            enumerable: true,
            configurable: true
        });
        return PdfPageLayer;
    }());
    exports.PdfPageLayer = PdfPageLayer;
});
