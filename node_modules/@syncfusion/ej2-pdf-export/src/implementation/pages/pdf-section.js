define(["require", "exports", "./pdf-page", "./page-added-event-arguments", "./../primitives/pdf-reference", "./../primitives/pdf-array", "./../primitives/pdf-number", "./../primitives/pdf-name", "./../primitives/pdf-dictionary", "./../primitives/pdf-dictionary", "./../input-output/pdf-dictionary-properties", "./pdf-section-collection", "./pdf-section-page-collection", "./../drawing/pdf-drawing", "./pdf-section-templates"], function (require, exports, pdf_page_1, page_added_event_arguments_1, pdf_reference_1, pdf_array_1, pdf_number_1, pdf_name_1, pdf_dictionary_1, pdf_dictionary_2, pdf_dictionary_properties_1, pdf_section_collection_1, pdf_section_page_collection_1, pdf_drawing_1, pdf_section_templates_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfSection = (function () {
        function PdfSection(document, pageSettings) {
            this.pageAdded = new page_added_event_arguments_1.PageAddedEventArgs();
            this.pdfPages = [];
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            if (typeof pageSettings === 'undefined') {
                this.constructor(document, document.pageSettings);
            }
            else {
                this.pdfDocument = document;
                this.settings = pageSettings.clone();
                this.initialSettings = this.settings.clone();
                this.initialize();
            }
        }
        Object.defineProperty(PdfSection.prototype, "parent", {
            get: function () {
                return this.sectionCollection;
            },
            set: function (value) {
                this.sectionCollection = value;
                this.section.items.setValue(this.dictionaryProperties.parent, new pdf_reference_1.PdfReferenceHolder(value));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "parentDocument", {
            get: function () {
                return this.pdfDocument;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "pageSettings", {
            get: function () {
                return this.settings;
            },
            set: function (value) {
                if (value != null) {
                    this.settings = value;
                }
                else {
                    throw Error('Value can not be null.');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "element", {
            get: function () {
                return this.section;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "count", {
            get: function () {
                return this.pagesReferences.count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "template", {
            get: function () {
                if (this.pageTemplate == null) {
                    this.pageTemplate = new pdf_section_templates_1.PdfSectionTemplate();
                }
                return this.pageTemplate;
            },
            set: function (value) {
                this.pageTemplate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "document", {
            get: function () {
                return this.sectionCollection.document;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfSection.prototype, "pages", {
            get: function () {
                if (this.pagesCollection == null || typeof this.pagesCollection === 'undefined') {
                    this.pagesCollection = new pdf_section_page_collection_1.PdfSectionPageCollection(this);
                }
                return this.pagesCollection;
            },
            enumerable: true,
            configurable: true
        });
        PdfSection.prototype.getPages = function () {
            return this.pdfPages;
        };
        PdfSection.prototype.pointToNativePdf = function (page, point) {
            var bounds = this.getActualBounds(page, true);
            point.x += bounds.x;
            point.y = this.pageSettings.height - (point.y);
            return point;
        };
        PdfSection.prototype.setPageSettings = function (settings) {
            this.settings = settings;
            this.state.orientation = settings.orientation;
            this.state.rotate = settings.rotate;
            this.state.size = settings.size;
            this.state.origin = settings.origin;
        };
        PdfSection.prototype.initialize = function () {
            this.pagesReferences = new pdf_array_1.PdfArray();
            this.section = new pdf_dictionary_1.PdfDictionary();
            this.state = new PageSettingsState(this.pdfDocument);
            this.section.sectionBeginSave = new pdf_dictionary_2.SaveSectionEventHandler(this, this.state);
            this.pageCount = new pdf_number_1.PdfNumber(0);
            this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);
            this.section.items.setValue(this.dictionaryProperties.type, new pdf_name_1.PdfName(this.dictionaryProperties.pages));
            this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);
        };
        PdfSection.prototype.containsTemplates = function (document, page, foreground) {
            var documentHeaders = this.getDocumentTemplates(document, page, true, foreground);
            var documentTemplates = this.getDocumentTemplates(document, page, false, foreground);
            var contains = (documentHeaders.length > 0 || documentTemplates.length > 0);
            return contains;
        };
        PdfSection.prototype.getDocumentTemplates = function (document, page, headers, foreground) {
            var templates = [];
            if (headers) {
                if (this.template.applyDocumentTopTemplate && document.template.getTop(page) != null) {
                    if ((!(document.template.getTop(page).foreground || foreground)) || (document.template.getTop(page).foreground && foreground)) {
                        templates.push(document.template.getTop(page));
                    }
                }
                if (this.template.applyDocumentBottomTemplate && document.template.getBottom(page) != null) {
                    if ((!(document.template.getBottom(page).foreground || foreground)) || (document.template.getBottom(page).foreground && foreground)) {
                        templates.push(document.template.getBottom(page));
                    }
                }
                if (this.template.applyDocumentLeftTemplate && document.template.getLeft(page) != null) {
                    if ((!(document.template.getLeft(page).foreground || foreground)) || (document.template.getLeft(page).foreground && foreground)) {
                        templates.push(document.template.getLeft(page));
                    }
                }
                if (this.template.applyDocumentRightTemplate && document.template.getRight(page) != null) {
                    if ((!(document.template.getRight(page).foreground || foreground)) || (document.template.getRight(page).foreground && foreground)) {
                        templates.push(document.template.getRight(page));
                    }
                }
            }
            return templates;
        };
        PdfSection.prototype.add = function (page) {
            if (typeof page === 'undefined') {
                var page_1 = new pdf_page_1.PdfPage();
                this.add(page_1);
                return page_1;
            }
            else {
                var r = this.checkPresence(page);
                this.pdfPages.push(page);
                this.pagesReferences.add(r);
                page.setSection(this);
                page.resetProgress();
                this.pageAddedMethod(page);
            }
        };
        PdfSection.prototype.checkPresence = function (page) {
            var rh = new pdf_reference_1.PdfReferenceHolder(page);
            var contains = false;
            var sc = this.parent;
            for (var index = 0; index < sc.section.length; index++) {
                var section = sc.section[index];
                contains = contains || section.contains(page);
            }
            return rh;
        };
        PdfSection.prototype.contains = function (page) {
            var index = this.indexOf(page);
            return (0 <= index);
        };
        PdfSection.prototype.indexOf = function (page) {
            for (var index = 0; index < this.pdfPages.length; index++) {
                if (this.pdfPages[index] === page) {
                    return this.pdfPages.indexOf(page);
                }
            }
            var r = new pdf_reference_1.PdfReferenceHolder(page);
            return this.pagesReferences.indexOf(r);
        };
        PdfSection.prototype.pageAddedMethod = function (page) {
            var args = new page_added_event_arguments_1.PageAddedEventArgs(page);
            this.onPageAdded(args);
            var parent = this.parent;
            parent.document.pages.onPageAdded(args);
            this.pageCount.intValue = this.count;
        };
        PdfSection.prototype.onPageAdded = function (args) {
        };
        PdfSection.prototype.getActualBounds = function (arg1, arg2, arg3) {
            if (arg1 instanceof pdf_page_1.PdfPage && typeof arg2 === 'boolean') {
                var result = void 0;
                var document_1 = this.parent.document;
                result = this.getActualBounds(document_1, arg1, arg2);
                return result;
            }
            else {
                arg1 = arg1;
                arg2 = arg2;
                arg3 = arg3;
                var bounds = new pdf_drawing_1.RectangleF(0, 0, 0, 0);
                bounds.height = (arg3) ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;
                bounds.width = (arg3) ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;
                var left = this.getLeftIndentWidth(arg1, arg2, arg3);
                var top_1 = this.getTopIndentHeight(arg1, arg2, arg3);
                var right = this.getRightIndentWidth(arg1, arg2, arg3);
                var bottom = this.getBottomIndentHeight(arg1, arg2, arg3);
                bounds.x += left;
                bounds.y += top_1;
                bounds.width -= (left + right);
                bounds.height -= (top_1 + bottom);
                return bounds;
            }
        };
        PdfSection.prototype.getLeftIndentWidth = function (document, page, includeMargins) {
            if (document == null) {
                throw new Error('ArgumentNullException:document');
            }
            if (page == null) {
                throw new Error('ArgumentNullException:page');
            }
            var value = (includeMargins) ? this.pageSettings.margins.left : 0;
            var templateWidth = (this.template.getLeft(page) != null) ? this.template.getLeft(page).width : 0;
            var docTemplateWidth = (document.template.getLeft(page) != null) ? document.template.getLeft(page).width : 0;
            value += (this.template.applyDocumentLeftTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
            return value;
        };
        PdfSection.prototype.getTopIndentHeight = function (document, page, includeMargins) {
            if (document == null) {
                throw new Error('ArgumentNullException:document');
            }
            if (page == null) {
                throw new Error('ArgumentNullException:page');
            }
            var value = (includeMargins) ? this.pageSettings.margins.top : 0;
            var templateHeight = (this.template.getTop(page) != null) ? this.template.getTop(page).height : 0;
            var docTemplateHeight = (document.template.getTop(page) != null) ? document.template.getTop(page).height : 0;
            value += (this.template.applyDocumentTopTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
            return value;
        };
        PdfSection.prototype.getRightIndentWidth = function (document, page, includeMargins) {
            if (document == null) {
                throw new Error('ArgumentNullException:document');
            }
            if (page == null) {
                throw new Error('ArgumentNullException:page');
            }
            var value = (includeMargins) ? this.pageSettings.margins.right : 0;
            var templateWidth = (this.template.getRight(page) != null) ? this.template.getRight(page).width : 0;
            var docTemplateWidth = (document.template.getRight(page) != null) ? document.template.getRight(page).width : 0;
            value += (this.template.applyDocumentRightTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
            return value;
        };
        PdfSection.prototype.getBottomIndentHeight = function (document, page, includeMargins) {
            if (document == null) {
                throw new Error('ArgumentNullException:document');
            }
            if (page == null) {
                throw new Error('ArgumentNullException:page');
            }
            var value = (includeMargins) ? this.pageSettings.margins.bottom : 0;
            var templateHeight = (this.template.getBottom(page) != null) ? this.template.getBottom(page).height : 0;
            var docTemplateHeight = (document.template.getBottom(page) != null) ? document.template.getBottom(page).height : 0;
            value += (this.template.applyDocumentBottomTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
            return value;
        };
        PdfSection.prototype.remove = function (page) {
            if (page == null) {
                throw Error('ArgumentNullException("page")');
            }
            var index = this.pdfPages.indexOf(page);
            this.pagesReferences.removeAt(index);
            var temproaryPages = [];
            for (var j = 0; j < index; j++) {
                temproaryPages.push(this.pdfPages[j]);
            }
            for (var j = index + 1; j < this.pdfPages.length; j++) {
                temproaryPages.push(this.pdfPages[j]);
            }
            this.pdfPages = temproaryPages;
        };
        PdfSection.prototype.applyPageSettings = function (container, parentSettings, state) {
            var bounds = new pdf_drawing_1.RectangleF(state.origin, state.size);
            container.items.setValue(this.dictionaryProperties.mediaBox, pdf_array_1.PdfArray.fromRectangle(bounds));
            var rotate = 0;
            rotate = pdf_section_collection_1.PdfSectionCollection.rotateFactor * state.rotate;
            var angle = new pdf_number_1.PdfNumber(rotate);
            container.items.setValue(this.dictionaryProperties.rotate, angle);
        };
        PdfSection.prototype.beginSave = function (state, writer) {
            var doc = writer.document;
            this.applyPageSettings(this.section, doc.pageSettings, state);
        };
        PdfSection.prototype.drawTemplates = function (page, layer, document, foreground) {
            var documentHeaders = this.getDocumentTemplates(document, page, true, foreground);
            var documentTemplates = this.getDocumentTemplates(document, page, false, foreground);
            if (foreground) {
                this.drawTemplatesHelper(layer, document, documentHeaders);
                this.drawTemplatesHelper(layer, document, documentTemplates);
            }
            else {
                this.drawTemplatesHelper(layer, document, documentHeaders);
                this.drawTemplatesHelper(layer, document, documentTemplates);
            }
        };
        PdfSection.prototype.drawTemplatesHelper = function (layer, document, templates) {
            if (templates != null && templates.length > 0) {
                var len = templates.length;
                for (var i = 0; i < len; i++) {
                    var template = templates[i];
                    template.draw(layer, document);
                }
            }
        };
        return PdfSection;
    }());
    exports.PdfSection = PdfSection;
    var PageSettingsState = (function () {
        function PageSettingsState(document) {
            this.pageOrientation = document.pageSettings.orientation;
            this.pageRotate = document.pageSettings.rotate;
            this.pageSize = document.pageSettings.size;
            this.pageOrigin = document.pageSettings.origin;
        }
        Object.defineProperty(PageSettingsState.prototype, "orientation", {
            get: function () {
                return this.pageOrientation;
            },
            set: function (value) {
                this.pageOrientation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettingsState.prototype, "rotate", {
            get: function () {
                return this.pageRotate;
            },
            set: function (value) {
                this.pageRotate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettingsState.prototype, "size", {
            get: function () {
                return this.pageSize;
            },
            set: function (value) {
                this.pageSize = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettingsState.prototype, "origin", {
            get: function () {
                return this.pageOrigin;
            },
            set: function (value) {
                this.pageOrigin = value;
            },
            enumerable: true,
            configurable: true
        });
        return PageSettingsState;
    }());
    exports.PageSettingsState = PageSettingsState;
});
