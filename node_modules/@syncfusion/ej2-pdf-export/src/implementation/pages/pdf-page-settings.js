define(["require", "exports", "./../drawing/pdf-drawing", "./pdf-page-size", "./enum", "./../graphics/pdf-margins"], function (require, exports, pdf_drawing_1, pdf_page_size_1, enum_1, pdf_margins_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfPageSettings = (function () {
        function PdfPageSettings(margins) {
            this.pageMargins = new pdf_margins_1.PdfMargins();
            this.pageSize = pdf_page_size_1.PdfPageSize.a4;
            this.rotateAngle = enum_1.PdfPageRotateAngle.RotateAngle0;
            this.pageOrientation = enum_1.PdfPageOrientation.Portrait;
            this.pageOrigin = new pdf_drawing_1.PointF(0, 0);
            this.isRotation = false;
            if (typeof margins === 'number') {
                this.pageMargins.setMargins(margins);
            }
        }
        Object.defineProperty(PdfPageSettings.prototype, "size", {
            get: function () {
                return this.pageSize;
            },
            set: function (value) {
                this.setSize(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "orientation", {
            get: function () {
                return this.pageOrientation;
            },
            set: function (orientation) {
                if (this.pageOrientation !== orientation) {
                    this.pageOrientation = orientation;
                    this.updateSize(orientation);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "margins", {
            get: function () {
                return this.pageMargins;
            },
            set: function (value) {
                this.pageMargins = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "width", {
            get: function () {
                return this.pageSize.width;
            },
            set: function (value) {
                this.pageSize.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "height", {
            get: function () {
                return this.pageSize.height;
            },
            set: function (value) {
                this.pageSize.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "origin", {
            get: function () {
                return this.pageOrigin;
            },
            set: function (value) {
                this.pageOrigin = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfPageSettings.prototype, "rotate", {
            get: function () {
                return this.rotateAngle;
            },
            set: function (value) {
                this.rotateAngle = value;
                this.isRotation = true;
            },
            enumerable: true,
            configurable: true
        });
        PdfPageSettings.prototype.updateSize = function (orientation) {
            var min = Math.min(this.pageSize.width, this.pageSize.height);
            var max = Math.max(this.pageSize.width, this.pageSize.height);
            switch (orientation) {
                case enum_1.PdfPageOrientation.Portrait:
                    this.pageSize = new pdf_drawing_1.SizeF(min, max);
                    break;
                case enum_1.PdfPageOrientation.Landscape:
                    this.pageSize = new pdf_drawing_1.SizeF(max, min);
                    break;
            }
        };
        PdfPageSettings.prototype.clone = function () {
            var settings = this;
            settings.pageMargins = this.pageMargins.clone();
            return settings;
        };
        PdfPageSettings.prototype.getActualSize = function () {
            var width = this.width - (this.margins.left + this.margins.right);
            var height = this.height - (this.margins.top + this.margins.bottom);
            var size = new pdf_drawing_1.SizeF(width, height);
            return size;
        };
        PdfPageSettings.prototype.setSize = function (size) {
            var min = Math.min(size.width, size.height);
            var max = Math.max(size.width, size.height);
            if (this.orientation === enum_1.PdfPageOrientation.Portrait) {
                this.pageSize = new pdf_drawing_1.SizeF(min, max);
            }
            else {
                this.pageSize = new pdf_drawing_1.SizeF(max, min);
            }
        };
        return PdfPageSettings;
    }());
    exports.PdfPageSettings = PdfPageSettings;
});
