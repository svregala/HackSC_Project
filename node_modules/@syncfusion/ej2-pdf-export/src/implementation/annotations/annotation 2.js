define(["require", "exports", "./../graphics/pdf-color", "./../drawing/pdf-drawing", "./../primitives/pdf-dictionary", "./../primitives/pdf-array", "./../primitives/pdf-number", "./../primitives/pdf-reference", "./../primitives/pdf-string", "./../input-output/pdf-dictionary-properties", "./../primitives/pdf-name", "./../graphics/brushes/pdf-solid-brush", "./../graphics/fonts/pdf-standard-font", "./../graphics/fonts/enum", "./../graphics/fonts/pdf-string-format", "./../graphics/enum"], function (require, exports, pdf_color_1, pdf_drawing_1, pdf_dictionary_1, pdf_array_1, pdf_number_1, pdf_reference_1, pdf_string_1, pdf_dictionary_properties_1, pdf_name_1, pdf_solid_brush_1, pdf_standard_font_1, enum_1, pdf_string_format_1, enum_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfAnnotation = (function () {
        function PdfAnnotation(arg1) {
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            this.pdfColor = new pdf_color_1.PdfColor(255, 255, 255);
            this.rectangle = new pdf_drawing_1.RectangleF(0, 0, 0, 0);
            this.pdfPage = null;
            this.textBrush = new pdf_solid_brush_1.PdfSolidBrush(new pdf_color_1.PdfColor(0, 0, 0));
            this.textFont = new pdf_standard_font_1.PdfStandardFont(enum_1.PdfFontFamily.TimesRoman, 10);
            this.format = new pdf_string_format_1.PdfStringFormat(enum_2.PdfTextAlignment.Left);
            this.content = '';
            this.pdfDictionary = new pdf_dictionary_1.PdfDictionary();
            this.internalColor = new pdf_color_1.PdfColor();
            this.darkness = 1.0;
            if (typeof arg1 === 'undefined') {
                this.initialize();
            }
            else {
                this.initialize();
                this.bounds = arg1;
            }
        }
        Object.defineProperty(PdfAnnotation.prototype, "color", {
            get: function () {
                return this.pdfColor;
            },
            set: function (value) {
                this.pdfColor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "innerColor", {
            get: function () {
                return this.internalColor;
            },
            set: function (value) {
                this.internalColor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "bounds", {
            get: function () {
                return this.rectangle;
            },
            set: function (value) {
                this.rectangle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "page", {
            get: function () {
                return this.pdfPage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "font", {
            get: function () {
                return this.textFont;
            },
            set: function (value) {
                this.textFont = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "stringFormat", {
            get: function () {
                return this.format;
            },
            set: function (value) {
                this.format = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "brush", {
            get: function () {
                return this.textBrush;
            },
            set: function (value) {
                this.textBrush = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "text", {
            get: function () {
                return this.content;
            },
            set: function (value) {
                this.content = value;
                this.dictionary.items.setValue(this.dictionaryProperties.contents, new pdf_string_1.PdfString(this.content));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfAnnotation.prototype, "dictionary", {
            get: function () {
                return this.pdfDictionary;
            },
            set: function (value) {
                this.pdfDictionary = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfAnnotation.prototype.initialize = function () {
            this.pdfDictionary.annotationBeginSave = new pdf_dictionary_1.SaveAnnotationEventHandler(this);
            this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new pdf_name_1.PdfName(this.dictionaryProperties.annot));
        };
        PdfAnnotation.prototype.setPage = function (page) {
            this.pdfPage = page;
            this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new pdf_reference_1.PdfReferenceHolder(this.pdfPage));
        };
        PdfAnnotation.prototype.beginSave = function () {
            this.save();
        };
        PdfAnnotation.prototype.save = function () {
            var nativeRectangle = new pdf_drawing_1.RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);
            var section = this.pdfPage.section;
            var initialHeight = nativeRectangle.height;
            var tempLoacation = section.pointToNativePdf(this.page, new pdf_drawing_1.PointF(nativeRectangle.x, nativeRectangle.y));
            nativeRectangle.x = tempLoacation.x;
            nativeRectangle.width = tempLoacation.x + nativeRectangle.width;
            nativeRectangle.y = (tempLoacation.y - this.page.document.pageSettings.margins.top);
            nativeRectangle.height = nativeRectangle.y - initialHeight;
            this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, pdf_array_1.PdfArray.fromRectangle(nativeRectangle));
            this.dictionary.items.setValue(this.dictionaryProperties.ca, new pdf_number_1.PdfNumber(this.darkness));
        };
        Object.defineProperty(PdfAnnotation.prototype, "element", {
            get: function () {
                return this.pdfDictionary;
            },
            enumerable: true,
            configurable: true
        });
        return PdfAnnotation;
    }());
    exports.PdfAnnotation = PdfAnnotation;
});
