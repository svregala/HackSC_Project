define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfName = (function () {
        function PdfName(value) {
            this.stringStartMark = '/';
            this.internalValue = '';
            this.isSaving6 = false;
            this.position6 = -1;
            this.internalValue = this.normalizeValue(value);
        }
        Object.defineProperty(PdfName.prototype, "status", {
            get: function () {
                return this.status6;
            },
            set: function (value) {
                this.status6 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfName.prototype, "isSaving", {
            get: function () {
                return this.isSaving6;
            },
            set: function (value) {
                this.isSaving6 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfName.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index6;
            },
            set: function (value) {
                this.index6 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfName.prototype, "position", {
            get: function () {
                return this.position6;
            },
            set: function (value) {
                this.position6 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfName.prototype, "clonedObject", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfName.prototype, "value", {
            get: function () {
                return this.internalValue;
            },
            set: function (value) {
                var val = value;
                if (value !== null && value.length > 0) {
                    val = value;
                    this.internalValue = this.normalizeValue(val);
                }
                else {
                    this.internalValue = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        PdfName.prototype.save = function (writer) {
            writer.write(this.toString());
        };
        PdfName.prototype.toString = function () {
            return (this.stringStartMark + this.escapeString(this.value));
        };
        PdfName.prototype.clone = function (crossTable) {
            var newName = new PdfName();
            newName.value = this.internalValue;
            return newName;
        };
        PdfName.prototype.escapeString = function (stringValue) {
            var result = '';
            var len = 0;
            for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {
                var ch = stringValue[i];
                var index = PdfName.delimiters.indexOf(ch);
                result = result + ch;
            }
            return result;
        };
        PdfName.prototype.normalizeValue = function (value, c) {
            var strFormat = '#{0:X}';
            return value;
        };
        PdfName.delimiters = '()<>[]{}/%}';
        PdfName.replacements = [' ', '\t', '\n', '\r'];
        return PdfName;
    }());
    exports.PdfName = PdfName;
});
