define(["require", "exports", "./pdf-number", "./../input-output/pdf-operators"], function (require, exports, pdf_number_1, pdf_operators_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfArray = (function () {
        function PdfArray(array) {
            this.startMark = '[';
            this.endMark = ']';
            this.position9 = -1;
            this.clonedObject9 = null;
            this.isFont = false;
            if (typeof array === 'undefined') {
                this.internalElements = [];
            }
            else {
                if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {
                    var tempNumberArray = array;
                    for (var index = 0; index < tempNumberArray.length; index++) {
                        var pdfNumber = new pdf_number_1.PdfNumber(tempNumberArray[index]);
                        this.add(pdfNumber);
                    }
                }
                else {
                    var tempArray = array;
                    this.internalElements = [];
                    for (var index = 0; index < tempArray.elements.length; index++) {
                        this.internalElements.push(tempArray.elements[index]);
                    }
                }
            }
        }
        PdfArray.prototype.items = function (index) {
            return this.internalElements[index];
        };
        Object.defineProperty(PdfArray.prototype, "count", {
            get: function () {
                return this.internalElements.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "status", {
            get: function () {
                return this.status9;
            },
            set: function (value) {
                this.status9 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "isSaving", {
            get: function () {
                return this.isSaving9;
            },
            set: function (value) {
                this.isSaving9 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "clonedObject", {
            get: function () {
                return this.clonedObject9;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "position", {
            get: function () {
                return this.position9;
            },
            set: function (value) {
                this.position9 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index9;
            },
            set: function (value) {
                this.index9 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "CrossTable", {
            get: function () {
                return this.pdfCrossTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfArray.prototype, "elements", {
            get: function () {
                return this.internalElements;
            },
            enumerable: true,
            configurable: true
        });
        PdfArray.prototype.add = function (element) {
            if (typeof this.internalElements === 'undefined') {
                this.internalElements = [];
            }
            this.internalElements.push(element);
            this.markedChange();
        };
        PdfArray.prototype.markedChange = function () {
            this.bChanged = true;
        };
        PdfArray.prototype.contains = function (element) {
            var returnValue = false;
            for (var index = 0; index < this.internalElements.length; index++) {
                var tempElement = this.internalElements[index];
                var inputElement = element;
                if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {
                    if (tempElement.value === inputElement.value) {
                        return true;
                    }
                }
            }
            return returnValue;
        };
        PdfArray.prototype.getItems = function (index) {
            return this.internalElements[index];
        };
        PdfArray.prototype.save = function (writer) {
            writer.write(this.startMark);
            for (var i = 0, len = this.count; i < len; i++) {
                this.getItems(i).save(writer);
                if (i + 1 !== len) {
                    writer.write(pdf_operators_1.Operators.whiteSpace);
                }
            }
            writer.write(this.endMark);
        };
        PdfArray.prototype.clone = function (crossTable) {
            this.clonedObject9 = null;
            var newArray = new PdfArray();
            for (var index = 0; index < this.internalElements.length; index++) {
                var obj = this.internalElements[index];
                newArray.add(obj.clone(crossTable));
            }
            newArray.pdfCrossTable = crossTable;
            this.clonedObject9 = newArray;
            return newArray;
        };
        PdfArray.fromRectangle = function (bounds) {
            var values = [bounds.x, bounds.y, bounds.width, bounds.height];
            var array = new PdfArray(values);
            return array;
        };
        PdfArray.prototype.insert = function (index, element) {
            if (index < this.internalElements.length && index > 0) {
                var tempElements = [];
                for (var i = 0; i < index; i++) {
                    tempElements.push(this.internalElements[i]);
                }
                tempElements.push(element);
                for (var i = index; i < this.internalElements.length; i++) {
                    tempElements.push(this.internalElements[i]);
                }
                this.internalElements = tempElements;
            }
            else {
                this.internalElements.push(element);
            }
            this.markChanged();
        };
        PdfArray.prototype.indexOf = function (element) {
            return this.internalElements.indexOf(element);
        };
        PdfArray.prototype.remove = function (element) {
            var index = this.internalElements.indexOf(element);
            this.internalElements[index] = null;
            this.markChanged();
        };
        PdfArray.prototype.removeAt = function (index) {
            if (this.internalElements.length > index) {
                var tempArray = [];
                for (var i = 0; i < index; i++) {
                    tempArray.push(this.internalElements[i]);
                }
                for (var i = index + 1; i < this.internalElements.length; i++) {
                    tempArray.push(this.internalElements[i]);
                }
                this.internalElements = tempArray;
            }
            this.markChanged();
        };
        PdfArray.prototype.clear = function () {
            this.internalElements = [];
            this.markChanged();
        };
        PdfArray.prototype.markChanged = function () {
            this.bChanged = true;
        };
        return PdfArray;
    }());
    exports.PdfArray = PdfArray;
});
