define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfNumber = (function () {
        function PdfNumber(value) {
            this.position5 = -1;
            this.value = value;
        }
        Object.defineProperty(PdfNumber.prototype, "intValue", {
            get: function () {
                return this.value;
            },
            set: function (value) {
                this.value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "isInteger", {
            get: function () {
                return this.integer;
            },
            set: function (value) {
                this.integer = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "status", {
            get: function () {
                return this.status5;
            },
            set: function (value) {
                this.status5 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "isSaving", {
            get: function () {
                return this.isSaving5;
            },
            set: function (value) {
                this.isSaving5 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index5;
            },
            set: function (value) {
                this.index5 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "position", {
            get: function () {
                return this.position5;
            },
            set: function (value) {
                this.position5 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfNumber.prototype, "clonedObject", {
            get: function () {
                var rValue = null;
                return rValue;
            },
            enumerable: true,
            configurable: true
        });
        PdfNumber.prototype.save = function (writer) {
            writer.write(this.intValue.toString());
        };
        PdfNumber.prototype.clone = function (crossTable) {
            var newNumber = new PdfNumber(this.value);
            return newNumber;
        };
        PdfNumber.floatToString = function (number) {
            var returnString = number.toFixed(2);
            if (returnString === '0.00') {
                returnString = '.00';
            }
            return returnString;
        };
        PdfNumber.min = function (x, y, z) {
            var r = Math.min(x, y);
            return Math.min(z, r);
        };
        return PdfNumber;
    }());
    exports.PdfNumber = PdfNumber;
});
