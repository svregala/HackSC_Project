define(["require", "exports", "./../input-output/pdf-dictionary-properties", "./../primitives/pdf-stream", "./../primitives/pdf-array", "./../primitives/pdf-number", "./../primitives/pdf-name", "./../primitives/pdf-dictionary", "./../primitives/pdf-string"], function (require, exports, pdf_dictionary_properties_1, pdf_stream_1, pdf_array_1, pdf_number_1, pdf_name_1, pdf_dictionary_1, pdf_string_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfReference = (function () {
        function PdfReference(objNumber, genNumber) {
            this.index3 = -1;
            this.position3 = -1;
            this.objNumber = 0;
            this.genNumber = 0;
            if (typeof objNumber === 'number' && typeof genNumber === 'number') {
                this.objNumber = objNumber;
                this.genNumber = genNumber;
            }
            else {
                this.objNumber = Number(objNumber);
                this.genNumber = Number(genNumber);
            }
        }
        Object.defineProperty(PdfReference.prototype, "status", {
            get: function () {
                return this.status3;
            },
            set: function (value) {
                this.status3 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReference.prototype, "isSaving", {
            get: function () {
                return this.isSaving3;
            },
            set: function (value) {
                this.isSaving3 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReference.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index3;
            },
            set: function (value) {
                this.index3 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReference.prototype, "position", {
            get: function () {
                return this.position3;
            },
            set: function (value) {
                this.position3 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReference.prototype, "clonedObject", {
            get: function () {
                var returnObject3 = null;
                return returnObject3;
            },
            enumerable: true,
            configurable: true
        });
        PdfReference.prototype.save = function (writer) {
            writer.write(this.toString());
        };
        PdfReference.prototype.toString = function () {
            return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';
        };
        PdfReference.prototype.clone = function (crossTable) {
            return null;
        };
        return PdfReference;
    }());
    exports.PdfReference = PdfReference;
    var PdfReferenceHolder = (function () {
        function PdfReferenceHolder(obj1, obj2) {
            this.index4 = -1;
            this.position4 = -1;
            this.objectIndex = -1;
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            if (obj1 instanceof pdf_array_1.PdfArray
                || obj1 instanceof pdf_dictionary_1.PdfDictionary
                || obj1 instanceof pdf_name_1.PdfName
                || obj1 instanceof pdf_number_1.PdfNumber
                || obj1 instanceof pdf_stream_1.PdfStream
                || obj1 instanceof PdfReference
                || obj1 instanceof pdf_string_1.PdfString) {
                this.primitiveObject = obj1;
            }
            else {
                var tempObj = obj1;
                this.constructor(tempObj.element);
            }
        }
        Object.defineProperty(PdfReferenceHolder.prototype, "status", {
            get: function () {
                return this.status4;
            },
            set: function (value) {
                this.status4 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "isSaving", {
            get: function () {
                return this.isSaving4;
            },
            set: function (value) {
                this.isSaving4 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index4;
            },
            set: function (value) {
                this.index4 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "position", {
            get: function () {
                return this.position4;
            },
            set: function (value) {
                this.position4 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "clonedObject", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "object", {
            get: function () {
                return this.primitiveObject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "reference", {
            get: function () {
                return this.pdfReference;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "index", {
            get: function () {
                return this.objectIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfReferenceHolder.prototype, "element", {
            get: function () {
                return this.primitiveObject;
            },
            enumerable: true,
            configurable: true
        });
        PdfReferenceHolder.prototype.save = function (writer) {
            var position = writer.position;
            var cTable = writer.document.crossTable;
            this.object.isSaving = true;
            var reference = null;
            reference = cTable.getReference(this.object);
            reference.save(writer);
        };
        PdfReferenceHolder.prototype.clone = function (crossTable) {
            var refHolder = null;
            var temp = null;
            var refNum = '';
            var reference = null;
            return null;
        };
        return PdfReferenceHolder;
    }());
    exports.PdfReferenceHolder = PdfReferenceHolder;
});
