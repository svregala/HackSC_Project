define(["require", "exports", "./../collections/dictionary", "./pdf-name", "./../input-output/pdf-operators", "./../input-output/pdf-dictionary-properties"], function (require, exports, dictionary_1, pdf_name_1, pdf_operators_1, pdf_dictionary_properties_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfDictionary = (function () {
        function PdfDictionary(dictionary) {
            this.position7 = -1;
            this.primitiveItems = new dictionary_1.Dictionary();
            this.prefix = '<<';
            this.suffix = '>>';
            this.resources = [];
            this.object = null;
            this.archive = true;
            this.isFont = false;
            if (typeof dictionary === 'undefined') {
                this.primitiveItems = new dictionary_1.Dictionary();
                this.encrypt = true;
                this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            }
            else {
                this.primitiveItems = new dictionary_1.Dictionary();
                var keys = dictionary.items.keys();
                var values = dictionary.items.values();
                for (var index = 0; index < dictionary.items.size(); index++) {
                    this.primitiveItems.setValue(keys[index], values[index]);
                }
                this.status = dictionary.status;
                this.freezeChanges(this);
                this.encrypt = true;
                this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
            }
        }
        Object.defineProperty(PdfDictionary.prototype, "items", {
            get: function () {
                return this.primitiveItems;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "status", {
            get: function () {
                return this.status7;
            },
            set: function (value) {
                this.status7 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "isSaving", {
            get: function () {
                return this.isSaving7;
            },
            set: function (value) {
                this.isSaving7 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "objectCollectionIndex", {
            get: function () {
                return this.index7;
            },
            set: function (value) {
                this.index7 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "clonedObject", {
            get: function () {
                return this.object;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "position", {
            get: function () {
                return this.position7;
            },
            set: function (value) {
                this.position7 = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "Count", {
            get: function () {
                return this.primitiveItems.size();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDictionary.prototype, "Dictionary", {
            get: function () {
                return this;
            },
            enumerable: true,
            configurable: true
        });
        PdfDictionary.prototype.getArchive = function () {
            return this.archive;
        };
        PdfDictionary.prototype.setArchive = function (value) {
            this.archive = value;
        };
        PdfDictionary.prototype.setEncrypt = function (value) {
            this.encrypt = value;
            this.modify();
        };
        PdfDictionary.prototype.getEncrypt = function () {
            return this.encrypt;
        };
        PdfDictionary.prototype.freezeChanges = function (freezer) {
            this.bChanged = false;
        };
        PdfDictionary.prototype.clone = function (crossTable) {
            var newDict = new PdfDictionary();
            return newDict;
        };
        PdfDictionary.prototype.modify = function () {
            this.bChanged = true;
        };
        PdfDictionary.prototype.remove = function (key) {
            if (typeof key !== 'string') {
                this.primitiveItems.remove(key.value);
                this.modify();
            }
            else {
                this.remove(new pdf_name_1.PdfName(key));
            }
        };
        PdfDictionary.prototype.containsKey = function (key) {
            var returnValue = false;
            returnValue = this.primitiveItems.containsKey(key.toString());
            return returnValue;
        };
        PdfDictionary.prototype.onBeginSave = function () {
            this.beginSave.sender.beginSave();
        };
        PdfDictionary.prototype.onFontDictionaryBeginSave = function () {
            this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();
        };
        PdfDictionary.prototype.onDescendantFontBeginSave = function () {
            this.descendantFontBeginSave.sender.descendantFontBeginSave();
        };
        PdfDictionary.prototype.onTemplateBeginSave = function () {
            this.pageBeginDrawTemplate.sender.pageBeginSave();
        };
        PdfDictionary.prototype.onBeginAnnotationSave = function () {
            this.annotationBeginSave.sender.beginSave();
        };
        PdfDictionary.prototype.onSectionBeginSave = function (writer) {
            var saveEvent = this.sectionBeginSave;
            saveEvent.sender.beginSave(saveEvent.state, writer);
        };
        PdfDictionary.prototype.save = function (writer, bRaiseEvent) {
            if (typeof bRaiseEvent === 'undefined') {
                this.save(writer, true);
            }
            else {
                writer.write(this.prefix);
                if (typeof this.beginSave !== 'undefined') {
                    this.onBeginSave();
                }
                if (typeof this.descendantFontBeginSave !== 'undefined') {
                    this.onDescendantFontBeginSave();
                }
                if (typeof this.fontDictionaryBeginSave !== 'undefined') {
                    this.onFontDictionaryBeginSave();
                }
                if (typeof this.annotationBeginSave !== 'undefined') {
                    this.onBeginAnnotationSave();
                }
                if (typeof this.sectionBeginSave !== 'undefined') {
                    this.onSectionBeginSave(writer);
                }
                if (typeof this.pageBeginDrawTemplate !== 'undefined') {
                    this.onTemplateBeginSave();
                }
                if (this.Count > 0) {
                    this.saveItems(writer);
                }
                writer.write(this.suffix);
                writer.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfDictionary.prototype.saveItems = function (writer) {
            writer.write(pdf_operators_1.Operators.newLine);
            var keys = this.primitiveItems.keys();
            var values = this.primitiveItems.values();
            for (var index = 0; index < keys.length; index++) {
                var key = keys[index];
                var name_1 = new pdf_name_1.PdfName(key);
                name_1.save(writer);
                writer.write(pdf_operators_1.Operators.whiteSpace);
                var resources = values[index];
                resources.save(writer);
                writer.write(pdf_operators_1.Operators.newLine);
            }
        };
        return PdfDictionary;
    }());
    exports.PdfDictionary = PdfDictionary;
    var SaveSectionCollectionEventHandler = (function () {
        function SaveSectionCollectionEventHandler(sender) {
            this.sender = sender;
        }
        return SaveSectionCollectionEventHandler;
    }());
    exports.SaveSectionCollectionEventHandler = SaveSectionCollectionEventHandler;
    var SaveDescendantFontEventHandler = (function () {
        function SaveDescendantFontEventHandler(sender) {
            this.sender = sender;
        }
        return SaveDescendantFontEventHandler;
    }());
    exports.SaveDescendantFontEventHandler = SaveDescendantFontEventHandler;
    var SaveFontDictionaryEventHandler = (function () {
        function SaveFontDictionaryEventHandler(sender) {
            this.sender = sender;
        }
        return SaveFontDictionaryEventHandler;
    }());
    exports.SaveFontDictionaryEventHandler = SaveFontDictionaryEventHandler;
    var SaveAnnotationEventHandler = (function () {
        function SaveAnnotationEventHandler(sender) {
            this.sender = sender;
        }
        return SaveAnnotationEventHandler;
    }());
    exports.SaveAnnotationEventHandler = SaveAnnotationEventHandler;
    var SaveSectionEventHandler = (function () {
        function SaveSectionEventHandler(sender, state) {
            this.sender = sender;
            this.state = state;
        }
        return SaveSectionEventHandler;
    }());
    exports.SaveSectionEventHandler = SaveSectionEventHandler;
    var SaveTemplateEventHandler = (function () {
        function SaveTemplateEventHandler(sender) {
            this.sender = sender;
        }
        return SaveTemplateEventHandler;
    }());
    exports.SaveTemplateEventHandler = SaveTemplateEventHandler;
});
