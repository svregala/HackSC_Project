define(["require", "exports", "./../input-output/enum", "./../primitives/pdf-dictionary", "./pdf-dictionary-properties", "./pdf-operators", "./../collections/dictionary", "./../primitives/pdf-reference", "./cross-table", "./../primitives/pdf-stream", "./../primitives/pdf-number", "./../document/pdf-catalog"], function (require, exports, enum_1, pdf_dictionary_1, pdf_dictionary_properties_1, pdf_operators_1, dictionary_1, pdf_reference_1, cross_table_1, pdf_stream_1, pdf_number_1, pdf_catalog_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfCrossTable = (function () {
        function PdfCrossTable() {
            this.objects = new dictionary_1.Dictionary();
            this.maxGenNumIndex = 0;
            this.objectCount = 0;
            this.dictionaryProperties = new pdf_dictionary_properties_1.DictionaryProperties();
        }
        Object.defineProperty(PdfCrossTable.prototype, "isMerging", {
            get: function () {
                return this.merging;
            },
            set: function (value) {
                this.merging = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "trailer", {
            get: function () {
                if (this.internalTrailer == null) {
                    this.internalTrailer = new pdf_stream_1.PdfStream();
                }
                return this.internalTrailer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "document", {
            get: function () {
                return this.pdfDocument;
            },
            set: function (value) {
                this.pdfDocument = value;
                this.items = this.pdfDocument.pdfObjects;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "pdfObjects", {
            get: function () {
                return this.items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "objectCollection", {
            get: function () {
                return this.pdfDocument.pdfObjects;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "count", {
            get: function () {
                return this.objectCount;
            },
            set: function (value) {
                this.objectCount = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfCrossTable.prototype, "nextObjNumber", {
            get: function () {
                this.count = this.count + 1;
                return this.count;
            },
            enumerable: true,
            configurable: true
        });
        PdfCrossTable.prototype.save = function (writer, filename) {
            this.saveHead(writer);
            var state = false;
            this.mappedReferences = null;
            this.objects.clear();
            this.markTrailerReferences();
            this.saveObjects(writer);
            var saveCount = this.count;
            var xrefPos = writer.position;
            this.registerObject(0, new pdf_reference_1.PdfReference(0, -1), true);
            var prevXRef = 0;
            writer.write(pdf_operators_1.Operators.xref);
            writer.write(pdf_operators_1.Operators.newLine);
            this.saveSections(writer);
            this.saveTrailer(writer, this.count, prevXRef);
            this.saveTheEndess(writer, xrefPos);
            this.count = saveCount;
            for (var i = 0; i < this.objectCollection.count; ++i) {
                var oi = this.objectCollection.items(i);
                oi.object.isSaving = false;
            }
            if (typeof filename === 'undefined') {
                return writer.stream.buffer;
            }
            else {
                writer.stream.save(filename);
            }
        };
        PdfCrossTable.prototype.saveTheEndess = function (writer, xrefPos) {
            writer.write(pdf_operators_1.Operators.newLine + pdf_operators_1.Operators.startxref + pdf_operators_1.Operators.newLine);
            writer.write(xrefPos.toString() + pdf_operators_1.Operators.newLine);
            writer.write(pdf_operators_1.Operators.eof + pdf_operators_1.Operators.newLine);
        };
        PdfCrossTable.prototype.saveTrailer = function (writer, count, prevXRef) {
            writer.write(pdf_operators_1.Operators.trailer + pdf_operators_1.Operators.newLine);
            var trailer = this.trailer;
            trailer.items.setValue(this.dictionaryProperties.size, new pdf_number_1.PdfNumber(this.objectCount + 1));
            trailer = new pdf_dictionary_1.PdfDictionary(trailer);
            trailer.setEncrypt(false);
            trailer.save(writer);
        };
        PdfCrossTable.prototype.saveSections = function (writer) {
            var objectNum = 0;
            var count = 0;
            do {
                count = this.prepareSubsection(objectNum);
                this.saveSubsection(writer, objectNum, count);
                objectNum += count;
            } while (count !== 0);
        };
        PdfCrossTable.prototype.saveSubsection = function (writer, objectNum, count) {
            if (count <= 0 || objectNum >= this.count) {
                return;
            }
            var subsectionHead = '{0} {1}{2}';
            writer.write(objectNum + ' ' + (count + 1) + pdf_operators_1.Operators.newLine);
            for (var i = objectNum; i <= objectNum + count; ++i) {
                var obj = this.objects.getValue(i);
                var str = '';
                if (obj.type === cross_table_1.ObjectType.Free) {
                    str = this.getItem(obj.offset, 65535, true);
                }
                else {
                    str = this.getItem(obj.offset, obj.generation, false);
                }
                writer.write(str);
            }
        };
        PdfCrossTable.prototype.getItem = function (offset, genNumber, isFree) {
            var returnString = '';
            var addOffsetLength = 10 - offset.toString().length;
            if (genNumber <= 0) {
                genNumber = 0;
            }
            var addGenNumberLength = (5 - genNumber.toString().length) <= 0 ? 0 : (5 - genNumber.toString().length);
            for (var index = 0; index < addOffsetLength; index++) {
                returnString = returnString + '0';
            }
            returnString = returnString + offset.toString() + ' ';
            for (var index = 0; index < addGenNumberLength; index++) {
                returnString = returnString + '0';
            }
            returnString = returnString + genNumber.toString() + ' ';
            returnString = returnString + ((isFree) ? pdf_operators_1.Operators.f : pdf_operators_1.Operators.n) + pdf_operators_1.Operators.newLine;
            return returnString;
        };
        PdfCrossTable.prototype.prepareSubsection = function (objectNum) {
            var count = 0;
            var i;
            var total = this.count;
            for (var k = 0; k < this.document.pdfObjects.count; k++) {
                var reference = this.document.pdfObjects.items(k).reference;
                var refString = reference.toString();
                var refArray = refString.split(' ');
            }
            if (objectNum >= total) {
                return count;
            }
            for (i = objectNum; i < total; ++i) {
                break;
            }
            objectNum = i;
            for (; i < total; ++i) {
                ++count;
            }
            return count;
        };
        PdfCrossTable.prototype.markTrailerReferences = function () {
            var tempArray;
            var keys = this.trailer.items.keys();
            var values = this.trailer.items.values();
        };
        PdfCrossTable.prototype.saveHead = function (writer) {
            var version = this.generateFileVersion(writer.document);
            writer.write('%PDF-' + version);
            writer.write(pdf_operators_1.Operators.newLine);
        };
        PdfCrossTable.prototype.generateFileVersion = function (document) {
            var iVersion = 4;
            var version = '1.' + iVersion.toString();
            return version;
        };
        PdfCrossTable.prototype.getReference = function (obj, bNew) {
            if (typeof bNew === 'undefined') {
                var wasNew = false;
                return this.getReference(obj, wasNew);
            }
            else {
                return this.getSubReference(obj, bNew);
            }
        };
        PdfCrossTable.prototype.getSubReference = function (obj, bNew) {
            var isNew = false;
            var wasNew;
            var reference = null;
            if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {
                var tempObj = this.document.pdfObjects.getReference(obj, wasNew);
                reference = tempObj.reference;
                wasNew = tempObj.wasNew;
            }
            if (reference == null) {
                if (obj.status === enum_1.ObjectStatus.Registered) {
                    wasNew = false;
                }
                else {
                    wasNew = true;
                }
            }
            else {
                wasNew = false;
            }
            if (reference == null) {
                var objnumber = this.nextObjNumber;
                reference = new pdf_reference_1.PdfReference(objnumber, 0);
                var found = void 0;
                if (wasNew) {
                    this.document.pdfObjects.add(obj);
                    this.document.pdfObjects.trySetReference(obj, reference, found);
                    var tempIndex = this.document.pdfObjects.count - 1;
                    var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;
                    var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];
                    this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);
                    obj.position = -1;
                }
                else {
                    this.document.pdfObjects.trySetReference(obj, reference, found);
                }
                obj.objectCollectionIndex = reference.objNumber;
                obj.status = enum_1.ObjectStatus.None;
                isNew = true;
            }
            bNew = isNew || this.bForceNew;
            return reference;
        };
        PdfCrossTable.prototype.saveObjects = function (writer) {
            var objectCollection = this.objectCollection;
            for (var i = 0; i < objectCollection.count; ++i) {
                var oi = objectCollection.items(i);
                var obj = oi.object;
                obj.isSaving = true;
                this.saveIndirectObject(obj, writer);
            }
        };
        PdfCrossTable.prototype.saveIndirectObject = function (obj, writer) {
            var reference = this.getReference(obj);
            if (obj instanceof pdf_catalog_1.PdfCatalog) {
                this.trailer.items.setValue(this.dictionaryProperties.root, reference);
            }
            this.pdfDocument.currentSavingObj = reference;
            var tempArchive = false;
            tempArchive = obj.getArchive();
            var allowedType = !((obj instanceof pdf_stream_1.PdfStream) || !tempArchive || (obj instanceof pdf_catalog_1.PdfCatalog));
            var sigFlag = false;
            this.registerObject(writer.position, reference);
            this.doSaveObject(obj, reference, writer);
        };
        PdfCrossTable.prototype.doSaveObject = function (obj, reference, writer) {
            var correctPosition = writer.length;
            writer.write(reference.objNumber.toString());
            writer.write(pdf_operators_1.Operators.whiteSpace);
            writer.write(reference.genNumber.toString());
            writer.write(pdf_operators_1.Operators.whiteSpace);
            writer.write(pdf_operators_1.Operators.obj);
            writer.write(pdf_operators_1.Operators.newLine);
            obj.save(writer);
            var stream = writer.stream;
            writer.write(pdf_operators_1.Operators.endObj);
            writer.write(pdf_operators_1.Operators.newLine);
        };
        PdfCrossTable.prototype.registerObject = function (offset, reference, free) {
            if (typeof free === 'boolean') {
                this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));
                this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
            }
            else if (typeof free === 'undefined') {
                this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));
                this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
            }
        };
        PdfCrossTable.dereference = function (obj) {
            var rh = obj;
            if (rh != null) {
                obj = rh.object;
            }
            return obj;
        };
        return PdfCrossTable;
    }());
    exports.PdfCrossTable = PdfCrossTable;
    var RegisteredObject = (function () {
        function RegisteredObject(offset, reference, free) {
            if (typeof free === 'undefined') {
                var tempOffset = offset;
                this.offsetNumber = tempOffset;
                var tempReference = reference;
                this.generation = tempReference.genNumber;
                this.object = tempReference.objNumber;
                this.type = cross_table_1.ObjectType.Normal;
            }
            else {
                var tempOffset = offset;
                var tempReference = reference;
                this.constructor(tempOffset, tempReference);
                var tempFree = free;
                this.type = cross_table_1.ObjectType.Free;
            }
        }
        Object.defineProperty(RegisteredObject.prototype, "objectNumber", {
            get: function () {
                return this.object;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RegisteredObject.prototype, "offset", {
            get: function () {
                var result;
                result = this.offsetNumber;
                return result;
            },
            enumerable: true,
            configurable: true
        });
        return RegisteredObject;
    }());
    exports.RegisteredObject = RegisteredObject;
});
