define(["require", "exports", "./pdf-operators", "./../primitives/pdf-number", "./../drawing/pdf-drawing", "./../primitives/pdf-string", "./../primitives/pdf-name"], function (require, exports, pdf_operators_1, pdf_number_1, pdf_drawing_1, pdf_string_1, pdf_name_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfStreamWriter = (function () {
        function PdfStreamWriter(stream) {
            if (stream == null) {
                throw new Error('ArgumentNullException:stream');
            }
            this.stream = stream;
        }
        PdfStreamWriter.prototype.clear = function () {
            this.stream.clearStream();
        };
        PdfStreamWriter.prototype.setGraphicsState = function (dictionaryName) {
            if (dictionaryName instanceof pdf_name_1.PdfName) {
                this.stream.write(dictionaryName.toString());
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                this.writeOperator(pdf_operators_1.Operators.setGraphicsState);
            }
            else {
                this.stream.write(pdf_operators_1.Operators.slash);
                this.stream.write(dictionaryName);
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                this.writeOperator(pdf_operators_1.Operators.setGraphicsState);
            }
        };
        PdfStreamWriter.prototype.executeObject = function (name) {
            this.stream.write(name.toString());
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.paintXObject);
            this.stream.write(pdf_operators_1.Operators.newLine);
        };
        PdfStreamWriter.prototype.closePath = function () {
            this.writeOperator(pdf_operators_1.Operators.closePath);
        };
        PdfStreamWriter.prototype.clipPath = function (useEvenOddRule) {
            this.stream.write(pdf_operators_1.Operators.clipPath);
            if (useEvenOddRule) {
                this.stream.write(pdf_operators_1.Operators.evenOdd);
            }
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.stream.write(pdf_operators_1.Operators.endPath);
            this.stream.write(pdf_operators_1.Operators.newLine);
        };
        PdfStreamWriter.prototype.closeFillStrokePath = function (useEvenOddRule) {
            this.stream.write(pdf_operators_1.Operators.closeFillStrokePath);
            if (useEvenOddRule) {
                this.stream.write(pdf_operators_1.Operators.evenOdd);
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
            else {
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfStreamWriter.prototype.fillStrokePath = function (useEvenOddRule) {
            this.stream.write(pdf_operators_1.Operators.fillStroke);
            if (useEvenOddRule) {
                this.stream.write(pdf_operators_1.Operators.evenOdd);
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
            else {
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfStreamWriter.prototype.fillPath = function (useEvenOddRule) {
            this.stream.write(pdf_operators_1.Operators.fill);
            if (useEvenOddRule) {
                this.stream.write(pdf_operators_1.Operators.evenOdd);
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
            else {
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfStreamWriter.prototype.endPath = function () {
            this.writeOperator(pdf_operators_1.Operators.n);
        };
        PdfStreamWriter.prototype.closeFillPath = function (useEvenOddRule) {
            this.writeOperator(pdf_operators_1.Operators.closePath);
            this.stream.write(pdf_operators_1.Operators.fill);
            if (useEvenOddRule) {
                this.stream.write(pdf_operators_1.Operators.evenOdd);
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
            else {
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfStreamWriter.prototype.closeStrokePath = function () {
            this.writeOperator(pdf_operators_1.Operators.closeStrokePath);
        };
        PdfStreamWriter.prototype.setTextScaling = function (textScaling) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(textScaling));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setTextScaling);
        };
        PdfStreamWriter.prototype.strokePath = function () {
            this.writeOperator(pdf_operators_1.Operators.stroke);
        };
        PdfStreamWriter.prototype.restoreGraphicsState = function () {
            this.writeOperator(pdf_operators_1.Operators.restoreState);
        };
        PdfStreamWriter.prototype.saveGraphicsState = function () {
            this.writeOperator(pdf_operators_1.Operators.saveState);
        };
        PdfStreamWriter.prototype.startNextLine = function (arg1, arg2) {
            if (typeof arg1 === 'undefined') {
                this.writeOperator(pdf_operators_1.Operators.goToNextLine);
            }
            else if (arg1 instanceof pdf_drawing_1.PointF) {
                this.writePoint(arg1);
                this.writeOperator(pdf_operators_1.Operators.setCoords);
            }
            else {
                this.writePoint(arg1, arg2);
                this.writeOperator(pdf_operators_1.Operators.setCoords);
            }
        };
        PdfStreamWriter.prototype.showText = function (text) {
            this.checkTextParam(text);
            this.writeText(text);
            this.writeOperator(pdf_operators_1.Operators.setText);
        };
        PdfStreamWriter.prototype.setLeading = function (leading) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(leading));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setTextLeading);
        };
        PdfStreamWriter.prototype.beginPath = function (x, y) {
            this.writePoint(x, y);
            this.writeOperator(pdf_operators_1.Operators.beginPath);
        };
        PdfStreamWriter.prototype.beginText = function () {
            this.writeOperator(pdf_operators_1.Operators.beginText);
        };
        PdfStreamWriter.prototype.endText = function () {
            this.writeOperator(pdf_operators_1.Operators.endText);
        };
        PdfStreamWriter.prototype.appendRectangle = function (arg1, arg2, arg3, arg4) {
            if (arg1 instanceof pdf_drawing_1.RectangleF) {
                this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height);
            }
            else {
                this.writePoint(arg1, arg2);
                this.writePoint(arg3, arg4);
                this.writeOperator(pdf_operators_1.Operators.appendRectangle);
            }
        };
        PdfStreamWriter.prototype.appendLineSegment = function (arg1, arg2) {
            if (arg1 instanceof pdf_drawing_1.PointF) {
                this.appendLineSegment(arg1.x, arg1.y);
            }
            else {
                this.writePoint(arg1, arg2);
                this.writeOperator(pdf_operators_1.Operators.appendLineSegment);
            }
        };
        PdfStreamWriter.prototype.setTextRenderingMode = function (renderingMode) {
            this.stream.write(renderingMode.toString());
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setRenderingMode);
        };
        PdfStreamWriter.prototype.setCharacterSpacing = function (charSpacing) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(charSpacing));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.stream.write(pdf_operators_1.Operators.setCharacterSpace);
            this.stream.write(pdf_operators_1.Operators.newLine);
        };
        PdfStreamWriter.prototype.setWordSpacing = function (wordSpacing) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(wordSpacing));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setWordSpace);
        };
        PdfStreamWriter.prototype.showNextLineText = function (arg1, arg2) {
            if (arg1 instanceof pdf_string_1.PdfString) {
                this.checkTextParam(arg1);
                this.writeText(arg1);
                this.writeOperator(pdf_operators_1.Operators.setTextOnNewLine);
            }
            else {
                this.checkTextParam(arg1);
                this.writeText(arg1, arg2);
                this.writeOperator(pdf_operators_1.Operators.setTextOnNewLine);
            }
        };
        PdfStreamWriter.prototype.setColorSpace = function (arg1, arg2) {
            if (arg1 instanceof pdf_name_1.PdfName && typeof arg2 === 'boolean') {
                var temparg1 = arg1;
                var temparg2 = arg2;
                var op = (temparg2) ? pdf_operators_1.Operators.selectcolorspaceforstroking : pdf_operators_1.Operators.selectcolorspacefornonstroking;
                this.stream.write(temparg1.toString());
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                this.stream.write(op);
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
            else {
                var temparg1 = arg1;
                var temparg2 = arg2;
                this.setColorSpace(new pdf_name_1.PdfName(temparg1), temparg2);
            }
        };
        PdfStreamWriter.prototype.modifyCtm = function (matrix) {
            if (matrix == null) {
                throw new Error('ArgumentNullException:matrix');
            }
            this.stream.write(matrix.toString());
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.modifyCtm);
        };
        PdfStreamWriter.prototype.setFont = function (font, name, size) {
            if (typeof name === 'string') {
                this.setFont(font, new pdf_name_1.PdfName(name), size);
            }
            else {
                if (font == null) {
                    throw new Error('ArgumentNullException:font');
                }
                this.stream.write(name.toString());
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                this.stream.write(pdf_number_1.PdfNumber.floatToString(size));
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                this.writeOperator(pdf_operators_1.Operators.setFont);
            }
        };
        PdfStreamWriter.prototype.writeOperator = function (opcode) {
            this.stream.write(opcode);
            this.stream.write(pdf_operators_1.Operators.newLine);
        };
        PdfStreamWriter.prototype.checkTextParam = function (text) {
            if (text == null) {
                throw new Error('ArgumentNullException:text');
            }
            if (typeof text === 'string' && text === '') {
                throw new Error('ArgumentException:The text can not be an empty string, text');
            }
        };
        PdfStreamWriter.prototype.writeText = function (arg1, arg2) {
            if ((arg1 instanceof pdf_string_1.PdfString) && (typeof arg2 === 'undefined')) {
                this.stream.write(arg1.pdfEncode());
            }
            else {
                var start = void 0;
                var end = void 0;
                if (arg2) {
                    start = pdf_string_1.PdfString.hexStringMark[0];
                    end = pdf_string_1.PdfString.hexStringMark[1];
                }
                else {
                    start = pdf_string_1.PdfString.stringMark[0];
                    end = pdf_string_1.PdfString.stringMark[1];
                }
                this.stream.write(start);
                this.stream.write(arg1);
                this.stream.write(end);
            }
        };
        PdfStreamWriter.prototype.writePoint = function (arg1, arg2) {
            if ((arg1 instanceof pdf_drawing_1.PointF) && (typeof arg2 === 'undefined')) {
                this.writePoint(arg1.x, arg1.y);
            }
            else {
                var temparg1 = arg1;
                this.stream.write(pdf_number_1.PdfNumber.floatToString(temparg1));
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
                arg2 = this.updateY(arg2);
                this.stream.write(pdf_number_1.PdfNumber.floatToString(arg2));
                this.stream.write(pdf_operators_1.Operators.whiteSpace);
            }
        };
        PdfStreamWriter.prototype.updateY = function (arg) {
            return -arg;
        };
        PdfStreamWriter.prototype.write = function (string) {
            var builder = '';
            builder += string;
            builder += pdf_operators_1.Operators.newLine;
            this.writeOperator(builder);
        };
        PdfStreamWriter.prototype.writeComment = function (comment) {
            if (comment != null && comment.length > 0) {
                var builder = '';
                builder += pdf_operators_1.Operators.comment;
                builder += pdf_operators_1.Operators.whiteSpace;
                builder += comment;
                this.writeOperator(builder);
            }
            else {
                throw new Error('Invalid comment');
            }
        };
        PdfStreamWriter.prototype.setColorAndSpace = function (color, colorSpace, forStroking) {
            if (!color.isEmpty) {
                this.stream.write(color.toString(colorSpace, forStroking));
                this.stream.write(pdf_operators_1.Operators.newLine);
            }
        };
        PdfStreamWriter.prototype.setLineDashPattern = function (pattern, patternOffset) {
            this.setLineDashPatternHelper(pattern, patternOffset);
        };
        PdfStreamWriter.prototype.setLineDashPatternHelper = function (pattern, patternOffset) {
            var tempPattern = '[';
            if (pattern.length > 1) {
                for (var index = 0; index < pattern.length; index++) {
                    if (index === pattern.length - 1) {
                        tempPattern += pattern[index].toString();
                    }
                    else {
                        tempPattern += pattern[index].toString() + ' ';
                    }
                }
            }
            tempPattern += '] ';
            tempPattern += patternOffset.toString();
            tempPattern += ' ' + pdf_operators_1.Operators.setDashPattern;
            this.stream.write(tempPattern);
            this.stream.write(pdf_operators_1.Operators.newLine);
        };
        PdfStreamWriter.prototype.setMiterLimit = function (miterLimit) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(miterLimit));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setMiterLimit);
        };
        PdfStreamWriter.prototype.setLineWidth = function (width) {
            this.stream.write(pdf_number_1.PdfNumber.floatToString(width));
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setLineWidth);
        };
        PdfStreamWriter.prototype.setLineCap = function (lineCapStyle) {
            this.stream.write((lineCapStyle).toString());
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setLineCapStyle);
        };
        PdfStreamWriter.prototype.setLineJoin = function (lineJoinStyle) {
            this.stream.write((lineJoinStyle).toString());
            this.stream.write(pdf_operators_1.Operators.whiteSpace);
            this.writeOperator(pdf_operators_1.Operators.setLineJoinStyle);
        };
        Object.defineProperty(PdfStreamWriter.prototype, "position", {
            get: function () {
                return this.stream.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStreamWriter.prototype, "length", {
            get: function () {
                var returnValue = 0;
                if (this.stream.data.length !== 0 && this.stream.data.length !== -1) {
                    for (var index = 0; index < this.stream.data.length; index++) {
                        returnValue += this.stream.data[index].length;
                    }
                }
                return returnValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfStreamWriter.prototype, "document", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return PdfStreamWriter;
    }());
    exports.PdfStreamWriter = PdfStreamWriter;
});
