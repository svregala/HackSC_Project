define(["require", "exports", "@syncfusion/ej2-file-utils", "@syncfusion/ej2-file-utils", "./pdf-document"], function (require, exports, ej2_file_utils_1, ej2_file_utils_2, pdf_document_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfDocumentBase = (function () {
        function PdfDocumentBase(document) {
            this.isStreamCopied = false;
            if (document instanceof pdf_document_1.PdfDocument) {
                this.document = document;
            }
        }
        Object.defineProperty(PdfDocumentBase.prototype, "pdfObjects", {
            get: function () {
                return this.objects;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDocumentBase.prototype, "crossTable", {
            get: function () {
                return this.pdfCrossTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDocumentBase.prototype, "currentSavingObj", {
            get: function () {
                return this.currentSavingObject;
            },
            set: function (value) {
                this.currentSavingObject = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PdfDocumentBase.prototype, "catalog", {
            get: function () {
                return this.pdfCatalog;
            },
            set: function (value) {
                this.pdfCatalog = value;
            },
            enumerable: true,
            configurable: true
        });
        PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {
            this.objects = mainObjectCollection;
        };
        PdfDocumentBase.prototype.setCrossTable = function (cTable) {
            this.pdfCrossTable = cTable;
        };
        PdfDocumentBase.prototype.setCatalog = function (catalog) {
            this.pdfCatalog = catalog;
        };
        PdfDocumentBase.prototype.save = function (filename) {
            var _this = this;
            var encoding = new ej2_file_utils_2.Encoding(true);
            var SW = new ej2_file_utils_1.StreamWriter(encoding);
            if (typeof filename === 'undefined') {
                var encoding_1 = new ej2_file_utils_2.Encoding(true);
                var SW_1 = new ej2_file_utils_1.StreamWriter(encoding_1);
                return new Promise(function (resolve, reject) {
                    var obj = {};
                    obj.blobData = new Blob([_this.document.docSave(SW_1, true)], { type: 'application/pdf' });
                    resolve(obj);
                });
            }
            else {
                this.document.docSave(SW, filename, true);
            }
        };
        PdfDocumentBase.prototype.clone = function () {
            return this.document;
        };
        return PdfDocumentBase;
    }());
    exports.PdfDocumentBase = PdfDocumentBase;
});
