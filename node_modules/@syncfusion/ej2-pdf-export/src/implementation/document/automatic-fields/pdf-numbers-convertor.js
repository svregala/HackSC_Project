define(["require", "exports", "./../../pages/enum"], function (require, exports, enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PdfNumbersConvertor = (function () {
        function PdfNumbersConvertor() {
        }
        PdfNumbersConvertor.convert = function (intArabic, numberStyle) {
            var result = '';
            switch (numberStyle) {
                case enum_1.PdfNumberStyle.None:
                    result = '';
                    break;
                case enum_1.PdfNumberStyle.Numeric:
                    result = intArabic.toString();
                    break;
                case enum_1.PdfNumberStyle.LowerLatin:
                    result = this.arabicToLetter(intArabic).toLowerCase();
                    break;
                case enum_1.PdfNumberStyle.LowerRoman:
                    result = this.arabicToRoman(intArabic).toLowerCase();
                    break;
                case enum_1.PdfNumberStyle.UpperLatin:
                    result = this.arabicToLetter(intArabic);
                    break;
                case enum_1.PdfNumberStyle.UpperRoman:
                    result = this.arabicToRoman(intArabic);
                    break;
            }
            return result;
        };
        PdfNumbersConvertor.arabicToRoman = function (intArabic) {
            var retval = '';
            retval += this.generateNumber(intArabic, 1000, 'M');
            retval += this.generateNumber(intArabic, 900, 'CM');
            retval += this.generateNumber(intArabic, 500, 'D');
            retval += this.generateNumber(intArabic, 400, 'CD');
            retval += this.generateNumber(intArabic, 100, 'C');
            retval += this.generateNumber(intArabic, 90, 'XC');
            retval += this.generateNumber(intArabic, 50, 'L');
            retval += this.generateNumber(intArabic, 40, 'XL');
            retval += this.generateNumber(intArabic, 10, 'X');
            retval += this.generateNumber(intArabic, 9, 'IX');
            retval += this.generateNumber(intArabic, 5, 'V');
            retval += this.generateNumber(intArabic, 4, 'IV');
            retval += this.generateNumber(intArabic, 1, 'I');
            return retval.toString();
        };
        PdfNumbersConvertor.arabicToLetter = function (arabic) {
            var stack = this.convertToLetter(arabic);
            var result = '';
            while (stack.length > 0) {
                var num = stack.pop();
                result = this.appendChar(result, num);
            }
            return result.toString();
        };
        PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {
            var numberstring = '';
            while (value >= magnitude) {
                value -= magnitude;
                numberstring += letter;
            }
            return numberstring.toString();
        };
        PdfNumbersConvertor.convertToLetter = function (arabic) {
            if (arabic <= 0) {
                throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');
            }
            var stack = [];
            while (arabic > this.letterLimit) {
                var remainder = arabic % this.letterLimit;
                if (remainder === 0.0) {
                    arabic = arabic / this.letterLimit - 1;
                    remainder = this.letterLimit;
                }
                else {
                    arabic /= this.letterLimit;
                }
                stack.push(remainder);
            }
            stack.push(arabic);
            return stack;
        };
        PdfNumbersConvertor.appendChar = function (builder, value) {
            var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);
            builder += letter;
            return builder;
        };
        PdfNumbersConvertor.letterLimit = 26.0;
        PdfNumbersConvertor.acsiiStartIndex = (65 - 1);
        return PdfNumbersConvertor;
    }());
    exports.PdfNumbersConvertor = PdfNumbersConvertor;
});
