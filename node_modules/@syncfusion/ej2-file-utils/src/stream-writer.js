define(["require", "exports", "./encoding", "./save"], function (require, exports, encoding_1, save_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StreamWriter = (function () {
        function StreamWriter(encoding) {
            this.bufferBlob = new Blob(['']);
            this.bufferText = '';
            this.init(encoding);
            save_1.Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);
        }
        Object.defineProperty(StreamWriter.prototype, "buffer", {
            get: function () {
                this.flush();
                return this.bufferBlob;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StreamWriter.prototype, "encoding", {
            get: function () {
                return this.enc;
            },
            enumerable: true,
            configurable: true
        });
        StreamWriter.prototype.init = function (encoding) {
            if (encoding === null || encoding === undefined) {
                this.enc = new encoding_1.Encoding(false);
                this.enc.type = 'Utf8';
            }
            else {
                this.enc = encoding;
                this.setBomByte();
            }
        };
        StreamWriter.prototype.setBomByte = function () {
            if (this.encoding.includeBom) {
                switch (this.encoding.type) {
                    case 'Unicode':
                        var arrayUnicode = new ArrayBuffer(2);
                        var uint8 = new Uint8Array(arrayUnicode);
                        uint8[0] = 255;
                        uint8[1] = 254;
                        this.bufferBlob = new Blob([arrayUnicode]);
                        break;
                    case 'Utf8':
                        var arrayUtf8 = new ArrayBuffer(3);
                        var utf8 = new Uint8Array(arrayUtf8);
                        utf8[0] = 239;
                        utf8[1] = 187;
                        utf8[2] = 191;
                        this.bufferBlob = new Blob([arrayUtf8]);
                        break;
                    default:
                        this.bufferBlob = new Blob(['']);
                        break;
                }
            }
        };
        StreamWriter.prototype.save = function (fileName) {
            if (this.bufferText !== '') {
                this.flush();
            }
            save_1.Save.save(fileName, this.buffer);
        };
        StreamWriter.prototype.write = function (value) {
            if (this.encoding === undefined) {
                throw new Error('Object Disposed Exception: current writer is disposed');
            }
            encoding_1.validateNullOrUndefined(value, 'string');
            this.bufferText += value;
            if (this.bufferText.length >= 10240) {
                this.flush();
            }
        };
        StreamWriter.prototype.flush = function () {
            if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {
                return;
            }
            var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
            this.bufferText = '';
            this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);
        };
        StreamWriter.prototype.writeLine = function (value) {
            if (this.encoding === undefined) {
                throw new Error('Object Disposed Exception: current writer is disposed');
            }
            encoding_1.validateNullOrUndefined(value, 'string');
            this.bufferText = this.bufferText + value + '\r\n';
            if (this.bufferText.length >= 10240) {
                this.flush();
            }
        };
        StreamWriter.prototype.destroy = function () {
            this.bufferBlob = undefined;
            this.bufferText = undefined;
            if (this.enc instanceof encoding_1.Encoding) {
                this.enc.destroy();
            }
            this.enc = undefined;
        };
        return StreamWriter;
    }());
    exports.StreamWriter = StreamWriter;
});
