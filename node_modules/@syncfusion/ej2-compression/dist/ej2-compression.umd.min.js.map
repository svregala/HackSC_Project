{"version":3,"file":"ej2-compression.umd.min.js","sources":["src/es5/compression-writer.js","src/es5/zip-archive.js"],"sourcesContent":["import { Encoding } from '@syncfusion/ej2-file-utils';\n/**\n * array literal codes\n */\nvar arrLiteralCodes = new Int16Array(286);\nvar arrLiteralLengths = new Uint8Array(286);\nvar arrDistanceCodes = new Int16Array(30);\nvar arrDistanceLengths = new Uint8Array(30);\n/**\n * represent compression stream writer\n * ```typescript\n * let compressedWriter = new CompressedStreamWriter();\n * let text: string = 'Hello world!!!';\n * compressedWriter.write(text, 0, text.length);\n * compressedWriter.close();\n * ```\n */\nvar CompressedStreamWriter = /** @class */ (function () {\n    /**\n     * Initializes compressor and writes ZLib header if needed.\n     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.\n     */\n    function CompressedStreamWriter(noWrap) {\n        this.pendingBuffer = new Uint8Array(1 << 16);\n        this.pendingBufLength = 0;\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.currentHash = 0;\n        this.matchStart = 0;\n        this.matchLength = 0;\n        this.matchPrevAvail = false;\n        this.blockStart = 0;\n        this.stringStart = 0;\n        this.lookAhead = 0;\n        this.totalBytesIn = 0;\n        this.inputOffset = 0;\n        this.inputEnd = 0;\n        this.windowSize = 1 << 15;\n        this.windowMask = this.windowSize - 1;\n        this.hashSize = 1 << 15;\n        this.hashMask = this.hashSize - 1;\n        this.hashShift = Math.floor((15 + 3 - 1) / 3);\n        this.maxDist = this.windowSize - 262;\n        this.checkSum = 1;\n        this.noWrap = false;\n        this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);\n        this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);\n        this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);\n        this.arrDistances = new Uint16Array((1 << 14));\n        this.arrLiterals = new Uint8Array((1 << 14));\n        this.stream = [];\n        this.dataWindow = new Uint8Array(2 * this.windowSize);\n        this.hashHead = new Int16Array(this.hashSize);\n        this.hashPrevious = new Int16Array(this.windowSize);\n        this.blockStart = this.stringStart = 1;\n        this.noWrap = noWrap;\n        if (!noWrap) {\n            this.writeZLibHeader();\n        }\n    }\n    Object.defineProperty(CompressedStreamWriter.prototype, \"compressedData\", {\n        /**\n         * get compressed data\n         */\n        get: function () {\n            return this.stream;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressedStreamWriter.prototype, \"getCompressedString\", {\n        get: function () {\n            var compressedString = '';\n            if (this.stream !== undefined) {\n                for (var i = 0; i < this.stream.length; i++) {\n                    compressedString += String.fromCharCode.apply(null, this.stream[i]);\n                }\n            }\n            return compressedString;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Compresses data and writes it to the stream.\n     * @param {Uint8Array} data - data to compress\n     * @param {number} offset - offset in data\n     * @param {number} length - length of the data\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.write = function (data, offset, length) {\n        if (data === undefined || data === null) {\n            throw new Error('ArgumentException: data cannot null or undefined');\n        }\n        var end = offset + length;\n        if (0 > offset || offset > end || end > data.length) {\n            throw new Error('ArgumentOutOfRangeException: Offset or length is incorrect');\n        }\n        if (typeof data === 'string') {\n            var encode = new Encoding(false);\n            encode.type = 'Utf8';\n            data = new Uint8Array(encode.getBytes(data, 0, data.length));\n            end = offset + data.length;\n        }\n        this.inputBuffer = data;\n        this.inputOffset = offset;\n        this.inputEnd = end;\n        if (!this.noWrap) {\n            this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);\n        }\n        while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {\n            this.pendingBufferFlush();\n            this.compressData(false);\n        }\n    };\n    /**\n     * write ZLib header to the compressed data\n     * @return {void}\n     */\n    CompressedStreamWriter.prototype.writeZLibHeader = function () {\n        /* Initialize header.*/\n        var headerDate = (8 + (7 << 4)) << 8;\n        /* Save compression level.*/\n        headerDate |= ((5 >> 2) & 3) << 6;\n        /* Align header.*/\n        headerDate += 31 - (headerDate % 31);\n        /* Write header to stream.*/\n        this.pendingBufferWriteShortBytes(headerDate);\n    };\n    /**\n     *  Write Most Significant Bytes in to stream\n     * @param {number} s - check sum value\n     */\n    CompressedStreamWriter.prototype.pendingBufferWriteShortBytes = function (s) {\n        this.pendingBuffer[this.pendingBufLength++] = s >> 8;\n        this.pendingBuffer[this.pendingBufLength++] = s;\n    };\n    CompressedStreamWriter.prototype.compressData = function (finish) {\n        var success;\n        do {\n            this.fillWindow();\n            var canFlush = (finish && this.inputEnd === this.inputOffset);\n            success = this.compressSlow(canFlush, finish);\n        } while (this.pendingBufLength === 0 && success);\n        return success;\n    };\n    CompressedStreamWriter.prototype.compressSlow = function (flush, finish) {\n        if (this.lookAhead < 262 && !flush) {\n            return false;\n        }\n        while (this.lookAhead >= 262 || flush) {\n            if (this.lookAhead === 0) {\n                return this.lookAheadCompleted(finish);\n            }\n            if (this.stringStart >= 2 * this.windowSize - 262) {\n                this.slideWindow();\n            }\n            var prevMatch = this.matchStart;\n            var prevLen = this.matchLength;\n            if (this.lookAhead >= 3) {\n                this.discardMatch();\n            }\n            if (prevLen >= 3 && this.matchLength <= prevLen) {\n                prevLen = this.matchPreviousBest(prevMatch, prevLen);\n            }\n            else {\n                this.matchPreviousAvailable();\n            }\n            if (this.bufferPosition >= (1 << 14)) {\n                return this.huffmanIsFull(finish);\n            }\n        }\n        return true;\n    };\n    CompressedStreamWriter.prototype.discardMatch = function () {\n        var hashHead = this.insertString();\n        if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {\n            if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {\n                this.matchLength = 3 - 1;\n            }\n        }\n    };\n    CompressedStreamWriter.prototype.matchPreviousAvailable = function () {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = true;\n        this.stringStart++;\n        this.lookAhead--;\n    };\n    CompressedStreamWriter.prototype.matchPreviousBest = function (prevMatch, prevLen) {\n        this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);\n        prevLen -= 2;\n        do {\n            this.stringStart++;\n            this.lookAhead--;\n            if (this.lookAhead >= 3) {\n                this.insertString();\n            }\n        } while (--prevLen > 0);\n        this.stringStart++;\n        this.lookAhead--;\n        this.matchPrevAvail = false;\n        this.matchLength = 3 - 1;\n        return prevLen;\n    };\n    CompressedStreamWriter.prototype.lookAheadCompleted = function (finish) {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = false;\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);\n        this.blockStart = this.stringStart;\n        return false;\n    };\n    CompressedStreamWriter.prototype.huffmanIsFull = function (finish) {\n        var len = this.stringStart - this.blockStart;\n        if (this.matchPrevAvail) {\n            len--;\n        }\n        var lastBlock = (finish && this.lookAhead === 0 && !this.matchPrevAvail);\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);\n        this.blockStart += len;\n        return !lastBlock;\n    };\n    CompressedStreamWriter.prototype.fillWindow = function () {\n        if (this.stringStart >= this.windowSize + this.maxDist) {\n            this.slideWindow();\n        }\n        while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {\n            var more = 2 * this.windowSize - this.lookAhead - this.stringStart;\n            if (more > this.inputEnd - this.inputOffset) {\n                more = this.inputEnd - this.inputOffset;\n            }\n            this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);\n            this.inputOffset += more;\n            this.totalBytesIn += more;\n            this.lookAhead += more;\n        }\n        if (this.lookAhead >= 3) {\n            this.updateHash();\n        }\n    };\n    CompressedStreamWriter.prototype.slideWindow = function () {\n        this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);\n        this.matchStart -= this.windowSize;\n        this.stringStart -= this.windowSize;\n        this.blockStart -= this.windowSize;\n        for (var i = 0; i < this.hashSize; ++i) {\n            var m = this.hashHead[i] & 0xffff;\n            this.hashHead[i] = (((m >= this.windowSize) ? (m - this.windowSize) : 0));\n        }\n        for (var i = 0; i < this.windowSize; i++) {\n            var m = this.hashPrevious[i] & 0xffff;\n            this.hashPrevious[i] = ((m >= this.windowSize) ? (m - this.windowSize) : 0);\n        }\n    };\n    CompressedStreamWriter.prototype.insertString = function () {\n        var match;\n        var hash = ((this.currentHash << this.hashShift) ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;\n        this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];\n        this.hashHead[hash] = this.stringStart;\n        this.currentHash = hash;\n        return match & 0xffff;\n    };\n    CompressedStreamWriter.prototype.findLongestMatch = function (curMatch) {\n        var chainLen = 4096;\n        var niceLen = 258;\n        var scan = this.stringStart;\n        var match;\n        var bestEnd = this.stringStart + this.matchLength;\n        var bestLength = Math.max(this.matchLength, 3 - 1);\n        var limit = Math.max(this.stringStart - this.maxDist, 0);\n        var stringEnd = this.stringStart + 258 - 1;\n        var scanEnd1 = this.dataWindow[bestEnd - 1];\n        var scanEnd = this.dataWindow[bestEnd];\n        var data = this.dataWindow;\n        if (bestLength >= 32) {\n            chainLen >>= 2;\n        }\n        if (niceLen > this.lookAhead) {\n            niceLen = this.lookAhead;\n        }\n        do {\n            if (data[curMatch + bestLength] !== scanEnd ||\n                data[curMatch + bestLength - 1] !== scanEnd1 ||\n                data[curMatch] !== data[scan] ||\n                data[curMatch + 1] !== data[scan + 1]) {\n                continue;\n            }\n            match = curMatch + 2;\n            scan += 2;\n            /* tslint:disable */\n            while (data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {\n                /* tslint:disable */\n            }\n            if (scan > bestEnd) {\n                this.matchStart = curMatch;\n                bestEnd = scan;\n                bestLength = scan - this.stringStart;\n                if (bestLength >= niceLen) {\n                    break;\n                }\n                scanEnd1 = data[bestEnd - 1];\n                scanEnd = data[bestEnd];\n            }\n            scan = this.stringStart;\n        } while ((curMatch = (this.hashPrevious[curMatch & this.windowMask] & 0xffff)) > limit && --chainLen !== 0);\n        this.matchLength = Math.min(bestLength, this.lookAhead);\n        return this.matchLength >= 3;\n    };\n    CompressedStreamWriter.prototype.updateHash = function () {\n        this.currentHash = (this.dataWindow[this.stringStart] << this.hashShift) ^ this.dataWindow[this.stringStart + 1];\n    };\n    CompressedStreamWriter.prototype.huffmanTallyLit = function (literal) {\n        this.arrDistances[this.bufferPosition] = 0;\n        this.arrLiterals[this.bufferPosition++] = literal;\n        this.treeLiteral.codeFrequencies[literal]++;\n        return this.bufferPosition >= (1 << 14);\n    };\n    CompressedStreamWriter.prototype.huffmanTallyDist = function (dist, len) {\n        this.arrDistances[this.bufferPosition] = dist;\n        this.arrLiterals[this.bufferPosition++] = (len - 3);\n        var lc = this.huffmanLengthCode(len - 3);\n        this.treeLiteral.codeFrequencies[lc]++;\n        if (lc >= 265 && lc < 285) {\n            this.extraBits += Math.floor((lc - 261) / 4);\n        }\n        var dc = this.huffmanDistanceCode(dist - 1);\n        this.treeDistances.codeFrequencies[dc]++;\n        if (dc >= 4) {\n            this.extraBits += Math.floor((dc / 2 - 1));\n        }\n        return this.bufferPosition >= (1 << 14);\n    };\n    CompressedStreamWriter.prototype.huffmanFlushBlock = function (stored, storedOffset, storedLength, lastBlock) {\n        this.treeLiteral.codeFrequencies[256]++;\n        this.treeLiteral.buildTree();\n        this.treeDistances.buildTree();\n        this.treeLiteral.calculateBLFreq(this.treeCodeLengths);\n        this.treeDistances.calculateBLFreq(this.treeCodeLengths);\n        this.treeCodeLengths.buildTree();\n        var blTreeCodes = 4;\n        for (var i = 18; i > blTreeCodes; i--) {\n            if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {\n                blTreeCodes = i + 1;\n            }\n        }\n        var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() +\n            this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;\n        var static_len = this.extraBits;\n        for (var i = 0; i < 286; i++) {\n            static_len += this.treeLiteral.codeFrequencies[i] * arrLiteralLengths[i];\n        }\n        for (var i = 0; i < 30; i++) {\n            static_len += this.treeDistances.codeFrequencies[i] * arrDistanceLengths[i];\n        }\n        if (opt_len >= static_len) {\n            // Force static trees.\n            opt_len = static_len;\n        }\n        if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {\n            this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);\n        }\n        else if (opt_len == static_len) {\n            // Encode with static tree.\n            this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);\n            this.treeLiteral.setStaticCodes(arrLiteralCodes, arrLiteralLengths);\n            this.treeDistances.setStaticCodes(arrDistanceCodes, arrDistanceLengths);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n        else {\n            this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);\n            this.huffmanSendAllTrees(blTreeCodes);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n    };\n    CompressedStreamWriter.prototype.huffmanFlushStoredBlock = function (stored, storedOffset, storedLength, lastBlock) {\n        this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);\n        this.pendingBufferAlignToByte();\n        this.pendingBufferWriteShort(storedLength);\n        this.pendingBufferWriteShort(~storedLength);\n        this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);\n        this.huffmanReset();\n    };\n    CompressedStreamWriter.prototype.huffmanLengthCode = function (len) {\n        if (len === 255) {\n            return 285;\n        }\n        var code = 257;\n        while (len >= 8) {\n            code += 4;\n            len >>= 1;\n        }\n        return code + len;\n    };\n    CompressedStreamWriter.prototype.huffmanDistanceCode = function (distance) {\n        var code = 0;\n        while (distance >= 4) {\n            code += 2;\n            distance >>= 1;\n        }\n        return code + distance;\n    };\n    CompressedStreamWriter.prototype.huffmanSendAllTrees = function (blTreeCodes) {\n        this.treeCodeLengths.buildCodes();\n        this.treeLiteral.buildCodes();\n        this.treeDistances.buildCodes();\n        this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);\n        this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);\n        this.pendingBufferWriteBits(blTreeCodes - 4, 4);\n        for (var rank = 0; rank < blTreeCodes; rank++) {\n            this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);\n        }\n        this.treeLiteral.writeTree(this.treeCodeLengths);\n        this.treeDistances.writeTree(this.treeCodeLengths);\n    };\n    CompressedStreamWriter.prototype.huffmanReset = function () {\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.treeLiteral.reset();\n        this.treeDistances.reset();\n        this.treeCodeLengths.reset();\n    };\n    CompressedStreamWriter.prototype.huffmanCompressBlock = function () {\n        for (var i = 0; i < this.bufferPosition; i++) {\n            var literalLen = this.arrLiterals[i] & 255;\n            var dist = this.arrDistances[i];\n            if (dist-- !== 0) {\n                var lc = this.huffmanLengthCode(literalLen);\n                this.treeLiteral.writeCodeToStream(lc);\n                var bits = Math.floor((lc - 261) / 4);\n                if (bits > 0 && bits <= 5) {\n                    this.pendingBufferWriteBits(literalLen & ((1 << bits) - 1), bits);\n                }\n                var dc = this.huffmanDistanceCode(dist);\n                this.treeDistances.writeCodeToStream(dc);\n                bits = Math.floor(dc / 2 - 1);\n                if (bits > 0) {\n                    this.pendingBufferWriteBits(dist & ((1 << bits) - 1), bits);\n                }\n            }\n            else {\n                this.treeLiteral.writeCodeToStream(literalLen);\n            }\n        }\n        this.treeLiteral.writeCodeToStream(256);\n    };\n    /**\n     * write bits in to internal buffer\n     * @param {number} b - source of bits\n     * @param {number} count - count of bits to write\n     */\n    CompressedStreamWriter.prototype.pendingBufferWriteBits = function (b, count) {\n        var uint = new Uint32Array(1);\n        uint[0] = this.pendingBufCache | (b << this.pendingBufBitsInCache);\n        this.pendingBufCache = uint[0];\n        this.pendingBufBitsInCache += count;\n        this.pendingBufferFlushBits();\n    };\n    CompressedStreamWriter.prototype.pendingBufferFlush = function (isClose) {\n        this.pendingBufferFlushBits();\n        if (this.pendingBufLength > 0) {\n            var array = new Uint8Array(this.pendingBufLength);\n            array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);\n            this.stream.push(array);\n        }\n        this.pendingBufLength = 0;\n    };\n    CompressedStreamWriter.prototype.pendingBufferFlushBits = function () {\n        var result = 0;\n        while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < (1 << 16)) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n            this.pendingBufCache >>= 8;\n            this.pendingBufBitsInCache -= 8;\n            result++;\n        }\n        return result;\n    };\n    CompressedStreamWriter.prototype.pendingBufferWriteByteBlock = function (data, offset, length) {\n        var array = data.subarray(offset, offset + length);\n        this.pendingBuffer.set(array, this.pendingBufLength);\n        this.pendingBufLength += length;\n    };\n    CompressedStreamWriter.prototype.pendingBufferWriteShort = function (s) {\n        this.pendingBuffer[this.pendingBufLength++] = s;\n        this.pendingBuffer[this.pendingBufLength++] = (s >> 8);\n    };\n    CompressedStreamWriter.prototype.pendingBufferAlignToByte = function () {\n        if (this.pendingBufBitsInCache > 0) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n        }\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n    };\n    /**\n     * close the stream and write all pending buffer in to stream\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.close = function () {\n        do {\n            this.pendingBufferFlush(true);\n            if (!this.compressData(true)) {\n                this.pendingBufferFlush(true);\n                this.pendingBufferAlignToByte();\n                if (!this.noWrap) {\n                    this.pendingBufferWriteShortBytes(this.checkSum >> 16);\n                    this.pendingBufferWriteShortBytes(this.checkSum & 0xffff);\n                }\n                this.pendingBufferFlush(true);\n            }\n        } while (!(this.inputEnd === this.inputOffset) ||\n            !(this.pendingBufLength === 0));\n    };\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.destroy = function () {\n        this.stream = [];\n        this.stream = undefined;\n        this.pendingBuffer = undefined;\n        this.treeLiteral = undefined;\n        this.treeDistances = undefined;\n        this.treeCodeLengths = undefined;\n        this.arrLiterals = undefined;\n        this.arrDistances = undefined;\n        this.hashHead = undefined;\n        this.hashPrevious = undefined;\n        this.dataWindow = undefined;\n        this.inputBuffer = undefined;\n        this.pendingBufLength = undefined;\n        this.pendingBufCache = undefined;\n        this.pendingBufBitsInCache = undefined;\n        this.bufferPosition = undefined;\n        this.extraBits = undefined;\n        this.currentHash = undefined;\n        this.matchStart = undefined;\n        this.matchLength = undefined;\n        this.matchPrevAvail = undefined;\n        this.blockStart = undefined;\n        this.stringStart = undefined;\n        this.lookAhead = undefined;\n        this.totalBytesIn = undefined;\n        this.inputOffset = undefined;\n        this.inputEnd = undefined;\n        this.windowSize = undefined;\n        this.windowMask = undefined;\n        this.hashSize = undefined;\n        this.hashMask = undefined;\n        this.hashShift = undefined;\n        this.maxDist = undefined;\n        this.checkSum = undefined;\n        this.noWrap = undefined;\n    };\n    return CompressedStreamWriter;\n}());\nexport { CompressedStreamWriter };\n/**\n * represent the Huffman Tree\n */\nvar CompressorHuffmanTree = /** @class */ (function () {\n    /**\n     * Create new Huffman Tree\n     * @param {CompressedStreamWriter} writer instance\n     * @param {number} elementCount - element count\n     * @param {number} minCodes - minimum count\n     * @param {number} maxLength - maximum count\n     */\n    function CompressorHuffmanTree(writer, elementCount, minCodes, maxLength) {\n        this.writer = writer;\n        this.codeMinCount = minCodes;\n        this.maxLength = maxLength;\n        this.codeFrequency = new Uint16Array(elementCount);\n        this.lengthCount = new Int32Array(maxLength);\n    }\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"treeLength\", {\n        get: function () {\n            return this.codeCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"codeLengths\", {\n        get: function () {\n            return this.codeLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"codeFrequencies\", {\n        get: function () {\n            return this.codeFrequency;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompressorHuffmanTree.prototype.setStaticCodes = function (codes, lengths) {\n        var temp = new Int16Array(codes.length);\n        temp.set(codes, 0);\n        this.codes = temp;\n        var lengthTemp = new Uint8Array(lengths.length);\n        lengthTemp.set(lengths, 0);\n        this.codeLength = lengthTemp;\n    };\n    /**\n     * reset all code data in tree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.reset = function () {\n        for (var i = 0; i < this.codeFrequency.length; i++) {\n            this.codeFrequency[i] = 0;\n        }\n        this.codes = undefined;\n        this.codeLength = undefined;\n    };\n    /**\n     * write code to the compressor output stream\n     * @param {number} code - code to be written\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.writeCodeToStream = function (code) {\n        this.writer.pendingBufferWriteBits(this.codes[code] & 0xffff, this.codeLength[code]);\n    };\n    /**\n     * calculate code from their frequencies\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.buildCodes = function () {\n        var nextCode = new Int32Array(this.maxLength);\n        this.codes = new Int16Array(this.codeCount);\n        var code = 0;\n        for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {\n            nextCode[bitsCount] = code;\n            code += this.lengthCount[bitsCount] << (15 - bitsCount);\n        }\n        for (var i = 0; i < this.codeCount; i++) {\n            var bits = this.codeLength[i];\n            if (bits > 0) {\n                this.codes[i] = CompressorHuffmanTree.bitReverse(nextCode[bits - 1]);\n                nextCode[bits - 1] += 1 << (16 - bits);\n            }\n        }\n    };\n    CompressorHuffmanTree.bitReverse = function (value) {\n        return (CompressorHuffmanTree.reverseBits[value & 15] << 12\n            | CompressorHuffmanTree.reverseBits[(value >> 4) & 15] << 8\n            | CompressorHuffmanTree.reverseBits[(value >> 8) & 15] << 4\n            | CompressorHuffmanTree.reverseBits[value >> 12]);\n    };\n    /**\n     * calculate length of compressed data\n     * @returns {number}\n     */\n    CompressorHuffmanTree.prototype.getEncodedLength = function () {\n        var len = 0;\n        for (var i = 0; i < this.codeFrequency.length; i++) {\n            len += this.codeFrequency[i] * this.codeLength[i];\n        }\n        return len;\n    };\n    /**\n     * calculate code frequencies\n     * @param {CompressorHuffmanTree} blTree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.calculateBLFreq = function (blTree) {\n        var maxCount;\n        var minCount;\n        var count;\n        var curLen = -1;\n        var i = 0;\n        while (i < this.codeCount) {\n            count = 1;\n            var nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxCount = 138;\n                minCount = 3;\n            }\n            else {\n                maxCount = 6;\n                minCount = 3;\n                if (curLen !== nextLen) {\n                    blTree.codeFrequency[nextLen]++;\n                    count = 0;\n                }\n            }\n            curLen = nextLen;\n            i++;\n            while (i < this.codeCount && curLen === this.codeLength[i]) {\n                i++;\n                if (++count >= maxCount) {\n                    break;\n                }\n            }\n            if (count < minCount) {\n                blTree.codeFrequency[curLen] += count;\n            }\n            else if (curLen !== 0) {\n                blTree.codeFrequency[16]++;\n            }\n            else if (count <= 10) {\n                blTree.codeFrequency[17]++;\n            }\n            else {\n                blTree.codeFrequency[18]++;\n            }\n        }\n    };\n    /**\n     * @param {CompressorHuffmanTree} blTree - write tree to output stream\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.writeTree = function (blTree) {\n        var maxRepeatCount;\n        var minRepeatCount;\n        var currentRepeatCount;\n        var currentCodeLength = -1;\n        var i = 0;\n        while (i < this.codeCount) {\n            currentRepeatCount = 1;\n            var nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxRepeatCount = 138;\n                minRepeatCount = 3;\n            }\n            else {\n                maxRepeatCount = 6;\n                minRepeatCount = 3;\n                if (currentCodeLength !== nextLen) {\n                    blTree.writeCodeToStream(nextLen);\n                    currentRepeatCount = 0;\n                }\n            }\n            currentCodeLength = nextLen;\n            i++;\n            while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {\n                i++;\n                if (++currentRepeatCount >= maxRepeatCount) {\n                    break;\n                }\n            }\n            if (currentRepeatCount < minRepeatCount) {\n                while (currentRepeatCount-- > 0) {\n                    blTree.writeCodeToStream(currentCodeLength);\n                }\n            }\n            else if (currentCodeLength !== 0) {\n                blTree.writeCodeToStream(16);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);\n            }\n            else if (currentRepeatCount <= 10) {\n                blTree.writeCodeToStream(17);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);\n            }\n            else {\n                blTree.writeCodeToStream(18);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);\n            }\n        }\n    };\n    /**\n     * Build huffman tree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.buildTree = function () {\n        var codesCount = this.codeFrequency.length;\n        var arrTree = new Int32Array(codesCount);\n        var treeLength = 0;\n        var maxCount = 0;\n        for (var n = 0; n < codesCount; n++) {\n            var freq = this.codeFrequency[n];\n            if (freq !== 0) {\n                var pos = treeLength++;\n                var pPos = 0;\n                while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {\n                    arrTree[pos] = arrTree[pPos];\n                    pos = pPos;\n                }\n                arrTree[pos] = n;\n                maxCount = n;\n            }\n        }\n        while (treeLength < 2) {\n            arrTree[treeLength++] =\n                (maxCount < 2) ? ++maxCount : 0;\n        }\n        this.codeCount = Math.max(maxCount + 1, this.codeMinCount);\n        var leafsCount = treeLength;\n        var nodesCount = leafsCount;\n        var child = new Int32Array(4 * treeLength - 2);\n        var values = new Int32Array(2 * treeLength - 1);\n        for (var i = 0; i < treeLength; i++) {\n            var node = arrTree[i];\n            var iIndex = 2 * i;\n            child[iIndex] = node;\n            child[iIndex + 1] = -1;\n            values[i] = (this.codeFrequency[node] << 8);\n            arrTree[i] = i;\n        }\n        this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);\n        this.buildLength(child);\n    };\n    CompressorHuffmanTree.prototype.constructHuffmanTree = function (arrTree, treeLength, values, nodesCount, child) {\n        do {\n            var first = arrTree[0];\n            var last = arrTree[--treeLength];\n            var lastVal = values[last];\n            var pPos = 0;\n            var path = 1;\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            }\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n            var second = arrTree[0];\n            last = nodesCount++;\n            child[2 * last] = first;\n            child[2 * last + 1] = second;\n            var minDepth = Math.min(values[first] & 0xff, values[second] & 0xff);\n            values[last] = lastVal = values[first] + values[second] - minDepth + 1;\n            pPos = 0;\n            path = 1;\n            /* tslint:disable */\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            } /* tslint:disable */\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n        } while (treeLength > 1);\n    };\n    CompressorHuffmanTree.prototype.buildLength = function (child) {\n        this.codeLength = new Uint8Array(this.codeFrequency.length);\n        var numNodes = Math.floor(child.length / 2);\n        var numLeafs = Math.floor((numNodes + 1) / 2);\n        var overflow = 0;\n        for (var i = 0; i < this.maxLength; i++) {\n            this.lengthCount[i] = 0;\n        }\n        overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);\n        if (overflow === 0) {\n            return;\n        }\n        var iIncreasableLength = this.maxLength - 1;\n        do {\n            while (this.lengthCount[--iIncreasableLength] === 0) {\n                /* tslint:disable */\n            }\n            do {\n                this.lengthCount[iIncreasableLength]--;\n                this.lengthCount[++iIncreasableLength]++;\n                overflow -= (1 << (this.maxLength - 1 - iIncreasableLength));\n            } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);\n        } while (overflow > 0);\n        this.recreateTree(child, overflow, numLeafs);\n    };\n    CompressorHuffmanTree.prototype.recreateTree = function (child, overflow, numLeafs) {\n        this.lengthCount[this.maxLength - 1] += overflow;\n        this.lengthCount[this.maxLength - 2] -= overflow;\n        var nodePtr = 2 * numLeafs;\n        for (var bits = this.maxLength; bits !== 0; bits--) {\n            var n = this.lengthCount[bits - 1];\n            while (n > 0) {\n                var childPtr = 2 * child[nodePtr++];\n                if (child[childPtr + 1] === -1) {\n                    this.codeLength[child[childPtr]] = bits;\n                    n--;\n                }\n            }\n        }\n    };\n    CompressorHuffmanTree.prototype.calculateOptimalCodeLength = function (child, overflow, numNodes) {\n        var lengths = new Int32Array(numNodes);\n        lengths[numNodes - 1] = 0;\n        for (var i = numNodes - 1; i >= 0; i--) {\n            var childIndex = 2 * i + 1;\n            if (child[childIndex] !== -1) {\n                var bitLength = lengths[i] + 1;\n                if (bitLength > this.maxLength) {\n                    bitLength = this.maxLength;\n                    overflow++;\n                }\n                lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;\n            }\n            else {\n                var bitLength = lengths[i];\n                this.lengthCount[bitLength - 1]++;\n                this.codeLength[child[childIndex - 1]] = lengths[i];\n            }\n        }\n        return overflow;\n    };\n    CompressorHuffmanTree.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\n    CompressorHuffmanTree.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n    return CompressorHuffmanTree;\n}());\nexport { CompressorHuffmanTree };\n/**\n * Checksum calculator, based on Adler32 algorithm.\n */\nvar ChecksumCalculator = /** @class */ (function () {\n    function ChecksumCalculator() {\n    }\n    /**\n     * Updates checksum by calculating checksum of the\n     * given buffer and adding it to current value.\n     * @param {number} checksum - current checksum.\n     * @param {Uint8Array} buffer - data byte array.\n     * @param {number} offset - offset in the buffer.\n     * @param {number} length - length of data to be used from the stream.\n     * @returns {number}\n     */\n    ChecksumCalculator.checksumUpdate = function (checksum, buffer, offset, length) {\n        var uint = new Uint32Array(1);\n        uint[0] = checksum;\n        var checksum_uint = uint[0];\n        var s1 = uint[0] = checksum_uint & 65535;\n        var s2 = uint[0] = checksum_uint >> ChecksumCalculator.checkSumBitOffset;\n        while (length > 0) {\n            var steps = Math.min(length, ChecksumCalculator.checksumIterationCount);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (uint[0] = (buffer[offset++] & 255));\n                s2 = s2 + s1;\n            }\n            s1 %= ChecksumCalculator.checksumBase;\n            s2 %= ChecksumCalculator.checksumBase;\n        }\n        checksum_uint = (s2 << ChecksumCalculator.checkSumBitOffset) | s1;\n        return checksum_uint;\n    };\n    ChecksumCalculator.checkSumBitOffset = 16;\n    ChecksumCalculator.checksumBase = 65521;\n    ChecksumCalculator.checksumIterationCount = 3800;\n    return ChecksumCalculator;\n}());\nexport { ChecksumCalculator };\n/**\n * Huffman Tree literal calculation\n */\n(function () {\n    var i = 0;\n    while (i < 144) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x030 + i) << 8);\n        arrLiteralLengths[i++] = 8;\n    }\n    while (i < 256) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x190 - 144 + i) << 7);\n        arrLiteralLengths[i++] = 9;\n    }\n    while (i < 280) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x000 - 256 + i) << 9);\n        arrLiteralLengths[i++] = 7;\n    }\n    while (i < 286) {\n        arrLiteralCodes[i] = CompressorHuffmanTree.bitReverse((0x0c0 - 280 + i) << 8);\n        arrLiteralLengths[i++] = 8;\n    }\n    for (i = 0; i < 30; i++) {\n        arrDistanceCodes[i] = CompressorHuffmanTree.bitReverse(i << 11);\n        arrDistanceLengths[i] = 5;\n    }\n})();\n","import { CompressedStreamWriter } from './compression-writer';\nimport { Save } from '@syncfusion/ej2-file-utils';\nvar crc32Table = [];\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nvar ZipArchive = /** @class */ (function () {\n    /**\n     * constructor for creating ZipArchive instance\n     */\n    function ZipArchive() {\n        this.files = [];\n        this.level = 'Normal';\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(ZipArchive.prototype, \"compressionLevel\", {\n        /**\n         * gets compression level\n         */\n        get: function () {\n            return this.level;\n        },\n        /**\n         * sets compression level\n         */\n        set: function (level) {\n            this.level = level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZipArchive.prototype, \"length\", {\n        /**\n         * gets items count\n         */\n        get: function () {\n            if (this.files === undefined) {\n                return 0;\n            }\n            return this.files.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * add new item to archive\n     * @param {ZipArchiveItem} item - item to be added\n     * @returns {void}\n     */\n    ZipArchive.prototype.addItem = function (item) {\n        if (item === null || item === undefined) {\n            throw new Error('ArgumentException: item cannot be null or undefined');\n        }\n        for (var i = 0; i < this.files.length; i++) {\n            var file = this.files[i];\n            if (file instanceof ZipArchiveItem) {\n                if (file.name === item.name) {\n                    throw new Error('item with same name already exist');\n                }\n            }\n        }\n        this.files.push(item);\n    };\n    /**\n     * add new directory to archive\n     * @param directoryName directoryName to be created\n     * @returns {void}\n     */\n    ZipArchive.prototype.addDirectory = function (directoryName) {\n        if (directoryName === null || directoryName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (directoryName.length === 0) {\n            throw new Error('ArgumentException: string cannot be empty');\n        }\n        if (directoryName.slice(-1) !== '/') {\n            directoryName += '/';\n        }\n        if (this.files.indexOf(directoryName) !== -1) {\n            throw new Error('item with same name already exist');\n        }\n        this.files.push(directoryName);\n    };\n    /**\n     * gets item at specified index\n     * @param {number} index - item index\n     * @returns {ZipArchiveItem}\n     */\n    ZipArchive.prototype.getItem = function (index) {\n        if (index >= 0 && index < this.files.length) {\n            return this.files[index];\n        }\n        return undefined;\n    };\n    /**\n     * determines whether an element is in the collection\n     * @param {string | ZipArchiveItem} item - item to search\n     * @returns {boolean}\n     */\n    ZipArchive.prototype.contains = function (item) {\n        return this.files.indexOf(item) !== -1 ? true : false;\n    };\n    /**\n     * save archive with specified file name\n     * @param {string} fileName save archive with specified file name\n     * @returns {Promise<ZipArchive>}\n     */\n    ZipArchive.prototype.save = function (fileName) {\n        if (fileName === null || fileName === undefined || fileName.length === 0) {\n            throw new Error('ArgumentException: fileName cannot be null or undefined');\n        }\n        if (this.files.length === 0) {\n            throw new Error('InvalidOperation');\n        }\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal(fileName, false).then(function () {\n                resolve(zipArchive);\n            });\n        });\n    };\n    /**\n     * Save archive as blob\n     * @return {Promise<Blob>}\n     */\n    ZipArchive.prototype.saveAsBlob = function () {\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal('', true).then(function (blob) {\n                resolve(blob);\n            });\n        });\n    };\n    ZipArchive.prototype.saveInternal = function (fileName, skipFileSave) {\n        var _this = this;\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var zipData = [];\n            var dirLength = 0;\n            for (var i = 0; i < zipArchive.files.length; i++) {\n                var compressedObject = _this.getCompressedData(_this.files[i]);\n                compressedObject.then(function (data) {\n                    dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n                    if (zipData.length === zipArchive.files.length) {\n                        var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n                        resolve(blob);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchive.prototype.destroy = function () {\n        if (this.files !== undefined && this.files.length > 0) {\n            for (var i = 0; i < this.files.length; i++) {\n                var file = this.files[i];\n                if (file instanceof ZipArchiveItem) {\n                    file.destroy();\n                }\n                file = undefined;\n            }\n            this.files = [];\n        }\n        this.files = undefined;\n        this.level = undefined;\n    };\n    ZipArchive.prototype.getCompressedData = function (item) {\n        var zipArchive = this;\n        var promise = new Promise(function (resolve, reject) {\n            if (item instanceof ZipArchiveItem) {\n                var reader_1 = new FileReader();\n                reader_1.onload = function () {\n                    var input = new Uint8Array(reader_1.result);\n                    var data = {\n                        fileName: item.name, crc32Value: 0, compressedData: [],\n                        compressedSize: undefined, uncompressedDataSize: input.length, compressionType: undefined,\n                        isDirectory: false\n                    };\n                    if (zipArchive.level === 'Normal') {\n                        zipArchive.compressData(input, data, crc32Table);\n                        var length_1 = 0;\n                        for (var i = 0; i < data.compressedData.length; i++) {\n                            length_1 += data.compressedData[i].length;\n                        }\n                        data.compressedSize = length_1;\n                        data.compressionType = '\\x08\\x00'; //Deflated = 8\n                    }\n                    else {\n                        data.compressedSize = input.length;\n                        data.crc32Value = zipArchive.calculateCrc32Value(0, input, crc32Table);\n                        data.compressionType = '\\x00\\x00'; // Stored = 0\n                        data.compressedData.push(input);\n                    }\n                    resolve(data);\n                };\n                reader_1.readAsArrayBuffer(item.data);\n            }\n            else {\n                var data = {\n                    fileName: item, crc32Value: 0, compressedData: '', compressedSize: 0, uncompressedDataSize: 0,\n                    compressionType: '\\x00\\x00', isDirectory: true\n                };\n                resolve(data);\n            }\n        });\n        return promise;\n    };\n    ZipArchive.prototype.compressData = function (input, data, crc32Table) {\n        var compressor = new CompressedStreamWriter(true);\n        var currentIndex = 0;\n        var nextIndex = 0;\n        do {\n            if (currentIndex >= input.length) {\n                compressor.close();\n                break;\n            }\n            nextIndex = Math.min(input.length, currentIndex + 16384);\n            var subArray = input.subarray(currentIndex, nextIndex);\n            data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n            compressor.write(subArray, 0, nextIndex - currentIndex);\n            currentIndex = nextIndex;\n        } while (currentIndex <= input.length);\n        data.compressedData = compressor.compressedData;\n        compressor.destroy();\n    };\n    ZipArchive.prototype.constructZippedObject = function (zipParts, data, dirLength, isDirectory) {\n        var extFileAttr = 0;\n        var date = new Date();\n        if (isDirectory) {\n            extFileAttr = extFileAttr | 0x00010; // directory flag\n        }\n        extFileAttr = extFileAttr | (0 & 0x3F);\n        var header = this.writeHeader(data, date);\n        var localHeader = 'PK\\x03\\x04' + header + data.fileName;\n        var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n        zipParts.push({ localHeader: localHeader, centralDir: centralDir, compressedData: data });\n        return dirLength + localHeader.length + data.compressedSize;\n    };\n    ZipArchive.prototype.writeHeader = function (data, date) {\n        var zipHeader = '';\n        zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n        zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n        zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n        zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n        zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n        zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n        zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n        zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n        zipHeader += this.getBytes(0, 2); // extra field length\n        return zipHeader;\n    };\n    ZipArchive.prototype.writeZippedContent = function (fileName, zipData, localDirLen, skipFileSave) {\n        var cenDirLen = 0;\n        var buffer = [];\n        for (var i = 0; i < zipData.length; i++) {\n            var item = zipData[i];\n            cenDirLen += item.centralDir.length;\n            buffer.push(this.getArrayBuffer(item.localHeader));\n            while (item.compressedData.compressedData.length) {\n                buffer.push(item.compressedData.compressedData.shift().buffer);\n            }\n        }\n        for (var i = 0; i < zipData.length; i++) {\n            buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n        }\n        buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n        var blob = new Blob(buffer, { type: 'application/zip' });\n        if (!skipFileSave) {\n            Save.save(fileName, blob);\n        }\n        return blob;\n    };\n    ZipArchive.prototype.writeCentralDirectory = function (data, localHeader, offset, externalFileAttribute) {\n        var directoryHeader = 'PK\\x01\\x02' +\n            this.getBytes(0x0014, 2) + localHeader + // inherit from file header\n            this.getBytes(0, 2) + // comment length\n            '\\x00\\x00' + '\\x00\\x00' + // internal file attributes \n            this.getBytes(externalFileAttribute, 4) + // external file attributes\n            this.getBytes(offset, 4) + // local fileHeader relative offset\n            data.fileName;\n        return directoryHeader;\n    };\n    ZipArchive.prototype.writeFooter = function (zipData, centralLength, localLength) {\n        var dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' +\n            this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) +\n            this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) +\n            this.getBytes(0, 2);\n        return dirEnd;\n    };\n    ZipArchive.prototype.getArrayBuffer = function (input) {\n        var a = new Uint8Array(input.length);\n        for (var j = 0; j < input.length; ++j) {\n            a[j] = input.charCodeAt(j) & 0xFF;\n        }\n        return a.buffer;\n    };\n    ZipArchive.prototype.getBytes = function (value, offset) {\n        var bytes = '';\n        for (var i = 0; i < offset; i++) {\n            bytes += String.fromCharCode(value & 0xff);\n            value = value >>> 8;\n        }\n        return bytes;\n    };\n    ZipArchive.prototype.getModifiedTime = function (date) {\n        var modTime = date.getHours();\n        modTime = modTime << 6;\n        modTime = modTime | date.getMinutes();\n        modTime = modTime << 5;\n        return modTime = modTime | date.getSeconds() / 2;\n    };\n    ZipArchive.prototype.getModifiedDate = function (date) {\n        var modiDate = date.getFullYear() - 1980;\n        modiDate = modiDate << 4;\n        modiDate = modiDate | (date.getMonth() + 1);\n        modiDate = modiDate << 5;\n        return modiDate = modiDate | date.getDate();\n    };\n    ZipArchive.prototype.calculateCrc32Value = function (crc32Value, input, crc32Table) {\n        crc32Value ^= -1;\n        for (var i = 0; i < input.length; i++) {\n            crc32Value = (crc32Value >>> 8) ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n        }\n        return (crc32Value ^ (-1));\n    };\n    return ZipArchive;\n}());\nexport { ZipArchive };\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nvar ZipArchiveItem = /** @class */ (function () {\n    /**\n     * constructor for creating {ZipArchiveItem} instance\n     * @param {Blob|ArrayBuffer} data file data\n     * @param {itemName} itemName absolute file path\n     */\n    function ZipArchiveItem(data, itemName) {\n        if (data === null || data === undefined) {\n            throw new Error('ArgumentException: data cannot be null or undefined');\n        }\n        if (itemName === null || itemName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (itemName.length === 0) {\n            throw new Error('string cannot be empty');\n        }\n        this.data = data;\n        this.name = itemName;\n    }\n    Object.defineProperty(ZipArchiveItem.prototype, \"name\", {\n        /**\n         * Get the name of archive item\n         * @returns string\n         */\n        get: function () {\n            return this.fileName;\n        },\n        /**\n         * Set the name of archive item\n         * @param  {string} value\n         */\n        set: function (value) {\n            this.fileName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchiveItem.prototype.destroy = function () {\n        this.fileName = undefined;\n        this.data = undefined;\n    };\n    return ZipArchiveItem;\n}());\nexport { ZipArchiveItem };\n/**\n * construct cyclic redundancy code table\n */\n(function () {\n    var i;\n    for (var j = 0; j < 256; j++) {\n        i = j;\n        for (var k = 0; k < 8; k++) {\n            i = ((i & 1) ? (0xEDB88320 ^ (i >>> 1)) : (i >>> 1));\n        }\n        crc32Table[j] = i;\n    }\n})();\n"],"names":["arrLiteralCodes","Int16Array","arrLiteralLengths","Uint8Array","arrDistanceCodes","arrDistanceLengths","CompressedStreamWriter","noWrap","this","pendingBuffer","pendingBufLength","pendingBufCache","pendingBufBitsInCache","bufferPosition","extraBits","currentHash","matchStart","matchLength","matchPrevAvail","blockStart","stringStart","lookAhead","totalBytesIn","inputOffset","inputEnd","windowSize","windowMask","hashSize","hashMask","hashShift","Math","floor","maxDist","checkSum","treeLiteral","CompressorHuffmanTree","treeDistances","treeCodeLengths","arrDistances","Uint16Array","arrLiterals","stream","dataWindow","hashHead","hashPrevious","writeZLibHeader","Object","defineProperty","prototype","get","enumerable","configurable","compressedString","undefined","i","length","String","fromCharCode","apply","write","data","offset","Error","end","encode","Encoding","type","getBytes","inputBuffer","ChecksumCalculator","checksumUpdate","pendingBufferFlush","compressData","headerDate","pendingBufferWriteShortBytes","s","finish","success","fillWindow","canFlush","compressSlow","flush","lookAheadCompleted","slideWindow","prevMatch","prevLen","discardMatch","matchPreviousBest","matchPreviousAvailable","huffmanIsFull","insertString","findLongestMatch","huffmanTallyLit","huffmanTallyDist","huffmanFlushBlock","len","lastBlock","more","set","subarray","updateHash","m","match","hash","curMatch","chainLen","niceLen","scan","bestEnd","bestLength","max","limit","stringEnd","scanEnd1","scanEnd","min","literal","codeFrequencies","dist","lc","huffmanLengthCode","dc","huffmanDistanceCode","stored","storedOffset","storedLength","buildTree","calculateBLFreq","blTreeCodes","codeLengths","huffCodeLengthOrders","opt_len","getEncodedLength","static_len","huffmanFlushStoredBlock","pendingBufferWriteBits","setStaticCodes","huffmanCompressBlock","huffmanReset","huffmanSendAllTrees","pendingBufferAlignToByte","pendingBufferWriteShort","pendingBufferWriteByteBlock","code","distance","buildCodes","treeLength","rank","writeTree","reset","literalLen","writeCodeToStream","bits","b","count","uint","Uint32Array","pendingBufferFlushBits","isClose","array","push","result","close","destroy","writer","elementCount","minCodes","maxLength","codeMinCount","codeFrequency","lengthCount","Int32Array","codeCount","codeLength","codes","lengths","temp","lengthTemp","nextCode","bitsCount","bitReverse","value","reverseBits","blTree","maxCount","minCount","curLen","nextLen","maxRepeatCount","minRepeatCount","currentRepeatCount","currentCodeLength","codesCount","arrTree","n","freq","pos","pPos","nodesCount","child","values","node","iIndex","constructHuffmanTree","buildLength","first","last","lastVal","path","second","minDepth","numNodes","numLeafs","overflow","calculateOptimalCodeLength","iIncreasableLength","recreateTree","nodePtr","childPtr","childIndex","bitLength","checksum","buffer","checksum_uint","s1","s2","checkSumBitOffset","steps","checksumIterationCount","checksumBase","crc32Table","ZipArchive","files","level","Save","isMicrosoftBrowser","navigator","msSaveBlob","addItem","item","file","ZipArchiveItem","name","addDirectory","directoryName","slice","indexOf","getItem","index","contains","save","fileName","zipArchive","Promise","resolve","reject","saveInternal","then","saveAsBlob","blob","skipFileSave","_this","zipData","dirLength","getCompressedData","constructZippedObject","isDirectory","writeZippedContent","reader_1","FileReader","onload","input","crc32Value","compressedData","compressedSize","uncompressedDataSize","compressionType","length_1","calculateCrc32Value","readAsArrayBuffer","compressor","currentIndex","nextIndex","subArray","zipParts","extFileAttr","date","Date","header","writeHeader","localHeader","centralDir","writeCentralDirectory","zipHeader","getModifiedTime","getModifiedDate","localDirLen","cenDirLen","getArrayBuffer","shift","writeFooter","Blob","externalFileAttribute","centralLength","localLength","a","j","charCodeAt","bytes","modTime","getHours","getMinutes","getSeconds","modiDate","getFullYear","getMonth","getDate","itemName","k"],"mappings":"yQAIA,IAAIA,EAAkB,IAAIC,WAAW,KACjCC,EAAoB,IAAIC,WAAW,KACnCC,EAAmB,IAAIH,WAAW,IAClCI,EAAqB,IAAIF,WAAW,IAUpCG,EAAwC,WAKxC,SAASA,EAAuBC,GAC5BC,KAAKC,cAAgB,IAAIN,WAAW,OACpCK,KAAKE,iBAAmB,EACxBF,KAAKG,gBAAkB,EACvBH,KAAKI,sBAAwB,EAC7BJ,KAAKK,eAAiB,EACtBL,KAAKM,UAAY,EACjBN,KAAKO,YAAc,EACnBP,KAAKQ,WAAa,EAClBR,KAAKS,YAAc,EACnBT,KAAKU,gBAAiB,EACtBV,KAAKW,WAAa,EAClBX,KAAKY,YAAc,EACnBZ,KAAKa,UAAY,EACjBb,KAAKc,aAAe,EACpBd,KAAKe,YAAc,EACnBf,KAAKgB,SAAW,EAChBhB,KAAKiB,WAAa,MAClBjB,KAAKkB,WAAalB,KAAKiB,WAAa,EACpCjB,KAAKmB,SAAW,MAChBnB,KAAKoB,SAAWpB,KAAKmB,SAAW,EAChCnB,KAAKqB,UAAYC,KAAKC,MAAM,GAAe,GAC3CvB,KAAKwB,QAAUxB,KAAKiB,WAAa,IACjCjB,KAAKyB,SAAW,EAChBzB,KAAKD,QAAS,EACdC,KAAK0B,YAAc,IAAIC,EAAsB3B,KAAM,IAAK,IAAK,IAC7DA,KAAK4B,cAAgB,IAAID,EAAsB3B,KAAM,GAAI,EAAG,IAC5DA,KAAK6B,gBAAkB,IAAIF,EAAsB3B,KAAM,GAAI,EAAG,GAC9DA,KAAK8B,aAAe,IAAIC,mBACxB/B,KAAKgC,YAAc,IAAIrC,kBACvBK,KAAKiC,UACLjC,KAAKkC,WAAa,IAAIvC,WAAW,EAAIK,KAAKiB,YAC1CjB,KAAKmC,SAAW,IAAI1C,WAAWO,KAAKmB,UACpCnB,KAAKoC,aAAe,IAAI3C,WAAWO,KAAKiB,YACxCjB,KAAKW,WAAaX,KAAKY,YAAc,EACrCZ,KAAKD,OAASA,EACTA,GACDC,KAAKqC,kBAufb,OApfAC,OAAOC,eAAezC,EAAuB0C,UAAW,kBAIpDC,IAAK,WACD,OAAOzC,KAAKiC,QAEhBS,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAezC,EAAuB0C,UAAW,uBACpDC,IAAK,WACD,IAAIG,EAAmB,GACvB,QAAoBC,IAAhB7C,KAAKiC,OACL,IAAK,IAAIa,EAAI,EAAGA,EAAI9C,KAAKiC,OAAOc,OAAQD,IACpCF,GAAoBI,OAAOC,aAAaC,MAAM,KAAMlD,KAAKiC,OAAOa,IAGxE,OAAOF,GAEXF,YAAY,EACZC,cAAc,IASlB7C,EAAuB0C,UAAUW,MAAQ,SAAUC,EAAMC,EAAQN,GAC7D,QAAaF,IAATO,GAA+B,OAATA,EACtB,MAAM,IAAIE,MAAM,oDAEpB,IAAIC,EAAMF,EAASN,EACnB,GAAI,EAAIM,GAAUA,EAASE,GAAOA,EAAMH,EAAKL,OACzC,MAAM,IAAIO,MAAM,8DAEpB,GAAoB,iBAATF,EAAmB,CAC1B,IAAII,EAAS,IAAIC,YAAS,GAC1BD,EAAOE,KAAO,OAEdH,EAAMF,GADND,EAAO,IAAIzD,WAAW6D,EAAOG,SAASP,EAAM,EAAGA,EAAKL,UAChCA,OAQxB,IANA/C,KAAK4D,YAAcR,EACnBpD,KAAKe,YAAcsC,EACnBrD,KAAKgB,SAAWuC,EACXvD,KAAKD,SACNC,KAAKyB,SAAWoC,EAAmBC,eAAe9D,KAAKyB,SAAUzB,KAAK4D,YAAa5D,KAAKe,YAAawC,IAEhGvD,KAAKgB,WAAahB,KAAKe,aAA4C,IAA1Bf,KAAKE,kBACnDF,KAAK+D,qBACL/D,KAAKgE,cAAa,IAO1BlE,EAAuB0C,UAAUH,gBAAkB,WAE/C,IAAI4B,EAAa,MAEjBA,GAAc,GAEdA,GAAc,GAAMA,EAAa,GAEjCjE,KAAKkE,6BAA6BD,IAMtCnE,EAAuB0C,UAAU0B,6BAA+B,SAAUC,GACtEnE,KAAKC,cAAcD,KAAKE,oBAAsBiE,GAAK,EACnDnE,KAAKC,cAAcD,KAAKE,oBAAsBiE,GAElDrE,EAAuB0C,UAAUwB,aAAe,SAAUI,GACtD,IAAIC,EACJ,EAAG,CACCrE,KAAKsE,aACL,IAAIC,EAAYH,GAAUpE,KAAKgB,WAAahB,KAAKe,YACjDsD,EAAUrE,KAAKwE,aAAaD,EAAUH,SACP,IAA1BpE,KAAKE,kBAA0BmE,GACxC,OAAOA,GAEXvE,EAAuB0C,UAAUgC,aAAe,SAAUC,EAAOL,GAC7D,GAAIpE,KAAKa,UAAY,MAAQ4D,EACzB,OAAO,EAEX,KAAOzE,KAAKa,WAAa,KAAO4D,GAAO,CACnC,GAAuB,IAAnBzE,KAAKa,UACL,OAAOb,KAAK0E,mBAAmBN,GAE/BpE,KAAKY,aAAe,EAAIZ,KAAKiB,WAAa,KAC1CjB,KAAK2E,cAET,IAAIC,EAAY5E,KAAKQ,WACjBqE,EAAU7E,KAAKS,YAUnB,GATIT,KAAKa,WAAa,GAClBb,KAAK8E,eAELD,GAAW,GAAK7E,KAAKS,aAAeoE,EACpCA,EAAU7E,KAAK+E,kBAAkBH,EAAWC,GAG5C7E,KAAKgF,yBAELhF,KAAKK,sBACL,OAAOL,KAAKiF,cAAcb,GAGlC,OAAO,GAEXtE,EAAuB0C,UAAUsC,aAAe,WAC5C,IAAI3C,EAAWnC,KAAKkF,eACH,IAAb/C,GAAkBnC,KAAKY,YAAcuB,GAAYnC,KAAKwB,SAAWxB,KAAKmF,iBAAiBhD,IACnFnC,KAAKS,aAAe,GAA2B,IAArBT,KAAKS,aAAqBT,KAAKY,YAAcZ,KAAKQ,WAAa,OACzFR,KAAKS,YAAc,IAI/BX,EAAuB0C,UAAUwC,uBAAyB,WAClDhF,KAAKU,gBACLV,KAAKoF,gBAAwD,IAAxCpF,KAAKkC,WAAWlC,KAAKY,YAAc,IAE5DZ,KAAKU,gBAAiB,EACtBV,KAAKY,cACLZ,KAAKa,aAETf,EAAuB0C,UAAUuC,kBAAoB,SAAUH,EAAWC,GACtE7E,KAAKqF,iBAAiBrF,KAAKY,YAAc,EAAIgE,EAAWC,GACxDA,GAAW,EACX,GACI7E,KAAKY,cACLZ,KAAKa,YACDb,KAAKa,WAAa,GAClBb,KAAKkF,uBAEFL,EAAU,GAKrB,OAJA7E,KAAKY,cACLZ,KAAKa,YACLb,KAAKU,gBAAiB,EACtBV,KAAKS,YAAc,EACZoE,GAEX/E,EAAuB0C,UAAUkC,mBAAqB,SAAUN,GAO5D,OANIpE,KAAKU,gBACLV,KAAKoF,gBAAwD,IAAxCpF,KAAKkC,WAAWlC,KAAKY,YAAc,IAE5DZ,KAAKU,gBAAiB,EACtBV,KAAKsF,kBAAkBtF,KAAKkC,WAAYlC,KAAKW,WAAYX,KAAKY,YAAcZ,KAAKW,WAAYyD,GAC7FpE,KAAKW,WAAaX,KAAKY,aAChB,GAEXd,EAAuB0C,UAAUyC,cAAgB,SAAUb,GACvD,IAAImB,EAAMvF,KAAKY,YAAcZ,KAAKW,WAC9BX,KAAKU,gBACL6E,IAEJ,IAAIC,EAAapB,GAA6B,IAAnBpE,KAAKa,YAAoBb,KAAKU,eAGzD,OAFAV,KAAKsF,kBAAkBtF,KAAKkC,WAAYlC,KAAKW,WAAY4E,EAAKC,GAC9DxF,KAAKW,YAAc4E,GACXC,GAEZ1F,EAAuB0C,UAAU8B,WAAa,WAI1C,IAHItE,KAAKY,aAAeZ,KAAKiB,WAAajB,KAAKwB,SAC3CxB,KAAK2E,cAEF3E,KAAKa,UAAY,KAAOb,KAAKe,YAAcf,KAAKgB,UAAU,CAC7D,IAAIyE,EAAO,EAAIzF,KAAKiB,WAAajB,KAAKa,UAAYb,KAAKY,YACnD6E,EAAOzF,KAAKgB,SAAWhB,KAAKe,cAC5B0E,EAAOzF,KAAKgB,SAAWhB,KAAKe,aAEhCf,KAAKkC,WAAWwD,IAAI1F,KAAK4D,YAAY+B,SAAS3F,KAAKe,YAAaf,KAAKe,YAAc0E,GAAOzF,KAAKY,YAAcZ,KAAKa,WAClHb,KAAKe,aAAe0E,EACpBzF,KAAKc,cAAgB2E,EACrBzF,KAAKa,WAAa4E,EAElBzF,KAAKa,WAAa,GAClBb,KAAK4F,cAGb9F,EAAuB0C,UAAUmC,YAAc,WAC3C3E,KAAKkC,WAAWwD,IAAI1F,KAAKkC,WAAWyD,SAAS3F,KAAKiB,WAAYjB,KAAKiB,WAAajB,KAAKiB,YAAa,GAClGjB,KAAKQ,YAAcR,KAAKiB,WACxBjB,KAAKY,aAAeZ,KAAKiB,WACzBjB,KAAKW,YAAcX,KAAKiB,WACxB,IAAK,IAAI6B,EAAI,EAAGA,EAAI9C,KAAKmB,WAAY2B,EAAG,CACpC,IAAI+C,EAAuB,MAAnB7F,KAAKmC,SAASW,GACtB9C,KAAKmC,SAASW,GAAQ+C,GAAK7F,KAAKiB,WAAe4E,EAAI7F,KAAKiB,WAAc,EAE1E,IAAS6B,EAAI,EAAGA,EAAI9C,KAAKiB,WAAY6B,IAAK,CAClC+C,EAA2B,MAAvB7F,KAAKoC,aAAaU,GAC1B9C,KAAKoC,aAAaU,GAAO+C,GAAK7F,KAAKiB,WAAe4E,EAAI7F,KAAKiB,WAAc,IAGjFnB,EAAuB0C,UAAU0C,aAAe,WAC5C,IAAIY,EACAC,GAAS/F,KAAKO,aAAeP,KAAKqB,UAAarB,KAAKkC,WAAWlC,KAAKY,gBAA0BZ,KAAKoB,SAIvG,OAHApB,KAAKoC,aAAapC,KAAKY,YAAcZ,KAAKkB,YAAc4E,EAAQ9F,KAAKmC,SAAS4D,GAC9E/F,KAAKmC,SAAS4D,GAAQ/F,KAAKY,YAC3BZ,KAAKO,YAAcwF,EACJ,MAARD,GAEXhG,EAAuB0C,UAAU2C,iBAAmB,SAAUa,GAC1D,IAGIF,EAHAG,EAAW,KACXC,EAAU,IACVC,EAAOnG,KAAKY,YAEZwF,EAAUpG,KAAKY,YAAcZ,KAAKS,YAClC4F,EAAa/E,KAAKgF,IAAItG,KAAKS,YAAa,GACxC8F,EAAQjF,KAAKgF,IAAItG,KAAKY,YAAcZ,KAAKwB,QAAS,GAClDgF,EAAYxG,KAAKY,YAAc,IAAM,EACrC6F,EAAWzG,KAAKkC,WAAWkE,EAAU,GACrCM,EAAU1G,KAAKkC,WAAWkE,GAC1BhD,EAAOpD,KAAKkC,WACZmE,GAAc,KACdJ,IAAa,GAEbC,EAAUlG,KAAKa,YACfqF,EAAUlG,KAAKa,WAEnB,GACI,GAAIuC,EAAK4C,EAAWK,KAAgBK,GAChCtD,EAAK4C,EAAWK,EAAa,KAAOI,GACpCrD,EAAK4C,KAAc5C,EAAK+C,IACxB/C,EAAK4C,EAAW,KAAO5C,EAAK+C,EAAO,GAHvC,CASA,IAHAL,EAAQE,EAAW,EACnBG,GAAQ,EAED/C,IAAO+C,KAAU/C,IAAO0C,IAAU1C,IAAO+C,KAAU/C,IAAO0C,IAC7D1C,IAAO+C,KAAU/C,IAAO0C,IAAU1C,IAAO+C,KAAU/C,IAAO0C,IAC1D1C,IAAO+C,KAAU/C,IAAO0C,IAAU1C,IAAO+C,KAAU/C,IAAO0C,IAC1D1C,IAAO+C,KAAU/C,IAAO0C,IAAU1C,IAAO+C,KAAU/C,IAAO0C,IAAUK,EAAOK,IAG/E,GAAIL,EAAOC,EAAS,CAIhB,GAHApG,KAAKQ,WAAawF,EAClBI,EAAUD,GACVE,EAAaF,EAAOnG,KAAKY,cACPsF,EACd,MAEJO,EAAWrD,EAAKgD,EAAU,GAC1BM,EAAUtD,EAAKgD,GAEnBD,EAAOnG,KAAKY,oBACNoF,EAA4D,MAAhDhG,KAAKoC,aAAa4D,EAAWhG,KAAKkB,aAAyBqF,GAAwB,KAAbN,GAE5F,OADAjG,KAAKS,YAAca,KAAKqF,IAAIN,EAAYrG,KAAKa,WACtCb,KAAKS,aAAe,GAE/BX,EAAuB0C,UAAUoD,WAAa,WAC1C5F,KAAKO,YAAeP,KAAKkC,WAAWlC,KAAKY,cAAgBZ,KAAKqB,UAAarB,KAAKkC,WAAWlC,KAAKY,YAAc,IAElHd,EAAuB0C,UAAU4C,gBAAkB,SAAUwB,GAIzD,OAHA5G,KAAK8B,aAAa9B,KAAKK,gBAAkB,EACzCL,KAAKgC,YAAYhC,KAAKK,kBAAoBuG,EAC1C5G,KAAK0B,YAAYmF,gBAAgBD,KAC1B5G,KAAKK,uBAEhBP,EAAuB0C,UAAU6C,iBAAmB,SAAUyB,EAAMvB,GAChEvF,KAAK8B,aAAa9B,KAAKK,gBAAkByG,EACzC9G,KAAKgC,YAAYhC,KAAKK,kBAAqBkF,EAAM,EACjD,IAAIwB,EAAK/G,KAAKgH,kBAAkBzB,EAAM,GACtCvF,KAAK0B,YAAYmF,gBAAgBE,KAC7BA,GAAM,KAAOA,EAAK,MAClB/G,KAAKM,WAAagB,KAAKC,OAAOwF,EAAK,KAAO,IAE9C,IAAIE,EAAKjH,KAAKkH,oBAAoBJ,EAAO,GAKzC,OAJA9G,KAAK4B,cAAciF,gBAAgBI,KAC/BA,GAAM,IACNjH,KAAKM,WAAagB,KAAKC,MAAO0F,EAAK,EAAI,IAEpCjH,KAAKK,uBAEhBP,EAAuB0C,UAAU8C,kBAAoB,SAAU6B,EAAQC,EAAcC,EAAc7B,GAC/FxF,KAAK0B,YAAYmF,gBAAgB,OACjC7G,KAAK0B,YAAY4F,YACjBtH,KAAK4B,cAAc0F,YACnBtH,KAAK0B,YAAY6F,gBAAgBvH,KAAK6B,iBACtC7B,KAAK4B,cAAc2F,gBAAgBvH,KAAK6B,iBACxC7B,KAAK6B,gBAAgByF,YAErB,IAAK,IADDE,EAAc,EACT1E,EAAI,GAAIA,EAAI0E,EAAa1E,IAC1B9C,KAAK6B,gBAAgB4F,YAAY9F,EAAsB+F,qBAAqB5E,IAAM,IAClF0E,EAAc1E,EAAI,GAMrB,IAHD6E,EAAU,GAAmB,EAAdH,EAAkBxH,KAAK6B,gBAAgB+F,mBACtD5H,KAAK0B,YAAYkG,mBAAqB5H,KAAK4B,cAAcgG,mBAAqB5H,KAAKM,UACnFuH,EAAa7H,KAAKM,UACtB,IAASwC,EAAI,EAAGA,EAAI,IAAKA,IACrB+E,GAAc7H,KAAK0B,YAAYmF,gBAAgB/D,GAAKpD,EAAkBoD,GAE1E,IAASA,EAAI,EAAGA,EAAI,GAAIA,IACpB+E,GAAc7H,KAAK4B,cAAciF,gBAAgB/D,GAAKjD,EAAmBiD,GAEzE6E,GAAWE,IAEXF,EAAUE,GAEVT,GAAgB,GAAKC,EAAe,EAAIM,GAAW,EACnD3H,KAAK8H,wBAAwBX,EAAQC,EAAcC,EAAc7B,GAE5DmC,GAAWE,GAEhB7H,KAAK+H,uBAAuB,GAAYvC,EAAY,EAAI,GAAI,GAC5DxF,KAAK0B,YAAYsG,eAAexI,EAAiBE,GACjDM,KAAK4B,cAAcoG,eAAepI,EAAkBC,GACpDG,KAAKiI,uBACLjI,KAAKkI,iBAGLlI,KAAK+H,uBAAuB,GAAYvC,EAAY,EAAI,GAAI,GAC5DxF,KAAKmI,oBAAoBX,GACzBxH,KAAKiI,uBACLjI,KAAKkI,iBAGbpI,EAAuB0C,UAAUsF,wBAA0B,SAAUX,EAAQC,EAAcC,EAAc7B,GACrGxF,KAAK+H,uBAAuB,GAAYvC,EAAY,EAAI,GAAI,GAC5DxF,KAAKoI,2BACLpI,KAAKqI,wBAAwBhB,GAC7BrH,KAAKqI,yBAAyBhB,GAC9BrH,KAAKsI,4BAA4BnB,EAAQC,EAAcC,GACvDrH,KAAKkI,gBAETpI,EAAuB0C,UAAUwE,kBAAoB,SAAUzB,GAC3D,GAAY,MAARA,EACA,OAAO,IAGX,IADA,IAAIgD,EAAO,IACJhD,GAAO,GACVgD,GAAQ,EACRhD,IAAQ,EAEZ,OAAOgD,EAAOhD,GAElBzF,EAAuB0C,UAAU0E,oBAAsB,SAAUsB,GAE7D,IADA,IAAID,EAAO,EACJC,GAAY,GACfD,GAAQ,EACRC,IAAa,EAEjB,OAAOD,EAAOC,GAElB1I,EAAuB0C,UAAU2F,oBAAsB,SAAUX,GAC7DxH,KAAK6B,gBAAgB4G,aACrBzI,KAAK0B,YAAY+G,aACjBzI,KAAK4B,cAAc6G,aACnBzI,KAAK+H,uBAAuB/H,KAAK0B,YAAYgH,WAAa,IAAK,GAC/D1I,KAAK+H,uBAAuB/H,KAAK4B,cAAc8G,WAAa,EAAG,GAC/D1I,KAAK+H,uBAAuBP,EAAc,EAAG,GAC7C,IAAK,IAAImB,EAAO,EAAGA,EAAOnB,EAAamB,IACnC3I,KAAK+H,uBAAuB/H,KAAK6B,gBAAgB4F,YAAY9F,EAAsB+F,qBAAqBiB,IAAQ,GAEpH3I,KAAK0B,YAAYkH,UAAU5I,KAAK6B,iBAChC7B,KAAK4B,cAAcgH,UAAU5I,KAAK6B,kBAEtC/B,EAAuB0C,UAAU0F,aAAe,WAC5ClI,KAAKK,eAAiB,EACtBL,KAAKM,UAAY,EACjBN,KAAK0B,YAAYmH,QACjB7I,KAAK4B,cAAciH,QACnB7I,KAAK6B,gBAAgBgH,SAEzB/I,EAAuB0C,UAAUyF,qBAAuB,WACpD,IAAK,IAAInF,EAAI,EAAGA,EAAI9C,KAAKK,eAAgByC,IAAK,CAC1C,IAAIgG,EAAmC,IAAtB9I,KAAKgC,YAAYc,GAC9BgE,EAAO9G,KAAK8B,aAAagB,GAC7B,GAAe,GAAXgE,IAAc,CACd,IAAIC,EAAK/G,KAAKgH,kBAAkB8B,GAChC9I,KAAK0B,YAAYqH,kBAAkBhC,GACnC,IAAIiC,EAAO1H,KAAKC,OAAOwF,EAAK,KAAO,GAC/BiC,EAAO,GAAKA,GAAQ,GACpBhJ,KAAK+H,uBAAuBe,GAAe,GAAKE,GAAQ,EAAIA,GAEhE,IAAI/B,EAAKjH,KAAKkH,oBAAoBJ,GAClC9G,KAAK4B,cAAcmH,kBAAkB9B,IACrC+B,EAAO1H,KAAKC,MAAM0F,EAAK,EAAI,IAChB,GACPjH,KAAK+H,uBAAuBjB,GAAS,GAAKkC,GAAQ,EAAIA,QAI1DhJ,KAAK0B,YAAYqH,kBAAkBD,GAG3C9I,KAAK0B,YAAYqH,kBAAkB,MAOvCjJ,EAAuB0C,UAAUuF,uBAAyB,SAAUkB,EAAGC,GACnE,IAAIC,EAAO,IAAIC,YAAY,GAC3BD,EAAK,GAAKnJ,KAAKG,gBAAmB8I,GAAKjJ,KAAKI,sBAC5CJ,KAAKG,gBAAkBgJ,EAAK,GAC5BnJ,KAAKI,uBAAyB8I,EAC9BlJ,KAAKqJ,0BAETvJ,EAAuB0C,UAAUuB,mBAAqB,SAAUuF,GAE5D,GADAtJ,KAAKqJ,yBACDrJ,KAAKE,iBAAmB,EAAG,CAC3B,IAAIqJ,EAAQ,IAAI5J,WAAWK,KAAKE,kBAChCqJ,EAAM7D,IAAI1F,KAAKC,cAAc0F,SAAS,EAAG3F,KAAKE,kBAAmB,GACjEF,KAAKiC,OAAOuH,KAAKD,GAErBvJ,KAAKE,iBAAmB,GAE5BJ,EAAuB0C,UAAU6G,uBAAyB,WAEtD,IADA,IAAII,EAAS,EACNzJ,KAAKI,uBAAyB,GAAKJ,KAAKE,wBAC3CF,KAAKC,cAAcD,KAAKE,oBAAsBF,KAAKG,gBACnDH,KAAKG,kBAAoB,EACzBH,KAAKI,uBAAyB,EAC9BqJ,IAEJ,OAAOA,GAEX3J,EAAuB0C,UAAU8F,4BAA8B,SAAUlF,EAAMC,EAAQN,GACnF,IAAIwG,EAAQnG,EAAKuC,SAAStC,EAAQA,EAASN,GAC3C/C,KAAKC,cAAcyF,IAAI6D,EAAOvJ,KAAKE,kBACnCF,KAAKE,kBAAoB6C,GAE7BjD,EAAuB0C,UAAU6F,wBAA0B,SAAUlE,GACjEnE,KAAKC,cAAcD,KAAKE,oBAAsBiE,EAC9CnE,KAAKC,cAAcD,KAAKE,oBAAuBiE,GAAK,GAExDrE,EAAuB0C,UAAU4F,yBAA2B,WACpDpI,KAAKI,sBAAwB,IAC7BJ,KAAKC,cAAcD,KAAKE,oBAAsBF,KAAKG,iBAEvDH,KAAKG,gBAAkB,EACvBH,KAAKI,sBAAwB,GAMjCN,EAAuB0C,UAAUkH,MAAQ,WACrC,GACI1J,KAAK+D,oBAAmB,GACnB/D,KAAKgE,cAAa,KACnBhE,KAAK+D,oBAAmB,GACxB/D,KAAKoI,2BACApI,KAAKD,SACNC,KAAKkE,6BAA6BlE,KAAKyB,UAAY,IACnDzB,KAAKkE,6BAA6C,MAAhBlE,KAAKyB,WAE3CzB,KAAK+D,oBAAmB,UAErB/D,KAAKgB,WAAahB,KAAKe,aACF,IAA1Bf,KAAKE,mBAMfJ,EAAuB0C,UAAUmH,QAAU,WACvC3J,KAAKiC,UACLjC,KAAKiC,YAASY,EACd7C,KAAKC,mBAAgB4C,EACrB7C,KAAK0B,iBAAcmB,EACnB7C,KAAK4B,mBAAgBiB,EACrB7C,KAAK6B,qBAAkBgB,EACvB7C,KAAKgC,iBAAca,EACnB7C,KAAK8B,kBAAee,EACpB7C,KAAKmC,cAAWU,EAChB7C,KAAKoC,kBAAeS,EACpB7C,KAAKkC,gBAAaW,EAClB7C,KAAK4D,iBAAcf,EACnB7C,KAAKE,sBAAmB2C,EACxB7C,KAAKG,qBAAkB0C,EACvB7C,KAAKI,2BAAwByC,EAC7B7C,KAAKK,oBAAiBwC,EACtB7C,KAAKM,eAAYuC,EACjB7C,KAAKO,iBAAcsC,EACnB7C,KAAKQ,gBAAaqC,EAClB7C,KAAKS,iBAAcoC,EACnB7C,KAAKU,oBAAiBmC,EACtB7C,KAAKW,gBAAakC,EAClB7C,KAAKY,iBAAciC,EACnB7C,KAAKa,eAAYgC,EACjB7C,KAAKc,kBAAe+B,EACpB7C,KAAKe,iBAAc8B,EACnB7C,KAAKgB,cAAW6B,EAChB7C,KAAKiB,gBAAa4B,EAClB7C,KAAKkB,gBAAa2B,EAClB7C,KAAKmB,cAAW0B,EAChB7C,KAAKoB,cAAWyB,EAChB7C,KAAKqB,eAAYwB,EACjB7C,KAAKwB,aAAUqB,EACf7C,KAAKyB,cAAWoB,EAChB7C,KAAKD,YAAS8C,GAEX/C,KAMP6B,EAAuC,WAQvC,SAASA,EAAsBiI,EAAQC,EAAcC,EAAUC,GAC3D/J,KAAK4J,OAASA,EACd5J,KAAKgK,aAAeF,EACpB9J,KAAK+J,UAAYA,EACjB/J,KAAKiK,cAAgB,IAAIlI,YAAY8H,GACrC7J,KAAKkK,YAAc,IAAIC,WAAWJ,GA8UtC,OA5UAzH,OAAOC,eAAeZ,EAAsBa,UAAW,cACnDC,IAAK,WACD,OAAOzC,KAAKoK,WAEhB1H,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAeZ,EAAsBa,UAAW,eACnDC,IAAK,WACD,OAAOzC,KAAKqK,YAEhB3H,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAeZ,EAAsBa,UAAW,mBACnDC,IAAK,WACD,OAAOzC,KAAKiK,eAEhBvH,YAAY,EACZC,cAAc,IAElBhB,EAAsBa,UAAUwF,eAAiB,SAAUsC,EAAOC,GAC9D,IAAIC,EAAO,IAAI/K,WAAW6K,EAAMvH,QAChCyH,EAAK9E,IAAI4E,EAAO,GAChBtK,KAAKsK,MAAQE,EACb,IAAIC,EAAa,IAAI9K,WAAW4K,EAAQxH,QACxC0H,EAAW/E,IAAI6E,EAAS,GACxBvK,KAAKqK,WAAaI,GAMtB9I,EAAsBa,UAAUqG,MAAQ,WACpC,IAAK,IAAI/F,EAAI,EAAGA,EAAI9C,KAAKiK,cAAclH,OAAQD,IAC3C9C,KAAKiK,cAAcnH,GAAK,EAE5B9C,KAAKsK,WAAQzH,EACb7C,KAAKqK,gBAAaxH,GAOtBlB,EAAsBa,UAAUuG,kBAAoB,SAAUR,GAC1DvI,KAAK4J,OAAO7B,uBAA0C,MAAnB/H,KAAKsK,MAAM/B,GAAgBvI,KAAKqK,WAAW9B,KAMlF5G,EAAsBa,UAAUiG,WAAa,WACzC,IAAIiC,EAAW,IAAIP,WAAWnK,KAAK+J,WACnC/J,KAAKsK,MAAQ,IAAI7K,WAAWO,KAAKoK,WAEjC,IAAK,IADD7B,EAAO,EACFoC,EAAY,EAAGA,EAAY3K,KAAK+J,UAAWY,IAChDD,EAASC,GAAapC,EACtBA,GAAQvI,KAAKkK,YAAYS,IAAe,GAAKA,EAEjD,IAAK,IAAI7H,EAAI,EAAGA,EAAI9C,KAAKoK,UAAWtH,IAAK,CACrC,IAAIkG,EAAOhJ,KAAKqK,WAAWvH,GACvBkG,EAAO,IACPhJ,KAAKsK,MAAMxH,GAAKnB,EAAsBiJ,WAAWF,EAAS1B,EAAO,IACjE0B,EAAS1B,EAAO,IAAM,GAAM,GAAKA,KAI7CrH,EAAsBiJ,WAAa,SAAUC,GACzC,OAAQlJ,EAAsBmJ,YAAoB,GAARD,IAAe,GACnDlJ,EAAsBmJ,YAAaD,GAAS,EAAK,KAAO,EACxDlJ,EAAsBmJ,YAAaD,GAAS,EAAK,KAAO,EACxDlJ,EAAsBmJ,YAAYD,GAAS,KAMrDlJ,EAAsBa,UAAUoF,iBAAmB,WAE/C,IAAK,IADDrC,EAAM,EACDzC,EAAI,EAAGA,EAAI9C,KAAKiK,cAAclH,OAAQD,IAC3CyC,GAAOvF,KAAKiK,cAAcnH,GAAK9C,KAAKqK,WAAWvH,GAEnD,OAAOyC,GAOX5D,EAAsBa,UAAU+E,gBAAkB,SAAUwD,GAMxD,IALA,IAAIC,EACAC,EACA/B,EACAgC,GAAU,EACVpI,EAAI,EACDA,EAAI9C,KAAKoK,WAAW,CACvBlB,EAAQ,EACR,IAAIiC,EAAUnL,KAAKqK,WAAWvH,GAe9B,IAdgB,IAAZqI,GACAH,EAAW,IACXC,EAAW,IAGXD,EAAW,EACXC,EAAW,EACPC,IAAWC,IACXJ,EAAOd,cAAckB,KACrBjC,EAAQ,IAGhBgC,EAASC,EACTrI,IACOA,EAAI9C,KAAKoK,WAAac,IAAWlL,KAAKqK,WAAWvH,KACpDA,QACMoG,GAAS8B,MAIf9B,EAAQ+B,EACRF,EAAOd,cAAciB,IAAWhC,EAEhB,IAAXgC,EACLH,EAAOd,cAAc,MAEhBf,GAAS,GACd6B,EAAOd,cAAc,MAGrBc,EAAOd,cAAc,QAQjCtI,EAAsBa,UAAUoG,UAAY,SAAUmC,GAMlD,IALA,IAAIK,EACAC,EACAC,EACAC,GAAqB,EACrBzI,EAAI,EACDA,EAAI9C,KAAKoK,WAAW,CACvBkB,EAAqB,EACrB,IAAIH,EAAUnL,KAAKqK,WAAWvH,GAe9B,IAdgB,IAAZqI,GACAC,EAAiB,IACjBC,EAAiB,IAGjBD,EAAiB,EACjBC,EAAiB,EACbE,IAAsBJ,IACtBJ,EAAOhC,kBAAkBoC,GACzBG,EAAqB,IAG7BC,EAAoBJ,EACpBrI,IACOA,EAAI9C,KAAKoK,WAAamB,IAAsBvL,KAAKqK,WAAWvH,KAC/DA,QACMwI,GAAsBF,MAIhC,GAAIE,EAAqBD,EACrB,KAAOC,KAAuB,GAC1BP,EAAOhC,kBAAkBwC,QAGF,IAAtBA,GACLR,EAAOhC,kBAAkB,IACzB/I,KAAK4J,OAAO7B,uBAAuBuD,EAAqB,EAAG,IAEtDA,GAAsB,IAC3BP,EAAOhC,kBAAkB,IACzB/I,KAAK4J,OAAO7B,uBAAuBuD,EAAqB,EAAG,KAG3DP,EAAOhC,kBAAkB,IACzB/I,KAAK4J,OAAO7B,uBAAuBuD,EAAqB,GAAI,MAQxE3J,EAAsBa,UAAU8E,UAAY,WAKxC,IAAK,IAJDkE,EAAaxL,KAAKiK,cAAclH,OAChC0I,EAAU,IAAItB,WAAWqB,GACzB9C,EAAa,EACbsC,EAAW,EACNU,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACjC,IAAIC,EAAO3L,KAAKiK,cAAcyB,GAC9B,GAAa,IAATC,EAAY,CAGZ,IAFA,IAAIC,EAAMlD,IACNmD,EAAO,EACJD,EAAM,GAAK5L,KAAKiK,cAAcwB,EAAQI,EAAOvK,KAAKC,OAAOqK,EAAM,GAAK,KAAOD,GAC9EF,EAAQG,GAAOH,EAAQI,GACvBD,EAAMC,EAEVJ,EAAQG,GAAOF,EACfV,EAAWU,GAGnB,KAAOhD,EAAa,GAChB+C,EAAQ/C,KACHsC,EAAW,IAAOA,EAAW,EAEtChL,KAAKoK,UAAY9I,KAAKgF,IAAI0E,EAAW,EAAGhL,KAAKgK,cAK7C,IAAK,IAHD8B,EADapD,EAEbqD,EAAQ,IAAI5B,WAAW,EAAIzB,EAAa,GACxCsD,EAAS,IAAI7B,WAAW,EAAIzB,EAAa,GACpC5F,EAAI,EAAGA,EAAI4F,EAAY5F,IAAK,CACjC,IAAImJ,EAAOR,EAAQ3I,GACfoJ,EAAS,EAAIpJ,EACjBiJ,EAAMG,GAAUD,EAChBF,EAAMG,EAAS,IAAM,EACrBF,EAAOlJ,GAAM9C,KAAKiK,cAAcgC,IAAS,EACzCR,EAAQ3I,GAAKA,EAEjB9C,KAAKmM,qBAAqBV,EAAS/C,EAAYsD,EAAQF,EAAYC,GACnE/L,KAAKoM,YAAYL,IAErBpK,EAAsBa,UAAU2J,qBAAuB,SAAUV,EAAS/C,EAAYsD,EAAQF,EAAYC,GACtG,EAAG,CAMC,IALA,IAAIM,EAAQZ,EAAQ,GAChBa,EAAOb,IAAU/C,GACjB6D,EAAUP,EAAOM,GACjBT,EAAO,EACPW,EAAO,EACJA,EAAO9D,GACN8D,EAAO,EAAI9D,GAAcsD,EAAOP,EAAQe,IAASR,EAAOP,EAAQe,EAAO,KACvEA,IAEJf,EAAQI,GAAQJ,EAAQe,GAExBA,EAAc,GADdX,EAAOW,GACW,EAEtB,MAAQA,EAAOX,GAAQ,GAAKG,EAAOP,EAAQI,EAAOvK,KAAKC,OAAOiL,EAAO,GAAK,KAAOD,GAC7Ed,EAAQe,GAAQf,EAAQI,GAE5BJ,EAAQe,GAAQF,EAChB,IAAIG,EAAShB,EAAQ,GAErBM,EAAM,GADNO,EAAOR,MACWO,EAClBN,EAAM,EAAIO,EAAO,GAAKG,EACtB,IAAIC,EAAWpL,KAAKqF,IAAoB,IAAhBqF,EAAOK,GAAgC,IAAjBL,EAAOS,IAKrD,IAJAT,EAAOM,GAAQC,EAAUP,EAAOK,GAASL,EAAOS,GAAUC,EAAW,EACrEb,EAAO,EACPW,EAAO,EAEAA,EAAO9D,GACN8D,EAAO,EAAI9D,GAAcsD,EAAOP,EAAQe,IAASR,EAAOP,EAAQe,EAAO,KACvEA,IAEJf,EAAQI,GAAQJ,EAAQe,GAExBA,EAAc,GADdX,EAAOW,GACW,EAEtB,MAAQA,EAAOX,GAAQ,GAAKG,EAAOP,EAAQI,EAAOvK,KAAKC,OAAOiL,EAAO,GAAK,KAAOD,GAC7Ed,EAAQe,GAAQf,EAAQI,GAE5BJ,EAAQe,GAAQF,QACX5D,EAAa,IAE1B/G,EAAsBa,UAAU4J,YAAc,SAAUL,GACpD/L,KAAKqK,WAAa,IAAI1K,WAAWK,KAAKiK,cAAclH,QAIpD,IAAK,IAHD4J,EAAWrL,KAAKC,MAAMwK,EAAMhJ,OAAS,GACrC6J,EAAWtL,KAAKC,OAAOoL,EAAW,GAAK,GACvCE,EAAW,EACN/J,EAAI,EAAGA,EAAI9C,KAAK+J,UAAWjH,IAChC9C,KAAKkK,YAAYpH,GAAK,EAG1B,GAAiB,KADjB+J,EAAW7M,KAAK8M,2BAA2Bf,EAAOc,EAAUF,IAC5D,CAGA,IAAII,EAAqB/M,KAAK+J,UAAY,EAC1C,EAAG,CACC,KAAkD,IAA3C/J,KAAKkK,cAAc6C,KAG1B,GACI/M,KAAKkK,YAAY6C,KACjB/M,KAAKkK,cAAc6C,KACnBF,GAAa,GAAM7M,KAAK+J,UAAY,EAAIgD,QACnCF,EAAW,GAAKE,EAAqB/M,KAAK+J,UAAY,SAC1D8C,EAAW,GACpB7M,KAAKgN,aAAajB,EAAOc,EAAUD,KAEvCjL,EAAsBa,UAAUwK,aAAe,SAAUjB,EAAOc,EAAUD,GACtE5M,KAAKkK,YAAYlK,KAAK+J,UAAY,IAAM8C,EACxC7M,KAAKkK,YAAYlK,KAAK+J,UAAY,IAAM8C,EAExC,IAAK,IADDI,EAAU,EAAIL,EACT5D,EAAOhJ,KAAK+J,UAAoB,IAATf,EAAYA,IAExC,IADA,IAAI0C,EAAI1L,KAAKkK,YAAYlB,EAAO,GACzB0C,EAAI,GAAG,CACV,IAAIwB,EAAW,EAAInB,EAAMkB,MACI,IAAzBlB,EAAMmB,EAAW,KACjBlN,KAAKqK,WAAW0B,EAAMmB,IAAalE,EACnC0C,OAKhB/J,EAAsBa,UAAUsK,2BAA6B,SAAUf,EAAOc,EAAUF,GACpF,IAAIpC,EAAU,IAAIJ,WAAWwC,GAC7BpC,EAAQoC,EAAW,GAAK,EACxB,IAAK,IAAI7J,EAAI6J,EAAW,EAAG7J,GAAK,EAAGA,IAAK,CACpC,IAAIqK,EAAa,EAAIrK,EAAI,EACzB,IAA2B,IAAvBiJ,EAAMoB,GAAoB,EACtBC,EAAY7C,EAAQzH,GAAK,GACb9C,KAAK+J,YACjBqD,EAAYpN,KAAK+J,UACjB8C,KAEJtC,EAAQwB,EAAMoB,EAAa,IAAM5C,EAAQwB,EAAMoB,IAAeC,MAE7D,CACD,IAAIA,EAAY7C,EAAQzH,GACxB9C,KAAKkK,YAAYkD,EAAY,KAC7BpN,KAAKqK,WAAW0B,EAAMoB,EAAa,IAAM5C,EAAQzH,IAGzD,OAAO+J,GAEXlL,EAAsBmJ,aAAe,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,IACvFnJ,EAAsB+F,sBAAwB,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IACrG/F,KAMPkC,EAAoC,WACpC,SAASA,KAiCT,OAtBAA,EAAmBC,eAAiB,SAAUuJ,EAAUC,EAAQjK,EAAQN,GACpE,IAAIoG,EAAO,IAAIC,YAAY,GAC3BD,EAAK,GAAKkE,EAIV,IAHA,IAAIE,EAAgBpE,EAAK,GACrBqE,EAAKrE,EAAK,GAAqB,MAAhBoE,EACfE,EAAKtE,EAAK,GAAKoE,GAAiB1J,EAAmB6J,kBAChD3K,EAAS,GAAG,CACf,IAAI4K,EAAQrM,KAAKqF,IAAI5D,EAAQc,EAAmB+J,wBAEhD,IADA7K,GAAU4K,IACDA,GAAS,GAEdF,GADAD,GAAWrE,EAAK,GAAyB,IAAnBmE,EAAOjK,KAGjCmK,GAAM3J,EAAmBgK,aACzBJ,GAAM5J,EAAmBgK,aAG7B,OADAN,EAAiBE,GAAM5J,EAAmB6J,kBAAqBF,GAGnE3J,EAAmB6J,kBAAoB,GACvC7J,EAAmBgK,aAAe,MAClChK,EAAmB+J,uBAAyB,KACrC/J,MAMX,WAEI,IADA,IAAIf,EAAI,EACDA,EAAI,KACPtD,EAAgBsD,GAAKnB,EAAsBiJ,WAAY,GAAQ9H,GAAM,GACrEpD,EAAkBoD,KAAO,EAE7B,KAAOA,EAAI,KACPtD,EAAgBsD,GAAKnB,EAAsBiJ,WAAY,IAAc9H,GAAM,GAC3EpD,EAAkBoD,KAAO,EAE7B,KAAOA,EAAI,KACPtD,EAAgBsD,GAAKnB,EAAsBiJ,YAAY,IAAc9H,GAAM,GAC3EpD,EAAkBoD,KAAO,EAE7B,KAAOA,EAAI,KACPtD,EAAgBsD,GAAKnB,EAAsBiJ,YAAY,GAAc9H,GAAM,GAC3EpD,EAAkBoD,KAAO,EAE7B,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAChBlD,EAAiBkD,GAAKnB,EAAsBiJ,WAAW9H,GAAK,IAC5DjD,EAAmBiD,GAAK,EApBhC,GC/7BA,IAAIgL,KAWAC,EAA4B,WAI5B,SAASA,IACL/N,KAAKgO,SACLhO,KAAKiO,MAAQ,SACbC,OAAKC,qBAAwBC,UAAUC,WA8T3C,OA5TA/L,OAAOC,eAAewL,EAAWvL,UAAW,oBAIxCC,IAAK,WACD,OAAOzC,KAAKiO,OAKhBvI,IAAK,SAAUuI,GACXjO,KAAKiO,MAAQA,GAEjBvL,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAewL,EAAWvL,UAAW,UAIxCC,IAAK,WACD,YAAmBI,IAAf7C,KAAKgO,MACE,EAEJhO,KAAKgO,MAAMjL,QAEtBL,YAAY,EACZC,cAAc,IAOlBoL,EAAWvL,UAAU8L,QAAU,SAAUC,GACrC,GAAa,OAATA,QAA0B1L,IAAT0L,EACjB,MAAM,IAAIjL,MAAM,uDAEpB,IAAK,IAAIR,EAAI,EAAGA,EAAI9C,KAAKgO,MAAMjL,OAAQD,IAAK,CACxC,IAAI0L,EAAOxO,KAAKgO,MAAMlL,GACtB,GAAI0L,aAAgBC,GACZD,EAAKE,OAASH,EAAKG,KACnB,MAAM,IAAIpL,MAAM,qCAI5BtD,KAAKgO,MAAMxE,KAAK+E,IAOpBR,EAAWvL,UAAUmM,aAAe,SAAUC,GAC1C,GAAsB,OAAlBA,QAA4C/L,IAAlB+L,EAC1B,MAAM,IAAItL,MAAM,yDAEpB,GAA6B,IAAzBsL,EAAc7L,OACd,MAAM,IAAIO,MAAM,6CAKpB,GAHgC,MAA5BsL,EAAcC,OAAO,KACrBD,GAAiB,MAEsB,IAAvC5O,KAAKgO,MAAMc,QAAQF,GACnB,MAAM,IAAItL,MAAM,qCAEpBtD,KAAKgO,MAAMxE,KAAKoF,IAOpBb,EAAWvL,UAAUuM,QAAU,SAAUC,GACrC,GAAIA,GAAS,GAAKA,EAAQhP,KAAKgO,MAAMjL,OACjC,OAAO/C,KAAKgO,MAAMgB,IAS1BjB,EAAWvL,UAAUyM,SAAW,SAAUV,GACtC,OAAqC,IAA9BvO,KAAKgO,MAAMc,QAAQP,IAO9BR,EAAWvL,UAAU0M,KAAO,SAAUC,GAClC,GAAiB,OAAbA,QAAkCtM,IAAbsM,GAA8C,IAApBA,EAASpM,OACxD,MAAM,IAAIO,MAAM,2DAEpB,GAA0B,IAAtBtD,KAAKgO,MAAMjL,OACX,MAAM,IAAIO,MAAM,oBAEpB,IAAI8L,EAAapP,KAEjB,OAAiB,IAAIqP,QAAQ,SAAUC,EAASC,GAC5CH,EAAWI,aAAaL,GAAU,GAAOM,KAAK,WAC1CH,EAAQF,QAQpBrB,EAAWvL,UAAUkN,WAAa,WAC9B,IAAIN,EAAapP,KAEjB,OAAiB,IAAIqP,QAAQ,SAAUC,EAASC,GAC5CH,EAAWI,aAAa,IAAI,GAAMC,KAAK,SAAUE,GAC7CL,EAAQK,QAIpB5B,EAAWvL,UAAUgN,aAAe,SAAUL,EAAUS,GACpD,IAAIC,EAAQ7P,KACRoP,EAAapP,KAEjB,OAAiB,IAAIqP,QAAQ,SAAUC,EAASC,GAG5C,IAAK,IAFDO,KACAC,EAAY,EACPjN,EAAI,EAAGA,EAAIsM,EAAWpB,MAAMjL,OAAQD,IAAK,CACvB+M,EAAMG,kBAAkBH,EAAM7B,MAAMlL,IAC1C2M,KAAK,SAAUrM,GAE5B,GADA2M,EAAYX,EAAWa,sBAAsBH,EAAS1M,EAAM2M,EAAW3M,EAAK8M,aACxEJ,EAAQ/M,SAAWqM,EAAWpB,MAAMjL,OAAQ,CAC5C,IAAI4M,EAAOP,EAAWe,mBAAmBhB,EAAUW,EAASC,EAAWH,GACvEN,EAAQK,UAU5B5B,EAAWvL,UAAUmH,QAAU,WAC3B,QAAmB9G,IAAf7C,KAAKgO,OAAuBhO,KAAKgO,MAAMjL,OAAS,EAAG,CACnD,IAAK,IAAID,EAAI,EAAGA,EAAI9C,KAAKgO,MAAMjL,OAAQD,IAAK,CACxC,IAAI0L,EAAOxO,KAAKgO,MAAMlL,GAClB0L,aAAgBC,GAChBD,EAAK7E,UAET6E,OAAO3L,EAEX7C,KAAKgO,SAEThO,KAAKgO,WAAQnL,EACb7C,KAAKiO,WAAQpL,GAEjBkL,EAAWvL,UAAUwN,kBAAoB,SAAUzB,GAC/C,IAAIa,EAAapP,KAsCjB,OArCc,IAAIqP,QAAQ,SAAUC,EAASC,GACzC,GAAIhB,aAAgBE,EAAgB,CAChC,IAAI2B,EAAW,IAAIC,WACnBD,EAASE,OAAS,WACd,IAAIC,EAAQ,IAAI5Q,WAAWyQ,EAAS3G,QAChCrG,GACA+L,SAAUZ,EAAKG,KAAM8B,WAAY,EAAGC,kBACpCC,oBAAgB7N,EAAW8N,qBAAsBJ,EAAMxN,OAAQ6N,qBAAiB/N,EAChFqN,aAAa,GAEjB,GAAyB,WAArBd,EAAWnB,MAAoB,CAC/BmB,EAAWpL,aAAauM,EAAOnN,EAAM0K,GAErC,IAAK,IADD+C,EAAW,EACN/N,EAAI,EAAGA,EAAIM,EAAKqN,eAAe1N,OAAQD,IAC5C+N,GAAYzN,EAAKqN,eAAe3N,GAAGC,OAEvCK,EAAKsN,eAAiBG,EACtBzN,EAAKwN,gBAAkB,YAGvBxN,EAAKsN,eAAiBH,EAAMxN,OAC5BK,EAAKoN,WAAapB,EAAW0B,oBAAoB,EAAGP,EAAOzC,GAC3D1K,EAAKwN,gBAAkB,OACvBxN,EAAKqN,eAAejH,KAAK+G,GAE7BjB,EAAQlM,IAEZgN,EAASW,kBAAkBxC,EAAKnL,UAE/B,CAKDkM,GAHIH,SAAUZ,EAAMiC,WAAY,EAAGC,eAAgB,GAAIC,eAAgB,EAAGC,qBAAsB,EAC5FC,gBAAiB,OAAYV,aAAa,QAO1DnC,EAAWvL,UAAUwB,aAAe,SAAUuM,EAAOnN,EAAM0K,GACvD,IAAIkD,EAAa,IAAIlR,GAAuB,GACxCmR,EAAe,EACfC,EAAY,EAChB,EAAG,CACC,GAAID,GAAgBV,EAAMxN,OAAQ,CAC9BiO,EAAWtH,QACX,MAEJwH,EAAY5P,KAAKqF,IAAI4J,EAAMxN,OAAQkO,EAAe,OAClD,IAAIE,EAAWZ,EAAM5K,SAASsL,EAAcC,GAC5C9N,EAAKoN,WAAaxQ,KAAK8Q,oBAAoB1N,EAAKoN,WAAYW,EAAUrD,GACtEkD,EAAW7N,MAAMgO,EAAU,EAAGD,EAAYD,GAC1CA,EAAeC,QACVD,GAAgBV,EAAMxN,QAC/BK,EAAKqN,eAAiBO,EAAWP,eACjCO,EAAWrH,WAEfoE,EAAWvL,UAAUyN,sBAAwB,SAAUmB,EAAUhO,EAAM2M,EAAWG,GAC9E,IAAImB,EAAc,EACdC,EAAO,IAAIC,KACXrB,IACAmB,GAA4B,IAEhCA,KACA,IAAIG,EAASxR,KAAKyR,YAAYrO,EAAMkO,GAChCI,EAAc,OAAeF,EAASpO,EAAK+L,SAC3CwC,EAAa3R,KAAK4R,sBAAsBxO,EAAMoO,EAAQzB,EAAWsB,GAErE,OADAD,EAAS5H,MAAOkI,YAAaA,EAAaC,WAAYA,EAAYlB,eAAgBrN,IAC3E2M,EAAY2B,EAAY3O,OAASK,EAAKsN,gBAEjD3C,EAAWvL,UAAUiP,YAAc,SAAUrO,EAAMkO,GAC/C,IAAIO,EAAY,GAUhB,OATAA,GAAa,WACbA,GAAazO,EAAKwN,gBAClBiB,GAAa7R,KAAK2D,SAAS3D,KAAK8R,gBAAgBR,GAAO,GACvDO,GAAa7R,KAAK2D,SAAS3D,KAAK+R,gBAAgBT,GAAO,GACvDO,GAAa7R,KAAK2D,SAASP,EAAKoN,WAAY,GAC5CqB,GAAa7R,KAAK2D,SAASP,EAAKsN,eAAgB,GAChDmB,GAAa7R,KAAK2D,SAASP,EAAKuN,qBAAsB,GACtDkB,GAAa7R,KAAK2D,SAASP,EAAK+L,SAASpM,OAAQ,GACjD8O,GAAa7R,KAAK2D,SAAS,EAAG,IAGlCoK,EAAWvL,UAAU2N,mBAAqB,SAAUhB,EAAUW,EAASkC,EAAapC,GAGhF,IAAK,IAFDqC,EAAY,EACZ3E,KACKxK,EAAI,EAAGA,EAAIgN,EAAQ/M,OAAQD,IAAK,CACrC,IAAIyL,EAAOuB,EAAQhN,GAGnB,IAFAmP,GAAa1D,EAAKoD,WAAW5O,OAC7BuK,EAAO9D,KAAKxJ,KAAKkS,eAAe3D,EAAKmD,cAC9BnD,EAAKkC,eAAeA,eAAe1N,QACtCuK,EAAO9D,KAAK+E,EAAKkC,eAAeA,eAAe0B,QAAQ7E,QAG/D,IAASxK,EAAI,EAAGA,EAAIgN,EAAQ/M,OAAQD,IAChCwK,EAAO9D,KAAKxJ,KAAKkS,eAAepC,EAAQhN,GAAG6O,aAE/CrE,EAAO9D,KAAKxJ,KAAKkS,eAAelS,KAAKoS,YAAYtC,EAASmC,EAAWD,KACrE,IAAIrC,EAAO,IAAI0C,KAAK/E,GAAU5J,KAAM,oBAIpC,OAHKkM,GACD1B,OAAKgB,KAAKC,EAAUQ,GAEjBA,GAEX5B,EAAWvL,UAAUoP,sBAAwB,SAAUxO,EAAMsO,EAAarO,EAAQiP,GAQ9E,MAPsB,OAClBtS,KAAK2D,SAAS,GAAQ,GAAK+N,EAC3B1R,KAAK2D,SAAS,EAAG,GACjB,WACA3D,KAAK2D,SAAS2O,EAAuB,GACrCtS,KAAK2D,SAASN,EAAQ,GACtBD,EAAK+L,UAGbpB,EAAWvL,UAAU4P,YAAc,SAAUtC,EAASyC,EAAeC,GAKjE,MAJa,eACTxS,KAAK2D,SAASmM,EAAQ/M,OAAQ,GAAK/C,KAAK2D,SAASmM,EAAQ/M,OAAQ,GACjE/C,KAAK2D,SAAS4O,EAAe,GAAKvS,KAAK2D,SAAS6O,EAAa,GAC7DxS,KAAK2D,SAAS,EAAG,IAGzBoK,EAAWvL,UAAU0P,eAAiB,SAAU3B,GAE5C,IAAK,IADDkC,EAAI,IAAI9S,WAAW4Q,EAAMxN,QACpB2P,EAAI,EAAGA,EAAInC,EAAMxN,SAAU2P,EAChCD,EAAEC,GAA2B,IAAtBnC,EAAMoC,WAAWD,GAE5B,OAAOD,EAAEnF,QAEbS,EAAWvL,UAAUmB,SAAW,SAAUkH,EAAOxH,GAE7C,IAAK,IADDuP,EAAQ,GACH9P,EAAI,EAAGA,EAAIO,EAAQP,IACxB8P,GAAS5P,OAAOC,aAAqB,IAAR4H,GAC7BA,KAAkB,EAEtB,OAAO+H,GAEX7E,EAAWvL,UAAUsP,gBAAkB,SAAUR,GAC7C,IAAIuB,EAAUvB,EAAKwB,WAInB,OAHAD,IAAqB,EACrBA,GAAoBvB,EAAKyB,aACzBF,IAAqB,EACdA,GAAoBvB,EAAK0B,aAAe,GAEnDjF,EAAWvL,UAAUuP,gBAAkB,SAAUT,GAC7C,IAAI2B,EAAW3B,EAAK4B,cAAgB,KAIpC,OAHAD,IAAuB,EACvBA,GAAuB3B,EAAK6B,WAAa,EACzCF,IAAuB,EAChBA,GAAsB3B,EAAK8B,WAEtCrF,EAAWvL,UAAUsO,oBAAsB,SAAUN,EAAYD,EAAOzC,GACpE0C,IAAe,EACf,IAAK,IAAI1N,EAAI,EAAGA,EAAIyN,EAAMxN,OAAQD,IAC9B0N,EAAcA,IAAe,EAAK1C,EAAqC,KAAzB0C,EAAaD,EAAMzN,KAErE,OAAuB,EAAf0N,GAELzC,KASPU,EAAgC,WAMhC,SAASA,EAAerL,EAAMiQ,GAC1B,GAAa,OAATjQ,QAA0BP,IAATO,EACjB,MAAM,IAAIE,MAAM,uDAEpB,GAAiB,OAAb+P,QAAkCxQ,IAAbwQ,EACrB,MAAM,IAAI/P,MAAM,yDAEpB,GAAwB,IAApB+P,EAAStQ,OACT,MAAM,IAAIO,MAAM,0BAEpBtD,KAAKoD,KAAOA,EACZpD,KAAK0O,KAAO2E,EA4BhB,OA1BA/Q,OAAOC,eAAekM,EAAejM,UAAW,QAK5CC,IAAK,WACD,OAAOzC,KAAKmP,UAMhBzJ,IAAK,SAAUmF,GACX7K,KAAKmP,SAAWtE,GAEpBnI,YAAY,EACZC,cAAc,IAMlB8L,EAAejM,UAAUmH,QAAU,WAC/B3J,KAAKmP,cAAWtM,EAChB7C,KAAKoD,UAAOP,GAET4L,MAMX,WAEI,IAAK,IADD3L,EACK4P,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B5P,EAAI4P,EACJ,IAAK,IAAIY,EAAI,EAAGA,EAAI,EAAGA,IACnBxQ,EAAU,EAAJA,EAAU,WAAcA,IAAM,EAAOA,IAAM,EAErDgL,EAAW4E,GAAK5P,GAPxB"}