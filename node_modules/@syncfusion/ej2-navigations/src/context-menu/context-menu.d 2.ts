import { Component, ChildProperty, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { EmitType, BaseEventArgs } from '@syncfusion/ej2-base';
import { ContextMenuModel, MenuItemModel } from './context-menu-model';
/**
 * Menu animation effects
 */
export declare type MenuEffect = 'None' | 'SlideDown' | 'ZoomIn' | 'FadeIn';
/**
 * Specifies context menu items.
 */
export declare class MenuItem extends ChildProperty<MenuItem> {
    /**
     * Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.
     * Menu Item can include font icon and sprite image.
     * @default ''
     */
    iconCss: string;
    /**
     * Specifies the id for menu item.
     * @default ''
     */
    id: string;
    /**
     * Specifies separator between the menu items. Separator are horizontal lines used to group menu items.
     * @default false
     */
    separator: boolean;
    /**
     * Specifies the sub menu items that is the array of MenuItem model.
     * @default []
     */
    items: MenuItemModel[];
    /**
     * Specifies text for menu item.
     * @default ''
     */
    text: string;
    /**
     * Specifies url for menu item that creates the anchor link to navigate to the url provided.
     * @default ''
     */
    url: string;
}
/**
 * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
 * ```html
 * <div id = 'target'></div>
 * <ul id = 'contextmenu'></ul>
 * ```
 * ```typescript
 * <script>
 * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});
 * </script>
 * ```
 */
export declare class ContextMenu extends Component<HTMLUListElement> implements INotifyPropertyChanged {
    private animation;
    private ngElement;
    private navIdx;
    private isTapHold;
    private targetElement;
    private delegateClickHandler;
    /**
     * Defines class/multiple classes separated by a space in the ContextMenu wrapper.
     * ContextMenu customization can be achieved by using this.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies the filter selector for elements inside the target in that the context menu will be opened.
     * @default ''
     */
    filter: string;
    /**
     * Specifies whether to show the sub menu or not on click.
     * When set to true, the sub menu will open only on mouse click.
     * @default false
     */
    showItemOnClick: boolean;
    /**
     * Specifies menu items with its properties which will be rendered as Context Menu.
     * @default []
     */
    items: MenuItemModel[];
    /**
     * Specifies target element selector in which the ContextMenu should be opened.
     * @default ''
     */
    target: string;
    /**
     * Specifies the animation settings for the sub menu open.
     * @default { duration: 400, easing: 'ease', effect: 'SlideDown' }
     */
    animationSettings: MenuAnimationSettings;
    /**
     * Triggers while rendering each menu item.
     * @event
     */
    beforeItemRender: EmitType<MenuEventArgs>;
    /**
     * Triggers before opening the menu item.
     * @event
     */
    beforeOpen: EmitType<BeforeOpenCloseMenuEventArgs>;
    /**
     * Triggers while opening the menu item.
     * @event
     */
    onOpen: EmitType<OpenCloseMenuEventArgs>;
    /**
     * Triggers before closing the menu.
     * @event
     */
    beforeClose: EmitType<BeforeOpenCloseMenuEventArgs>;
    /**
     * Triggers while closing the menu.
     * @event
     */
    onClose: EmitType<OpenCloseMenuEventArgs>;
    /**
     * Triggers while selecting menu item.
     * @event
     */
    select: EmitType<MenuEventArgs>;
    /**
     * Constructor for creating the widget.
     * @private
     */
    constructor(options?: ContextMenuModel, element?: string | HTMLUListElement);
    /**
     * Initialized animation with parent menu animation settings.
     * @private
     */
    protected preRender(): void;
    /**
     * Initialize the control rendering
     * @private
     */
    protected render(): void;
    private initWrapper();
    private renderItems();
    private wireEvents();
    private mouseDownHandler(e);
    private keyBoardHandler(e);
    private upDownKeyHandler(e);
    private isValidLI(cli, index, action);
    private rightEnterKeyHandler(e);
    private leftEscKeyHandler(e);
    private scrollHandler(e);
    private touchHandler(e);
    private cmenuHandler(e);
    /**
     * Closes the ContextMenu if it is opened.
     */
    close(): void;
    private closeMenu(ulIndex?, e?);
    private isMenuVisible();
    private canOpen(target);
    /**
     * This method is used to open the ContextMenu in specified position.
     * @param top - To specify ContextMenu vertical positioning.
     * @param left - To specify ContextMenu horizontal positioning.
     * @param target - To calculate z-index for ContextMenu based upon the specified target.
     * @method open
     * @returns void
     */
    open(top: number, left: number, target?: HTMLElement): void;
    private openMenu(li, item, top?, left?, e?, target?);
    private setPosition(li, ul, top, left);
    private toggleVisiblity(ul, isVisible?);
    private createItems(items);
    private toRawObject(items);
    private moverHandler(e);
    private hasField(items, field);
    private getWrapper();
    private clickHandler(e);
    private setLISelected(li);
    private getLIByClass(ul, classname);
    private getItem(navIdx);
    private getItems(navIdx);
    private getIdx(ul, li, skipHdr?);
    private getLI(elem);
    /**
     * Called internally if any of the property value changed
     * @private
     * @param {ContextMenuModel} newProp
     * @param {ContextMenuModel} oldProp
     * @returns void
     */
    onPropertyChanged(newProp: ContextMenuModel, oldProp: ContextMenuModel): void;
    private getChangedItemIndex(newProp, index, idx);
    private removeItem(item, navIdx, idx);
    /**
     * Used to unwire the bind events.
     * @private
     */
    protected unWireEvents(): void;
    private toggleAnimation(ul, isMenuOpen?);
    private end(ul, isMenuOpen);
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     */
    protected getPersistData(): string;
    /**
     * Get component name.
     * @returns string
     * @private
     */
    protected getModuleName(): string;
    private getIndex(data, isUniqueId?, items?, navIdx?, isCallBack?);
    /**
     * This method is used to enable or disable the menu items in the ContextMenu based on the items and enable argument.
     * @param items - Text items that needs to be enabled/disabled.
     * @param enable - Set `true`/`false` to enable/disable the list items.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    enableItems(items: string[], enable?: boolean, isUniqueId?: boolean): void;
    /**
     * This method is used to show the menu items in the ContextMenu based on the items text.
     * @param items - Text items that needs to be shown.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    showItems(items: string[], isUniqueId?: boolean): void;
    /**
     * This method is used to hide the menu items in the ContextMenu based on the items text.
     * @param items - Text items that needs to be hidden.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    hideItems(items: string[], isUniqueId?: boolean): void;
    private showHideItems(items, ishide, isUniqueId?);
    /**
     * It is used to remove the menu items from the ContextMenu based on the items text.
     * @param items - Text items that needs to be removed.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    removeItems(items: string[], isUniqueId?: boolean): void;
    /**
     * It is used to insert the menu items after the specified menu item text.
     * @param items - Items that needs to be inserted.
     * @param text - Text item after that the element to be inserted.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    insertAfter(items: MenuItemModel[], text: string, isUniqueId?: boolean): void;
    /**
     * It is used to insert the menu items before the specified menu item text.
     * @param items - Items that needs to be inserted.
     * @param text - Text item before that the element to be inserted.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */
    insertBefore(items: MenuItemModel[], text: string, isUniqueId?: boolean): void;
    private insertItems(items, text, isUniqueId?, isAfter?);
    /**
     * Destroys the widget.
     * @returns void
     */
    destroy(): void;
}
/**
 * Interface for before item render / select event.
 * @private
 */
export interface MenuEventArgs extends BaseEventArgs {
    element: HTMLElement;
    item: MenuItemModel;
}
/**
 * Interface for before open / close event.
 * @private
 */
export interface BeforeOpenCloseMenuEventArgs extends BaseEventArgs {
    element: HTMLElement;
    items: MenuItemModel[];
    parentItem: MenuItemModel;
    event: Event;
    cancel: boolean;
}
/**
 * Interface for open/close event.
 */
export interface OpenCloseMenuEventArgs extends BaseEventArgs {
    element: HTMLElement;
    items: MenuItemModel[];
    parentItem: MenuItemModel;
}
/**
 * Animation configuration settings.
 */
export interface MenuAnimationSettings {
    /**
     * Specifies the effect that shown in the sub menu transform.
     * The possible effects are:
     * * None: Specifies the sub menu transform with no animation effect.
     * * SlideDown: Specifies the sub menu transform with slide down effect.
     * * ZoomIn: Specifies the sub menu transform with zoom in effect.
     * * FadeIn: Specifies the sub menu transform with fade in effect.
     */
    effect?: MenuEffect;
    /**
     * Specifies the time duration to transform object.
     */
    duration?: number;
    /**
     * Specifies the easing effect applied while transform.
     */
    easing?: string;
}
export interface ListBaseMenuModel extends MenuItemModel {
    htmlAttributes: {
        [key: string]: string;
    };
}
