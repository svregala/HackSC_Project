import { Size, Rect } from '../../common/utils/helper';
import { AccPoints } from '../model/acc-base';
import { AccumulationDataLabelSettingsModel } from '../model/acc-base-model';
import { AccumulationChart } from '../accumulation';
import { AccumulationBase } from './accumulation-base';
/**
 * AccumulationDataLabel module used to render `dataLabel`.
 */
export declare class AccumulationDataLabel extends AccumulationBase {
    /** @private */
    titleRect: Rect;
    /** @private */
    areaRect: Rect;
    /** @private */
    clearTooltip: number;
    private id;
    marginValue: number;
    constructor(accumulation: AccumulationChart);
    /**
     * Method to get datalabel text location.
     * @private
     */
    getDataLabelPosition(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, textSize: Size, points: AccPoints[], parent: Element, id: string): void;
    /**
     * Method to get datalabel bound.
     */
    private getLabelRegion(point, position, textSize, labelRadius, margin, endAngle?);
    /**
     * Method to get datalabel smart position.
     */
    private getSmartLabel(point, dataLabel, textSize, points, parent, id);
    /**
     * To find trimmed datalabel tooltip needed.
     * @return {void}
     * @private
     */
    move(e: Event, x: number, y: number, isTouch?: boolean): void;
    /**
     * To find previous valid label point
     */
    private findPreviousPoint(points, index, position);
    /**
     * To find current point datalabel is overlapping with other points
     */
    private isOverlapping(currentPoint, points);
    /**
     * To get text trimmed while exceeds the accumulation chart area.
     */
    private textTrimming(point, rect, font, position);
    /**
     * To set point label visible and region to disable.
     */
    private setPointVisibileFalse(point);
    /**
     * To set datalabel angle position for outside labels
     */
    private setOuterSmartLabel(previousPoint, point, border, labelRadius, textsize, margin);
    /**
     * Sets smart label positions for funnel and pyramid series
     */
    private setSmartLabelForSegments(point, prevPoint, distance, textSize, margin);
    /**
     * To find connector line overlapping.
     */
    private isConnectorLineOverlapping(point, previous);
    /**
     * To find two rectangle intersect
     */
    private isLineRectangleIntersect(line1, line2, rect);
    /**
     * To find two line intersect
     */
    private isLinesIntersect(point1, point2, point11, point12);
    /**
     * To get two rectangle overlapping angles.
     */
    private getOverlappedAngle(first, second, angle, padding);
    /**
     * To get connector line path
     */
    private getConnectorPath(label, point, dataLabel, end?);
    /**
     * Finds the curved path for funnel/pyramid data label connectors
     */
    private getPolyLinePath(start, end);
    /**
     * Finds the bezier point for funnel/pyramid data label connectors
     */
    private getBezierPoint(t, controlPoints, index, count);
    /**
     * To get label edges based on the center and label rect position.
     */
    private getEdgeOfLabel(labelshape, angle, middle, border?);
    /**
     * Finds the distance between the label position and the edge/center of the funnel/pyramid
     */
    private getLabelDistance(point, dataLabel);
    /**
     * Finds the label position / beginning of the connector(ouside funnel labels)
     */
    private getLabelLocation(point, position?);
    /**
     * Finds the beginning of connector line
     */
    private getConnectorStartPoint(point, connector);
    /**
     * To find area rect based on margin, available size.
     * @private
     */
    findAreaRect(): void;
    /**
     * To render the data labels from series points.
     */
    renderDataLabel(point: AccPoints, dataLabel: AccumulationDataLabelSettingsModel, parent: Element, points: AccPoints[], series: number, templateElement?: HTMLElement): void;
    /**
     * To find the template element size
     * @param element
     * @param point
     * @param argsData
     */
    private getTemplateSize(element, point, argsData);
    /**
     * To set the template element style
     * @param childElement
     * @param point
     * @param parent
     * @param labelColor
     * @param fill
     */
    private setTemplateStyle(childElement, point, parent, labelColor, fill);
    /**
     * To find saturated color for datalabel
     */
    private getSaturatedColor(point, color);
    /**
     * Animates the data label template.
     * @return {void}.
     * @private
     */
    doTemplateAnimation(accumulation: AccumulationChart, element: Element): void;
    /**
     * To find background color for the datalabel
     */
    private getLabelBackground(point);
    /**
     * To correct the padding between datalabel regions.
     */
    private correctLabelRegion(labelRegion, textSize, padding?);
    /**
     * To get the dataLabel module name
     */
    protected getModuleName(): string;
    /**
     * To destroy the data label.
     * @return {void}
     * @private
     */
    destroy(accumulation: AccumulationChart): void;
}
