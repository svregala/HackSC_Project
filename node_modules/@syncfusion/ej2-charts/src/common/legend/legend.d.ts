import { ChildProperty } from '@syncfusion/ej2-base';
import { Chart } from '../../chart';
import { LegendSettingsModel, LocationModel } from './legend-model';
import { FontModel, BorderModel } from '../model/base-model';
import { Size, Rect, ChartLocation } from '../utils/helper';
import { LegendPosition, LegendShape, ChartSeriesType, ChartShape } from '../../chart/utils/enum';
import { Legend } from '../../chart/legend/legend';
import { AccumulationType } from '../../accumulation-chart/model/enum';
import { AccumulationChart } from '../../accumulation-chart/accumulation';
import { AccumulationLegend } from '../../accumulation-chart/renderer/legend';
import { Alignment } from '../utils/enum';
/**
 * Configures the location for the legend.
 */
export declare class Location extends ChildProperty<Location> {
    /**
     * X coordinate of the legend in pixels.
     * @default 0
     */
    x: number;
    /**
     * Y coordinate of the legend in pixels.
     * @default 0
     */
    y: number;
}
/**
 * Configures the legends in charts.
 */
export declare class LegendSettings extends ChildProperty<LegendSettings> {
    /**
     * If set to true, legend will be visible.
     * @default true
     */
    visible: boolean;
    /**
     * The height of the legend in pixels.
     * @default null
     */
    height: string;
    /**
     * The width of the legend in pixels.
     * @default null
     */
    width: string;
    /**
     * Specifies the location of the legend, relative to the chart.
     * If x is 20, legend moves by 20 pixels to the right of the chart. It requires the `position` to be `Custom`.
     * ```html
     * <div id='Chart'></div>
     * ```
     * ```typescript
     * let chart: Chart = new Chart({
     * ...
     *   legendSettings: {
     *     visible: true,
     *     position: 'Custom',
     *     location: { x: 100, y: 150 },
     *   },
     * ...
     * });
     * chart.appendTo('#Chart');
     * ```
     */
    location: LocationModel;
    /**
     * Position of the legend in the chart are,
     * * Auto: Places the legend based on area type.
     * * Top: Displays the legend at the top of the chart.
     * * Left: Displays the legend at the left of the chart.
     * * Bottom: Displays the legend at the bottom of the chart.
     * * Right: Displays the legend at the right of the chart.
     * * Custom: Displays the legend  based on the given x and y values.
     * @default 'Auto'
     */
    position: LegendPosition;
    /**
     * Option to customize the padding between legend items.
     * @default 8
     */
    padding: number;
    /**
     * Legend in chart can be aligned as follows:
     * * Near: Aligns the legend to the left of the chart.
     * * Center: Aligns the legend to the center of the chart.
     * * Far: Aligns the legend to the right of the chart.
     * @default 'Center'
     */
    alignment: Alignment;
    /**
     * Options to customize the legend text.
     */
    textStyle: FontModel;
    /**
     * Shape height of the legend in pixels.
     * @default 10
     */
    shapeHeight: number;
    /**
     * Shape width of the legend in pixels.
     * @default 10
     */
    shapeWidth: number;
    /**
     * Options to customize the border of the legend.
     */
    border: BorderModel;
    /**
     * Padding between the legend shape and text.
     * @default 5
     */
    shapePadding: number;
    /**
     * The background color of the legend that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background: string;
    /**
     * Opacity of the legend.
     * @default 1
     */
    opacity: number;
    /**
     * If set to true, series' visibility collapses based on the legend visibility.
     * @default true
     */
    toggleVisibility: boolean;
    /**
     * Description for legends.
     * @default null
     */
    description: string;
    /**
     * TabIndex value for the legend.
     * @default 3
     */
    tabIndex: number;
}
/**
 * Legend base class for Chart and Accumulation chart.
 * @private
 */
export declare class BaseLegend {
    protected chart: Chart | AccumulationChart;
    protected legend: LegendSettingsModel;
    protected maxItemHeight: number;
    protected isPaging: boolean;
    private clipPathHeight;
    totalPages: number;
    protected isVertical: boolean;
    private rowCount;
    private columnCount;
    private pageButtonSize;
    protected pageXCollections: number[];
    protected maxColumns: number;
    private isTrimmed;
    maxWidth: number;
    protected legendID: string;
    private clipRect;
    private legendTranslateGroup;
    private currentPage;
    private isChartControl;
    protected library: Legend | AccumulationLegend;
    /**  @private */
    position: LegendPosition;
    /**
     * Gets the legend bounds in chart.
     * @private
     */
    legendBounds: Rect;
    /** @private */
    legendCollections: LegendOptions[];
    /** @private */
    clearTooltip: number;
    /**
     * Constructor for the dateTime module.
     * @private
     */
    constructor(chart?: Chart | AccumulationChart);
    /**
     * Calculate the bounds for the legends.
     * @return {void}
     * @private
     */
    calculateLegendBounds(rect: Rect, availableSize: Size): void;
    /**
     * To find legend position based on available size for chart and accumulation chart
     */
    private getPosition(position, availableSize);
    /**
     * To set bounds for chart and accumulation chart
     */
    protected setBounds(computedWidth: number, computedHeight: number, legend: LegendSettingsModel, legendBounds: Rect): void;
    /**
     * To find legend location based on position, alignment for chart and accumulation chart
     */
    private getLocation(position, alignment, legendBounds, rect, availableSize);
    /**
     * To find legend alignment for chart and accumulation chart
     */
    private alignLegend(start, size, legendSize, alignment);
    /**
     * Renders the legend.
     * @return {void}
     * @private
     */
    renderLegend(chart: Chart | AccumulationChart, legend: LegendSettingsModel, legendBounds: Rect): void;
    /**
     * To find first valid legend text index for chart and accumulation chart
     */
    private findFirstLegendPosition(legendCollection);
    /**
     * To create legend rendering elements for chart and accumulation chart
     */
    private createLegendElements(chart, legendBounds, legendGroup, legend, id);
    /**
     * To render legend symbols for chart and accumulation chart
     */
    private renderSymbol(legendOption, group, i);
    /**
     * To render legend text for chart and accumulation chart
     */
    private renderText(chart, legendOption, group, textOptions, i);
    /**
     * To render legend paging elements for chart and accumulation chart
     */
    private renderPagingElements(chart, bounds, textOption, legendGroup);
    /**
     * To translate legend pages for chart and accumulation chart
     */
    protected translatePage(pagingText: Element, page: number, pageNumber: number): void;
    /**
     * To change legend pages for chart and accumulation chart
     */
    protected changePage(event: Event, pageUp: boolean): void;
    /**
     * To find legend elements id based on chart or accumulation chart
     * @private
     */
    generateId(option: LegendOptions, prefix: string, count: number): string;
    /**
     * To show or hide trimmed text tooltip for legend.
     * @return {void}
     * @private
     */
    move(event: Event): void;
}
/**
 * Class for legend options
 * @private
 */
export declare class LegendOptions {
    render: boolean;
    text: string;
    fill: string;
    shape: LegendShape;
    visible: boolean;
    type: ChartSeriesType | AccumulationType;
    textSize: Size;
    location: ChartLocation;
    pointIndex?: number;
    seriesIndex?: number;
    markerShape?: ChartShape;
    markerVisibility?: boolean;
    constructor(text: string, fill: string, shape: LegendShape, visible: boolean, type: ChartSeriesType | AccumulationType, markerShape?: ChartShape, markerVisibility?: boolean, pointIndex?: number, seriesIndex?: number);
}
