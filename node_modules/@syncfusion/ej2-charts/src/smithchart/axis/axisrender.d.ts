/**
 *
 */
import { Smithchart } from '../../smithchart';
import { SmithchartRect, HorizontalLabelCollection, LabelCollection, Point, Direction } from '../../smithchart/utils/utils';
import { GridArcPoints, RadialLabelCollections } from '../../smithchart/utils/utils';
import { RenderType } from '../../smithchart/utils/enum';
export declare class AxisRender {
    areaRadius: number;
    circleLeftX: number;
    circleTopY: number;
    circleCenterX: number;
    circleCenterY: number;
    radialLabels: number[];
    radialLabelCollections: LabelCollection[];
    horizontalLabelCollections: HorizontalLabelCollection[];
    majorHGridArcPoints: GridArcPoints[];
    minorHGridArcPoints: GridArcPoints[];
    majorRGridArcPoints: GridArcPoints[];
    minorGridArcPoints: GridArcPoints[];
    labelCollections: RadialLabelCollections[];
    direction: Direction;
    renderArea(smithchart: Smithchart, bounds: SmithchartRect): void;
    private updateHAxis(smithchart);
    private updateRAxis(smithchart);
    private measureHorizontalAxis(smithchart);
    private measureRadialAxis(smithchart);
    private calculateChartArea(smithchart, bounds);
    private calculateCircleMargin(smithchart, bounds);
    private maximumLabelLength(smithchart);
    private calculateAxisLabels();
    private isOverlap(x, d, previousR, spacingBetweenGridLines);
    private calculateXAxisRange(smithchart);
    private calculateRAxisRange(smithchart);
    private measureHMajorGridLines(smithchart);
    private measureRMajorGridLines(smithchart);
    private circleXYRadianValue(centerX, centerY, outterX, outterY);
    private calculateMajorArcStartEndPoints(radialPoint, value, smithchart);
    private calculateHMajorArcStartEndPoints(value);
    private calculateMinorArcStartEndPoints(value);
    intersectingCirclePoints(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number, renderType: RenderType): Point;
    private updateHMajorGridLines(smithchart);
    private updateRMajorGridLines(smithchart);
    private updateHAxisLine(smithchart);
    private updateRAxisLine(smithchart);
    private drawHAxisLabels(smithchart);
    private drawRAxisLabels(smithchart);
    private calculateRegion(label, textSize, textPositionX, textPositionY);
    private updateHMinorGridLines(smithchart);
    private updateRMinorGridLines(smithchart);
    private calculateGridLinesPath(points);
    private measureHMinorGridLines(smithchart);
    private measureRMinorGridLines(smithchart);
    private minorGridLineArcIntersectCircle(centerValue);
    private circlePointPosition(cx, cy, angle, r);
    private setLabelsInsidePosition(angle, px, py, textSize);
    private setLabelsOutsidePosition(angle, px, py, textSize);
    private arcRadius(startPoint, endPoint, angle);
}
