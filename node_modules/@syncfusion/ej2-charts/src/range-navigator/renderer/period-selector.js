import { createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';
import { Toolbar } from '@syncfusion/ej2-navigations';
import { DateRangePicker } from '@syncfusion/ej2-calendars';
import { getElement } from '../../common/utils/helper';
/**
 * Period selector class
 */
var PeriodSelector = /** @class */ (function () {
    //constructor for period selector
    function PeriodSelector(rangeNavigator) {
        this.control = rangeNavigator;
    }
    /**
     * renderSelector div
     * @param control
     */
    PeriodSelector.prototype.renderSelectorElement = function (control) {
        //render border
        var periodSelectorSize = this.periodSelectorSize;
        var thumbSize = control.themeStyle.thumbWidth;
        this.periodSelectorDiv = createElement('div', {
            id: control.element.id + '_Secondary_Element',
            styles: 'width: ' + (this.periodSelectorSize.width - thumbSize) + 'px;height: ' +
                this.periodSelectorSize.height + 'px;top:' +
                this.periodSelectorSize.y + 'px;left:' +
                (this.periodSelectorSize.x + thumbSize / 2) + 'px; position: absolute'
        });
        this.control.element.appendChild(this.periodSelectorDiv);
    };
    /**
     * renderSelector elements
     */
    PeriodSelector.prototype.renderSelector = function () {
        var _this = this;
        var selectorElement = createElement('div', { id: this.control.element.id + '_selector' });
        this.periodSelectorDiv.appendChild(selectorElement);
        //render toolbar
        var selector = [];
        var buttons = this.control.periodSelectorSettings.periods;
        for (var i = 0; i < buttons.length; i++) {
            selector.push({ align: 'Left', text: buttons[i].text });
        }
        this.calendarId = this.control.element.id + '_calendar';
        selector.push({ template: '<div><input type="text" id=' + this.calendarId + '></input></div>', align: 'Right' });
        var selctorArgs = {
            selector: selector,
            name: 'RangeSelector',
            cancel: false,
            enableCustomFormat: false,
            content: ''
        };
        this.control.trigger('selectorRender', selctorArgs);
        this.toolbar = new Toolbar({
            items: selctorArgs.selector, height: this.periodSelectorSize.height,
            clicked: function (args) {
                _this.buttonClick(args, _this.control);
            }, created: function () {
                _this.nodes = _this.toolbar.element.querySelectorAll('.e-toolbar-left')[0];
                if (isNullOrUndefined(_this.selectedIndex)) {
                    buttons.map(function (period, index) {
                        if (period.selected) {
                            _this.control.startValue = _this.changedRange(period.intervalType, _this.control.endValue, period.interval).getTime();
                            _this.selectedIndex = (_this.nodes.childNodes.length - buttons.length) + index;
                        }
                    });
                }
                _this.setSelectedStyle(_this.selectedIndex);
            }
        });
        this.toolbar.appendTo(selectorElement);
        this.triggerChange = true;
        //render calendar
        this.datePicker = new DateRangePicker({
            min: new Date(this.control.chartSeries.xMin),
            max: new Date(this.control.chartSeries.xMax),
            format: 'dd\'\/\'MM\'\/\'yyyy',
            placeholder: 'Select a range',
            showClearButton: false,
            startDate: new Date(this.control.startValue),
            endDate: new Date(this.control.endValue),
            created: function (args) {
                if (selctorArgs.enableCustomFormat) {
                    var datePickerElement = document.getElementsByClassName('e-date-range-wrapper')[0];
                    datePickerElement.style.display = 'none';
                    datePickerElement.insertAdjacentElement('afterend', createElement('div', { id: 'customRange',
                        innerHTML: selctorArgs.content, className: 'e-btn e-small' }));
                    getElement('customRange').insertAdjacentElement('afterbegin', (createElement('span', { id: 'dateIcon',
                        className: 'e-input-group-icon e-range-icon e-icons', styles: 'margin-right: 10px' })));
                    document.getElementById('customRange').onclick = function () {
                        _this.datePicker.show(getElement('customRange'));
                    };
                }
            },
            change: function (args) {
                if (_this.triggerChange) {
                    _this.control.rangeSlider.performAnimation(args.startDate.getTime(), args.endDate.getTime(), _this.control);
                }
            }
        });
        this.datePicker.appendTo('#' + this.calendarId);
    };
    /**
     * To set and deselect the acrive style
     * @param buttons
     */
    PeriodSelector.prototype.setSelectedStyle = function (selectedIndex) {
        if (this.control.disableRangeSelector) {
            for (var i = 0, length_1 = this.nodes.childNodes.length; i < length_1; i++) {
                this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');
                this.nodes.childNodes[i].childNodes[0].classList.remove('e-active');
            }
            this.nodes.childNodes[selectedIndex].childNodes[0].classList.add('e-flat');
            this.nodes.childNodes[selectedIndex].childNodes[0].classList.add('e-active');
        }
    };
    /**
     * Button click handling
     */
    PeriodSelector.prototype.buttonClick = function (args, control) {
        var _this = this;
        var toolBarItems = this.toolbar.items;
        var clickedEle = args.item;
        var slider = control.rangeSlider;
        var updatedStart;
        var updatedEnd;
        var buttons = control.periodSelectorSettings.periods;
        var button = buttons.filter(function (btn) { return (btn.text === clickedEle.text); });
        buttons.map(function (period, index) {
            if (period.text === args.item.text) {
                _this.selectedIndex = (_this.nodes.childNodes.length - buttons.length) + index;
            }
        });
        this.setSelectedStyle(this.selectedIndex);
        if (clickedEle.text.toLowerCase() === 'all') {
            updatedStart = control.chartSeries.xMin;
            updatedEnd = control.chartSeries.xMax;
            slider.performAnimation(updatedStart, updatedEnd, control);
        }
        else if (clickedEle.text.toLowerCase() === 'ytd') {
            updatedStart = new Date(new Date(slider.currentEnd).getFullYear().toString()).getTime();
            updatedEnd = slider.currentEnd;
            slider.performAnimation(updatedStart, updatedEnd, control);
        }
        else if (clickedEle.text.toLowerCase() !== '') {
            updatedStart = this.changedRange(button[0].intervalType, slider.currentEnd, button[0].interval).getTime();
            updatedEnd = slider.currentEnd;
            slider.performAnimation(updatedStart, updatedEnd, control);
        }
        if (getElement(this.calendarId + '_popup') && !Browser.isDevice) {
            var element = getElement(this.calendarId + '_popup');
            element.querySelectorAll('.e-range-header')[0].style.display = 'none';
        }
    };
    /**
     *
     * @param type updatedRange for selector
     * @param end
     * @param interval
     */
    PeriodSelector.prototype.changedRange = function (type, end, interval) {
        var result = new Date(end);
        switch (type) {
            case 'Quarter':
                result.setMonth(result.getMonth() - (3 * interval));
                break;
            case 'Months':
                result.setMonth(result.getMonth() - interval);
                break;
            case 'Weeks':
                result.setDate(result.getDate() - (interval * 7));
                break;
            case 'Days':
                result.setDate(result.getDate() - interval);
                break;
            case 'Hours':
                result.setHours(result.getHours() - interval);
                break;
            case 'Minutes':
                result.setMinutes(result.getMinutes() - interval);
                break;
            case 'Seconds':
                result.setSeconds(result.getSeconds() - interval);
                break;
            default:
                result.setFullYear(result.getFullYear() - interval);
                break;
        }
        return result;
    };
    ;
    /**
     * Get module name
     */
    PeriodSelector.prototype.getModuleName = function () {
        return 'PeriodSelector';
    };
    /**
     * To destroy the period selector.
     * @return {void}
     * @private
     */
    PeriodSelector.prototype.destroy = function () {
        /**
         * destroy method
         */
    };
    return PeriodSelector;
}());
export { PeriodSelector };
