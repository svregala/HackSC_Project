import { Chart } from '../chart';
import { Axis, Row, Column } from '../axis/axis';
import { Size, Rect } from '../../common/utils/helper';
export declare class CartesianAxisLayoutPanel {
    private chart;
    private initialClipRect;
    private htmlObject;
    private element;
    private padding;
    /** @private */
    leftSize: number;
    /** @private */
    rightSize: number;
    /** @private */
    topSize: number;
    /** @private */
    bottomSize: number;
    /** @private */
    seriesClipRect: Rect;
    /** @private */
    constructor(chartModule?: Chart);
    /**
     * Measure the axis size.
     * @return {void}
     * @private
     */
    measureAxis(rect: Rect): void;
    private measureRowAxis(chart, rect);
    private measureColumnAxis(chart, rect);
    /**
     * Measure the column and row in chart.
     * @return {void}
     * @private
     */
    measureDefinition(definition: Row | Column, chart: Chart, size: Size, clipRect: Rect): void;
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    private calculateAxisSize(rect);
    /**
     * Measure the axis.
     * @return {void}
     * @private
     */
    measure(): void;
    private crossAt(chart);
    private updateCrossAt(axis, crossAt);
    private pushAxis(definition, axis);
    private arrangeAxis(definition);
    private getActualColumn(axis);
    private getActualRow(axis);
    /**
     * Measure the row size.
     * @return {void}
     */
    private calculateRowSize(rect);
    /**
     * Measure the row size.
     * @return {void}
     */
    private calculateColumnSize(rect);
    /**
     * To render the axis element.
     * @return {void}
     * @private
     */
    renderAxes(): Element;
    /**
     * To render scrollbar
     * @param chart
     * @param axis
     */
    private renderScrollbar(chart, axis);
    private findAxisPosition(axis);
    private drawBottomLine(definition, index, isRow);
    private drawAxisLine(axis, index, plotX, plotY, parent, rect);
    private drawYAxisGridLine(axis, index, parent, rect);
    private isBorder(axis, index, value);
    /**
     * To render the axis label.
     * @return {void}
     * @private
     */
    drawYAxisLabels(axis: Axis, index: number, parent: Element, rect: Rect): void;
    /**
     * To render the axis label border.
     * @return {void}
     * @private
     */
    private drawYAxisBorder(axis, index, parent, rect);
    private drawYAxisTitle(axis, index, parent, rect);
    private drawXAxisGridLine(axis, index, parent, rect);
    private drawAxisMinorLine(axis, tempInterval, minorGird, minorTick, rect, labelIndex);
    private findLogNumeric(axis, logPosition, logInterval, value, labelIndex);
    /**
     * To render the axis label.
     * @return {void}
     * @private
     */
    drawXAxisLabels(axis: Axis, index: number, parent: Element, rect: Rect): void;
    /**
     * To render the axis label border.
     * @return {void}
     * @private
     */
    private drawXAxisBorder(axis, index, parent, axisRect);
    /**
     * To create border element for axis.
     * @return {void}
     * @private
     */
    private createAxisBorderElement(axis, index, labelBorder, parent);
    private findAxisLabel(axis, label, width);
    private drawXAxisTitle(axis, index, parent, rect);
    private renderTickLine(axis, index, majorTick, minorTick, parent);
    private renderGridLine(axis, index, majorGrid, minorGird);
    private findParentNode(chart, label, axis, index);
    private createZoomingLabel(chart, labelElement, axis, index, rect);
}
