import { Chart } from '../chart';
import { Series } from './chart-series';
import { Mean } from '../../common/utils/helper';
import { ErrorBarMode } from '../../chart/utils/enum';
/**
 * `ErrorBar` module is used to render the error bar for series.
 */
export declare class ErrorBar {
    private chart;
    errorHeight: number;
    error: number;
    positiveHeight: number;
    negativeHeight: number;
    /**
     * Constructor for the error bar module.
     * @private
     */
    constructor(chart: Chart);
    /**
     * Render the error bar for series.
     * @return {void}
     */
    render(series: Series): void;
    private renderErrorBar(series);
    private findLocation(point, series, isInverted, x1, y1);
    private calculateFixedValue(point, series, isInverted, errorX, errorY, xAxis, yAxis);
    private calculatePercentageValue(point, series, isInverted, errorX, errorY, xAxis, yAxis);
    private calculateStandardDeviationValue(point, series, isInverted, errorX, errorY, xAxis, yAxis);
    private calculateStandardErrorValue(point, series, isInverted, errorX, errorY, xAxis, yAxis);
    private calculateCustomValue(point, series, isInverted, errorX, errorY, xAxis, yAxis);
    private getHorizontalDirection(start, mid, end, direction, errorMode, capLength);
    private getVerticalDirection(start, mid, end, direction, errorMode, capLength);
    private getBothDirection(start, mid, end, direction, errorMode, capLength);
    private getErrorDirection(start, mid, end, series, isInverted);
    meanCalculation(series: Series, mode: ErrorBarMode): Mean;
    private createElement(series);
    /**
     * Animates the series.
     * @param  {Series} series - Defines the series to animate.
     * @return {void}
     */
    doErrorBarAnimation(series: Series): void;
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the errorBar for series.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
