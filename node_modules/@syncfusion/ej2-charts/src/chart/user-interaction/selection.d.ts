import { ChartLocation, Rect } from '../../common/utils/helper';
import { SelectionMode } from '../utils/enum';
import { Chart } from '../chart';
import { Indexes } from '../../common/model/base';
import { BaseSelection } from '../../common/user-interaction/selection';
/**
 * `Selection` module handles the selection for chart.
 * @private
 */
export declare class Selection extends BaseSelection {
    private renderer;
    private isSeriesMode;
    private resizing;
    /** @private */
    rectPoints: Rect;
    private closeIconId;
    private closeIcon;
    private draggedRectGroup;
    private draggedRect;
    /** @private */
    selectedDataIndexes: Indexes[];
    private series;
    private dragging;
    private dragRect;
    private rectGrabbing;
    private resizeMode;
    private chart;
    /**
     * Constructor for selection module.
     * @private.
     */
    constructor(chart: Chart);
    /**
     * Binding events for selection module.
     */
    private addEventListener();
    /**
     * Chart mouse down
     */
    private mousedown(e);
    /**
     * UnBinding events for selection module.
     */
    private removeEventListener();
    /**
     * To find private variable values
     */
    private initPrivateVariables(chart);
    /**
     * Method to select the point and series.
     * @return {void}
     */
    invokeSelection(chart: Chart): void;
    private generateStyle(series);
    private selectDataIndex(chart, indexes);
    private getElementByIndex(chart, index, suffix?);
    private getClusterElements(chart, index);
    private findElements(chart, series, index, suffix?);
    /**
     * To find the selected element.
     * @return {void}
     * @private
     */
    calculateSelectedElements(event: Event): void;
    private performSelection(index, chart, element?);
    private selection(chart, index, selectedElements);
    private clusterSelection(chart, series, index);
    private removeMultiSelectEelments(chart, index, currentIndex, seriesCollection);
    private blurEffect(chartId, visibleSeries);
    private checkSelectionElements(element, className, visibility);
    private applyStyles(elements);
    private getSelectionClass(id);
    private removeStyles(elements);
    private addOrRemoveIndex(indexes, index, add?);
    private toEquals(first, second, checkSeriesOnly);
    /**
     * To redraw the selected points.
     * @return {void}
     * @private
     */
    redrawSelection(chart: Chart, oldMode: SelectionMode): void;
    /** @private */
    legendSelection(chart: Chart, series: number): void;
    private getSeriesElements(series);
    private indexFinder(id);
    /**
     * Drag selection that returns the selected data.
     * @return {void}
     * @private
     */
    calculateDragSelectedElements(chart: Chart, dragRect: Rect): void;
    private removeOffset(rect, clip);
    /**
     * Method to draw dragging rect.
     * @return {void}
     * @private
     */
    drawDraggingRect(chart: Chart, dragRect: Rect): void;
    private createCloseButton(x, y);
    /**
     * Method to remove dragged element.
     * @return {void}
     * @private
     */
    removeDraggedElements(chart: Chart, event: Event): void;
    /**
     * Method to resize the drag rect.
     * @return {void}
     * @private
     */
    resizingSelectionRect(chart: Chart, location: ChartLocation, tapped?: boolean): void;
    private findResizeMode(chartSvgObject, rect, location);
    private changeCursorStyle(isResize, rectelement, cursorStyle);
    private removeSelectedElements(chart, index, seriesCollection);
    private setAttributes(ele, object);
    /**
     * Method to move the dragged rect.
     * @return {void}
     * @private
     */
    draggedRectMoved(chart: Chart, grabbedPoint: Rect, doDrawing?: boolean): void;
    /**
     * To complete the selection.
     * @return {void}
     * @private
     */
    completeSelection(e: Event): void;
    private getDragRect(chart, seriesClipRect);
    /** @private */
    dragStart(chart: Chart, seriesClipRect: Rect, mouseDownX: number, mouseDownY: number, event: Event): void;
    /** @private */
    mouseMove(event: PointerEvent | TouchEvent): void;
    /**
     * Get module name.
     * @private
     */
    getModuleName(): string;
    /**
     * To destroy the selection.
     * @return {void}
     * @private
     */
    destroy(chart: Chart): void;
}
